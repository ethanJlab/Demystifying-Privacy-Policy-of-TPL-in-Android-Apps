FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $r23 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>($r43, r17) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>($r18, r17) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>($r43, r17) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>($r18, r17) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r14 = <com.j256.ormlite.dao.BaseDaoImpl: java.lang.ThreadLocal daoConfigLevelLocal> in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: $r11 = new com.j256.ormlite.stmt.StatementExecutor in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r8 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r12, $r7) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r14 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r13, $r8) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r14 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r13, $r8) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r15 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r14, $r10) in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r15 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r14, $r10) in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r3 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_LONG> in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r9 = <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ReferenceObjectCache defaultObjectCache> in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.dao.ReferenceObjectCache: com.j256.ormlite.dao.ReferenceObjectCache makeWeakCache()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: com.j256.ormlite.dao.ReferenceObjectCache makeWeakCache()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ReferenceObjectCache defaultObjectCache> in <com.j256.ormlite.dao.BaseDaoImpl: void clearAllInternalObjectCaches()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: r5 = newarray (com.j256.ormlite.dao.BaseDaoImpl)[$i5] in <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void addDao(com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>($r8, $r7, null) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>
CLINIT edge: $r2 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r8 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r2 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_LONG> in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.stmt.SelectIterator in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.stmt.SelectIterator: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType UPDATE> in <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType EXECUTE> in <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r8, $r7) in <com.j256.ormlite.stmt.StatementExecutor: int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r7, $r6) in <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r8, $r7) in <com.j256.ormlite.stmt.StatementExecutor: int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
CLINIT edge: $r2 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType UPDATE> in <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r7, $r6) in <com.j256.ormlite.stmt.StatementExecutor: int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r7, $r6) in <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>($r7, $r6) in <com.j256.ormlite.stmt.StatementExecutor: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>($r5, $r4, r1, r2, r3) in <com.j256.ormlite.stmt.StatementExecutor: int deleteObjects(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>($r5, $r4, r1, r2, r3) in <com.j256.ormlite.stmt.StatementExecutor: int deleteIds(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>
CLINIT edge: $r2 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType DELETE> in <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r2, z2, $r10, r3) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r18 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Batch tasks callable threw non-SQL exception", $r17) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r2, z2, $r10, r3) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>
CLINIT edge: $r15 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r8 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: r1 = newarray (java.lang.String)[i0] in <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r14 = newarray (java.lang.String)[1] in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
CLINIT edge: $r23 = newarray (com.j256.ormlite.field.FieldType)[1] in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>(r1) in <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.util.List)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>($r3) in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)>(r3, $r8, $r7) in <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)> ==> <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)>($r3) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor getConstructor()> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)>
STATIC edge: r5 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)>(r1, r0, r5) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)>
STATIC edge: r6 = staticinvoke <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)> ==> <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r1, r4) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: $r10 = <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] NO_FOREIGN_COLLECTIONS> in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $r8 = newarray (com.j256.ormlite.field.FieldType)[i0] in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>($r2, $r1) in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject()> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>($r2, $r1) in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject()> ==> <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r10, $r5) in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r4 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder limit(int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder limit(int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r3 = newarray (java.lang.String)[0] in <com.j256.ormlite.stmt.QueryBuilder: java.lang.String[] queryRawFirst()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType UPDATE> in <com.j256.ormlite.stmt.UpdateBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.stmt.query.SetValue in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetValue: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType DELETE> in <com.j256.ormlite.stmt.DeleteBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] $VALUES> in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/j256/ormlite/field/DataType;", r0) in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: r212 = staticinvoke <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
STATIC edge: $r60 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)>(r4, 1) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)>
STATIC edge: $r59 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)>(r4, 1) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)>
STATIC edge: $r190 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r189, $r185) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r196 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r195, $r191) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r203 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r201, $r202) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r209 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r208, $r204) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: r212 = staticinvoke <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>
CLINIT edge: $r59 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)>(r4, 1) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: $r27 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r111 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r36) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: r109 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r34) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
STATIC edge: r98 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
STATIC edge: r98 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r105) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: r101 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>(r4, r99, r100) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r97) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: $r27 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: r111 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r36) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: r109 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r34) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: r98 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r3, r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: r98 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r105) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r3, r97) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.field.FieldType: java.lang.ThreadLocal threadLevelCounters> in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: $r36 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r35, $r26) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r44 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r43, $r37) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r52 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r51, $r45) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: r61 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>($r16, $r19, $r20) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>
STATIC edge: r60 = staticinvoke <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>($r23, $r22) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>
CLINIT edge: r60 = staticinvoke <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)>($r23, $r22) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
STATIC edge: $r20 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r19, $r15) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r14 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r13, $r6) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r4 = <com.j256.ormlite.field.FieldType: java.lang.ThreadLocal threadLevelCounters> in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r22 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = <java.lang.Boolean: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r43 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $r37 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $r31 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r25 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r19 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Short: java.lang.Short valueOf(short)>
STATIC edge: $r13 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Character: java.lang.Character valueOf(char)>
STATIC edge: $r7 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $r46 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $d0 = <com.j256.ormlite.field.FieldType: double DEFAULT_VALUE_DOUBLE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r42 = <java.lang.Double: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: $f0 = <com.j256.ormlite.field.FieldType: float DEFAULT_VALUE_FLOAT> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r36 = <java.lang.Float: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: $l4 = <com.j256.ormlite.field.FieldType: long DEFAULT_VALUE_LONG> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r30 = <java.lang.Long: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $i3 = <com.j256.ormlite.field.FieldType: int DEFAULT_VALUE_INT> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r24 = <java.lang.Integer: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $s2 = <com.j256.ormlite.field.FieldType: short DEFAULT_VALUE_SHORT> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r18 = <java.lang.Short: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Short: void <clinit>()>
CLINIT edge: $c1 = <com.j256.ormlite.field.FieldType: char DEFAULT_VALUE_CHAR> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r12 = <java.lang.Character: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: $b0 = <com.j256.ormlite.field.FieldType: byte DEFAULT_VALUE_BYTE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r6 = <java.lang.Byte: java.lang.Class TYPE> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $z0 = <com.j256.ormlite.field.FieldType: boolean DEFAULT_VALUE_BOOLEAN> in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)>(r1, r2, r3) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)>(r1, r2, r3) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)>
CLINIT edge: $r5 = new com.j256.ormlite.field.FieldType in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r10 = <com.j256.ormlite.stmt.SelectIterator: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.SelectIterator: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <com.j256.ormlite.stmt.SelectIterator: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r26 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>(r0, r34) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: $r25 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r24, $r19) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: r37 = staticinvoke <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>(r35, $r12) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>
STATIC edge: r37 = staticinvoke <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>(r35, $r9) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>
STATIC edge: r33 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r32) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: r33 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
STATIC edge: r26 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>
CLINIT edge: r33 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r32) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: r33 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>
CLINIT edge: $r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: r4 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>($r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r1, r2) in <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r1, r2) in <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r1, r2) in <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r1, r2) in <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>($r6, r1) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r2, r1) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>($r6, r1) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>
CLINIT edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r2, r1) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map configMap> in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void clearDaoCache()>() in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <com.j256.ormlite.dao.DaoManager: void clearDaoCache()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map classMap> in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map configMap> in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$200(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int)>($r2, $r1, -1) in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$200(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int)>($r2, $r1, -1) in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$200(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int)>
CLINIT edge: $r2 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,int)>($r1, -1) in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,int)>($r1, -1) in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,int)>
CLINIT edge: $r0 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] $VALUES> in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;", r0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] $VALUES> in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/j256/ormlite/field/SqlType;", r0) in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r1 = <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataType DEFAULT_DATA_TYPE> in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataType DEFAULT_DATA_TYPE> in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>(java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataType DEFAULT_DATA_TYPE> in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>(java.lang.String,java.lang.String,com.j256.ormlite.field.DataType,java.lang.String,int,boolean,boolean,boolean,java.lang.String,boolean,com.j256.ormlite.table.DatabaseTableConfig,boolean,java.lang.Enum,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType UNKNOWN> in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>(java.lang.String,java.lang.String,com.j256.ormlite.field.DataType,java.lang.String,int,boolean,boolean,boolean,java.lang.String,boolean,com.j256.ormlite.table.DatabaseTableConfig,boolean,java.lang.Enum,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)>(r5, r8, r0, r2) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: r6 = staticinvoke <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)>(r5, r0) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)>(r5, r0, r4) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)>(r5, r8, r0, r2) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)>
CLINIT edge: $r7 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)>(r5, r0, r4) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>(r0, "get") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>(r0, "get") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>(r0, "set") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>(r0, "set") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)>
CLINIT edge: $r7 = <java.lang.Void: java.lang.Class TYPE> in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.Void: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.DatabaseFieldConfig in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: $r24 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r23) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r22 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r21) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r19 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r18) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r17 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r16) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r15 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r14) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)>(r2, $r12) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r10) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r6) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
CLINIT edge: $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r9 = <com.j256.ormlite.support.DatabaseConnection: java.lang.Object MORE_THAN_ONE> in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.support.DatabaseConnection: void <clinit>()>
CLINIT edge: $r4 = newarray (com.j256.ormlite.field.FieldType)[1] in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>(r0, r1, r13) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>
CLINIT edge: $r2 = <com.j256.ormlite.field.DataPersisterManager: java.util.List registeredPersisters> in <com.j256.ormlite.field.DataPersisterManager: void registerDataPersisters(com.j256.ormlite.field.DataPersister[])> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.DataPersisterManager: java.util.List registeredPersisters> = null in <com.j256.ormlite.field.DataPersisterManager: void clear()> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.DataPersisterManager: java.util.List registeredPersisters> in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level INFO> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level ERROR> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level FATAL> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)>($r1) in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)>
CLINIT edge: $r1 = new com.j256.ormlite.logger.Logger in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()>
CLINIT edge: $r7 = <com.j256.ormlite.stmt.query.SetValue: com.j256.ormlite.stmt.ArgumentHolder nullValue> in <com.j256.ormlite.stmt.query.SetValue: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetValue: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType singleTon> in <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()> ==> <com.j256.ormlite.field.types.BooleanType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType singleTon> in <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.StringBytesType: com.j256.ormlite.field.types.StringBytesType singleTon> in <com.j256.ormlite.field.types.StringBytesType: com.j256.ormlite.field.types.StringBytesType getSingleton()> ==> <com.j256.ormlite.field.types.StringBytesType: void <clinit>()>
CLINIT edge: $r6 = new java.lang.String in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r12, $r7) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r6) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DoubleObjectType: com.j256.ormlite.field.types.DoubleObjectType singleTon> in <com.j256.ormlite.field.types.DoubleObjectType: com.j256.ormlite.field.types.DoubleObjectType getSingleton()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()>
CLINIT edge: $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
STATIC edge: $d0 = staticinvoke <java.lang.Double: double parseDouble(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Double: double parseDouble(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Double: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Double: java.lang.Double valueOf(double)>($d0) in <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Double: java.lang.Double valueOf(double)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.FloatObjectType: com.j256.ormlite.field.types.FloatObjectType singleTon> in <com.j256.ormlite.field.types.FloatObjectType: com.j256.ormlite.field.types.FloatObjectType getSingleton()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
CLINIT edge: $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0) in <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0) in <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Float: float parseFloat(java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.UuidType: com.j256.ormlite.field.types.UuidType singleTon> in <com.j256.ormlite.field.types.UuidType: com.j256.ormlite.field.types.UuidType getSingleton()> ==> <com.j256.ormlite.field.types.UuidType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r0) in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.util.UUID: java.util.UUID fromString(java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r2) in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r2 = staticinvoke <java.util.UUID: java.util.UUID fromString(java.lang.String)>(r1) in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.UUID: java.util.UUID fromString(java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r3) in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r0 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object generateId()> ==> <java.util.UUID: java.util.UUID randomUUID()>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.UuidType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.UuidType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.UuidType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateTimeType: com.j256.ormlite.field.types.DateTimeType singleTon> in <com.j256.ormlite.field.types.DateTimeType: com.j256.ormlite.field.types.DateTimeType getSingleton()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateTimeType: java.lang.String[] associatedClassNames> in <com.j256.ormlite.field.types.DateTimeType: java.lang.String[] getAssociatedClassNames()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r8, $r4) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not use reflection to construct a Joda DateTime", $r5) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.DateStringType singleTon> in <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.DateStringType getSingleton()> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
CLINIT edge: $r1 = <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r15, $r5) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.field.types.DateStringType: java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>(r2, r3) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType: java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r0, $r1) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>
CLINIT edge: $r3 = <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
STATIC edge: $r17 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r16, $r6) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.field.types.DateStringType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>(r4, r1) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseDateType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>
STATIC edge: r4 = staticinvoke <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r2, $r3) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>
CLINIT edge: $r1 = <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> in <com.j256.ormlite.field.types.DateStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r0, $r1) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>
CLINIT edge: $r3 = <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> in <com.j256.ormlite.field.types.DateStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.DateStringType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.DateStringType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType singleTon> in <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()> ==> <com.j256.ormlite.field.types.IntType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType singleTon> in <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BigIntegerType: com.j256.ormlite.field.types.BigIntegerType singleTon> in <com.j256.ormlite.field.types.BigIntegerType: com.j256.ormlite.field.types.BigIntegerType getSingleton()> ==> <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()>
CLINIT edge: $r0 = new java.math.BigInteger in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigInteger: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r2) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r0 = new java.math.BigInteger in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.math.BigInteger: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r3) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.BigIntegerType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.BigIntegerType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.LongObjectType: com.j256.ormlite.field.types.LongObjectType singleTon> in <com.j256.ormlite.field.types.LongObjectType: com.j256.ormlite.field.types.LongObjectType getSingleton()> ==> <com.j256.ormlite.field.types.LongObjectType: void <clinit>()>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(1L) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.DateType singleTon> in <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.DateType getSingleton()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r0, $r2) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r15, $r7) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.field.types.DateType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>(r3, r5) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r0, $r2) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType singleTon> in <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType getSingleton()> ==> <com.j256.ormlite.field.types.SqlDateType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType singleTon> in <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType getSingleton()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>(r2) in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType singleTon> in <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType getSingleton()> ==> <com.j256.ormlite.field.types.TimeStampType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType singleTon> in <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType getSingleton()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType singleTon> in <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()> ==> <com.j256.ormlite.field.types.ByteType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType singleTon> in <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType singleTon> in <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()> ==> <com.j256.ormlite.field.types.DoubleType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType singleTon> in <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType singleTon> in <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType getSingleton()> ==> <com.j256.ormlite.field.types.LongStringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType singleTon> in <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType getSingleton()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType singleTon> in <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()> ==> <com.j256.ormlite.field.types.ShortType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType singleTon> in <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType singleTon> in <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()> ==> <com.j256.ormlite.field.types.LongType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType singleTon> in <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()> ==> <com.j256.ormlite.field.types.LongObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BooleanObjectType: com.j256.ormlite.field.types.BooleanObjectType singleTon> in <com.j256.ormlite.field.types.BooleanObjectType: com.j256.ormlite.field.types.BooleanObjectType getSingleton()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0) in <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0) in <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z0) in <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType singleTon> in <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()>
CLINIT edge: $r0 = new java.math.BigDecimal in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigDecimal: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r2) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r0 = new java.math.BigDecimal in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.math.BigDecimal: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r3) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.BigDecimalStringType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.BigDecimalStringType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.IntegerObjectType: com.j256.ormlite.field.types.IntegerObjectType singleTon> in <com.j256.ormlite.field.types.IntegerObjectType: com.j256.ormlite.field.types.IntegerObjectType getSingleton()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ByteArrayType: com.j256.ormlite.field.types.ByteArrayType singleTon> in <com.j256.ormlite.field.types.ByteArrayType: com.j256.ormlite.field.types.ByteArrayType getSingleton()> ==> <com.j256.ormlite.field.types.ByteArrayType: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>($r5, $r4) in <com.j256.ormlite.field.types.ByteArrayType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.Arrays: boolean equals(byte[],byte[])>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateLongType: com.j256.ormlite.field.types.DateLongType singleTon> in <com.j256.ormlite.field.types.DateLongType: com.j256.ormlite.field.types.DateLongType getSingleton()> ==> <com.j256.ormlite.field.types.DateLongType: void <clinit>()>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r10, $r2) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l1) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r2) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.CharacterObjectType: com.j256.ormlite.field.types.CharacterObjectType singleTon> in <com.j256.ormlite.field.types.CharacterObjectType: com.j256.ormlite.field.types.CharacterObjectType getSingleton()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
CLINIT edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Character: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>($c1) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Character: java.lang.Character valueOf(char)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ByteObjectType: com.j256.ormlite.field.types.ByteObjectType singleTon> in <com.j256.ormlite.field.types.ByteObjectType: com.j256.ormlite.field.types.ByteObjectType getSingleton()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()>
CLINIT edge: $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r0) in <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0) in <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r0) in <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: byte parseByte(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1) in <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Byte: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1) in <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.ShortObjectType: com.j256.ormlite.field.types.ShortObjectType singleTon> in <com.j256.ormlite.field.types.ShortObjectType: com.j256.ormlite.field.types.ShortObjectType getSingleton()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()>
CLINIT edge: $s0 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(r0) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Short: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s0) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Short: java.lang.Short valueOf(short)>
STATIC edge: $s0 = staticinvoke <java.lang.Short: short parseShort(java.lang.String)>(r0) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Short: short parseShort(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Short: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s1) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Short: java.lang.Short valueOf(short)>
CLINIT edge: $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Short: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Short: java.lang.Short valueOf(short)>
STATIC edge: $r3 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(1) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Short: java.lang.Short valueOf(short)>
CLINIT edge: $r2 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>($s2) in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Short: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.StringType: com.j256.ormlite.field.types.StringType singleTon> in <com.j256.ormlite.field.types.StringType: com.j256.ormlite.field.types.StringType getSingleton()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.StringType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.StringType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.SerializableType: com.j256.ormlite.field.types.SerializableType singleTon> in <com.j256.ormlite.field.types.SerializableType: com.j256.ormlite.field.types.SerializableType getSingleton()> ==> <com.j256.ormlite.field.types.SerializableType: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.util.Arrays: java.lang.String toString(byte[])>(r2) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.Arrays: java.lang.String toString(byte[])>
STATIC edge: $r18 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r17, $r9) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r12, $r8) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.EnumIntegerType: com.j256.ormlite.field.types.EnumIntegerType singleTon> in <com.j256.ormlite.field.types.EnumIntegerType: com.j256.ormlite.field.types.EnumIntegerType getSingleton()> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r10 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, null, $r9) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, $r6, $r7) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>
STATIC edge: $r10 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, null, $r9) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>
CLINIT edge: $r8 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, $r6, $r7) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType singleTon> in <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()> ==> <com.j256.ormlite.field.types.CharType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType singleTon> in <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType singleTon> in <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, null, $r9) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, $r6, $r7) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>
STATIC edge: $r10 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, null, $r9) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>
CLINIT edge: $r8 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)>(r0, r2, $r6, $r7) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
CLINIT edge: $i0 = <com.j256.ormlite.field.types.EnumStringType: int DEFAULT_WIDTH> in <com.j256.ormlite.field.types.EnumStringType: int getDefaultWidth()> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType singleTon> in <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()> ==> <com.j256.ormlite.field.types.FloatType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType singleTon> in <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.BigDecimalNumericType: com.j256.ormlite.field.types.BigDecimalNumericType singleTon> in <com.j256.ormlite.field.types.BigDecimalNumericType: com.j256.ormlite.field.types.BigDecimalNumericType getSingleton()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: void <clinit>()>
CLINIT edge: $r0 = new java.math.BigDecimal in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigDecimal: void <clinit>()>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r11, $r2) in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r38 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r37, $r30) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r52 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i10) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r51 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: r15 = newarray (com.j256.ormlite.field.FieldType)[i1] in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: r21 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>(r2, r20) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>
STATIC edge: $z0 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>(r2, r19) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r2, $r0, r17, null) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
STATIC edge: $z1 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>(r2, r17) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>
STATIC edge: $z2 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>(r2, r14) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedCreate: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r2, $r0, "INSERT INTO ", $r4) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
CLINIT edge: r25 = newarray (com.j256.ormlite.field.FieldType)[i5] in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r4, $r2, r22, null) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>(r4, r1, $r2, null) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r4, $r2, r11, null) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
STATIC edge: $z0 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType)>(r11, r1) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdate: boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType)>
STATIC edge: $z1 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType)>(r24, r1) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdate: boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdate: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, $r2, "UPDATE ", $r5) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
CLINIT edge: $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r31 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r30, $r23) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r38 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r37 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r24 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r23, $r16) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r29 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r10 = newarray (com.j256.ormlite.field.FieldType)[2] in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdateId: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>(r4, r1, $r2, null) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdateId: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r4, $r2, r1, null) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedUpdateId: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, $r2, "UPDATE ", $r5) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
CLINIT edge: $r8 = newarray (com.j256.ormlite.field.FieldType)[1] in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedDelete: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>(r4, r1, $r2, null) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedDelete: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, $r2, "DELETE FROM ", $r5) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
CLINIT edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r22 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r21, $r14) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r22 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r21, $r14) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r5 = newarray (com.j256.ormlite.field.FieldType)[1] in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedRefresh: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>(r2, r0, r1) in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)>(r0, r1, $i0) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)>
STATIC edge: $i2 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)>(r7, $r8, r3, r4, r9) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)>(r0, r1, $i0) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)>
STATIC edge: $i2 = staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)>(r7, $r8, r3, r4, r9) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)>
CLINIT edge: r7 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType STRING> in <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
CLINIT edge: $r1 = new com.j256.ormlite.stmt.SelectIterator in <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)>($r2, r1) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)>($r2, r1) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)>
CLINIT edge: r4 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r1, z0, $r2, r3) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: r4 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r1, z0, $r2, r3) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.ConnectionSource,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r0, 0, r1, r2) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>(r0, 0, r1, r2) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)>
CLINIT edge: $r7 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Transaction callable threw non-SQL exception", $r12) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>
STATIC edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>
STATIC edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>
CLINIT edge: $r11 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)>(r0, r15) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r18 = <com.j256.ormlite.misc.TransactionManager: java.util.concurrent.atomic.AtomicInteger savePointCounter> in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType[] access$000(com.j256.ormlite.stmt.QueryBuilder)>($r1) in <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: com.j256.ormlite.field.FieldType[] getResultFieldTypes()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType[] access$000(com.j256.ormlite.stmt.QueryBuilder)>
CLINIT edge: $r81 = new com.j256.ormlite.field.DatabaseFieldConfig in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)>(r0, 0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)>(r0, 0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>
STATIC edge: $r51 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r50, $r46) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r57 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r56, $r52) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r63 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r62, $r58) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r69 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r68, $r64) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r7 = staticinvoke <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
CLINIT edge: $r11 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType ENUM_INTEGER> in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
CLINIT edge: $r13 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType ENUM_STRING> in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r3) in <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object[],boolean)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object first()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object first()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object nextThrow()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object nextThrow()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object current()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object current()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object previous()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object previous()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object moveRelative(int)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object moveRelative(int)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r1) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.List access$000(com.j256.ormlite.dao.EagerForeignCollection)>
CLINIT edge: $r0 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] $VALUES> in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/j256/ormlite/logger/Log$Level;", r0) in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] $VALUES> in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/j256/ormlite/logger/LoggerFactory$LogType;", r0) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.stmt.NullArgHolder: com.j256.ormlite.field.SqlType getSqlType()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.System: void <clinit>()>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r3 = <com.j256.ormlite.logger.LocalLog: java.util.List classLevels> in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
STATIC edge: r22 = staticinvoke <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>($r4) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>
STATIC edge: r21 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.j256.ormlite.logger.level") in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: java.lang.String getSimpleClassName(java.lang.String)>(r1) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory: java.lang.String getSimpleClassName(java.lang.String)>
CLINIT edge: r22 = staticinvoke <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>($r4) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: r21 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.j256.ormlite.logger.level") in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r3 = <java.lang.System: java.io.PrintStream out> in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <com.j256.ormlite.logger.LocalLog: java.io.PrintStream printStream> = $r1 in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
CLINIT edge: $r2 = new java.io.File in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
CLINIT edge: <com.j256.ormlite.logger.LocalLog: java.io.PrintStream printStream> = $r3 in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.logger.LocalLog in <com.j256.ormlite.logger.LoggerFactory$LogType$1: com.j256.ormlite.logger.Log createLog(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
CLINIT edge: r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r4) in <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: r8 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r4) in <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)> ==> <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: $r3 = new com.j256.ormlite.dao.RuntimeExceptionDao in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: $r3 = new com.j256.ormlite.dao.RuntimeExceptionDao in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r1) in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r12, $r3) in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $r6 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r3 = <com.j256.ormlite.db.BaseDatabaseType: java.lang.String DEFAULT_SEQUENCE_SUFFIX> in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.db.BaseDatabaseType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BOOLEAN> in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: com.j256.ormlite.field.SqlType getSqlType()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: z0 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
CLINIT edge: $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Byte: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
CLINIT edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Byte: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r4 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r2) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Byte: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $b0 = staticinvoke <java.lang.Byte: byte parseByte(java.lang.String)>(r2) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.lang.Byte: byte parseByte(java.lang.String)>
CLINIT edge: $r1 = <com.j256.ormlite.db.BaseSqliteDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter booleanConverter> in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.db.BaseDatabaseType: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter booleanConverter> in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.db.BaseSqliteDatabaseType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.DatabaseFieldConfig in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)>($r0, $r5, $r4) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not read DatabaseFieldConfig from stream", $r11) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)>($r0, $r5, $r4) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>(r0, r1, r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not write config to writer", $r3) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>(r0, r1, r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>
CLINIT edge: $r6 = <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DataPersister DEFAULT_DATA_PERSISTER> in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
STATIC edge: $r33 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: $r64 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: $r116 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z14) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Boolean: java.lang.String toString(boolean)>
STATIC edge: $r120 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: r147 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>
CLINIT edge: $r33 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i3) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r64 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i4) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r116 = staticinvoke <java.lang.Boolean: java.lang.String toString(boolean)>($z14) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r120 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i5) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r147 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String readCoreVersion()>() in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusJdbcVersions()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String readCoreVersion()>
STATIC edge: staticinvoke <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("core", r0, "jdbc", r1) in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusJdbcVersions()> ==> <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
STATIC edge: r1 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String readJdbcVersion()>() in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusJdbcVersions()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String readJdbcVersion()>
STATIC edge: r0 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String readCoreVersion()>() in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusAndroidVersions()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String readCoreVersion()>
STATIC edge: staticinvoke <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>("core", r0, "android", r1) in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusAndroidVersions()> ==> <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
STATIC edge: r1 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String readAndroidVersion()>() in <com.j256.ormlite.misc.VersionUtils: void checkCoreVersusAndroidVersions()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String readAndroidVersion()>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: java.util.List loadDatabaseConfigFromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)>
STATIC edge: $r12 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not read DatabaseTableConfig from stream", $r11) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)>($r0, $r5, $r4) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)>(r2, $r0) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: staticinvoke <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: $r4 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not write config to writer", $r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>(r0, r1, 0) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>(r0, r1, 0) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>(r0, r1, 1) in <com.j256.ormlite.table.TableUtils: int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>(r0, r1, 1) in <com.j256.ormlite.table.TableUtils: int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>(r0, r1, 0) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>(r0, r1, 0) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>(r0, r1, 1) in <com.j256.ormlite.table.TableUtils: int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>(r0, r1, 1) in <com.j256.ormlite.table.TableUtils: int createTableIfNotExists(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r7, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: $r5 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r7, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r8, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: $r6 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r8, 0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r4, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r4, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r4 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r4, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r4, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r4 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r1, r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>(r1, r3) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>(r1, r3) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>
STATIC edge: r3 = staticinvoke <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>(r0) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>(r0, $r2) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>(r0, $r2) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)>
CLINIT edge: $r0 = newarray (com.j256.ormlite.field.FieldType)[0] in <com.j256.ormlite.table.TableInfo: void <clinit>()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] NO_FOREIGN_COLLECTIONS> = $r0 in <com.j256.ormlite.table.TableInfo: void <clinit>()> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: <com.j256.ormlite.dao.DaoManager: java.util.Map configMap> = null in <com.j256.ormlite.dao.DaoManager: void <clinit>()> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/dao/DaoManager;") in <com.j256.ormlite.dao.DaoManager: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.j256.ormlite.dao.BaseDaoImpl: java.lang.ThreadLocal daoConfigLevelLocal> = $r0 in <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/stmt/StatementExecutor;") in <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: $r1 = newarray (com.j256.ormlite.field.FieldType)[0] in <com.j256.ormlite.stmt.StatementExecutor: void <clinit>()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.stmt.StatementBuilder$StatementType in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.j256.ormlite.stmt.SelectIterator: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.stmt.SelectIterator: void <clinit>()> ==> <com.j256.ormlite.stmt.SelectIterator: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/stmt/SelectIterator;") in <com.j256.ormlite.stmt.SelectIterator: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.misc.TransactionManager: void <clinit>()> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/misc/TransactionManager;") in <com.j256.ormlite.misc.TransactionManager: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.FieldType: java.lang.ThreadLocal threadLevelCounters> = $r0 in <com.j256.ormlite.field.FieldType: void <clinit>()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: r19 = staticinvoke <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)>(r17, r18, r16, r2) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: r19 = staticinvoke <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)>(r17, r18, r16, r2) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)>
CLINIT edge: $r3 = newarray (com.j256.ormlite.field.FieldType)[$i0] in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.stmt.query.SetValue: com.j256.ormlite.stmt.ArgumentHolder nullValue> = $r0 in <com.j256.ormlite.stmt.query.SetValue: void <clinit>()> ==> <com.j256.ormlite.stmt.query.SetValue: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.DataType in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: $r65 = staticinvoke <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType getSingleton()>
STATIC edge: $r63 = staticinvoke <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType getSingleton()>
STATIC edge: $r61 = staticinvoke <com.j256.ormlite.field.types.DateTimeType: com.j256.ormlite.field.types.DateTimeType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: com.j256.ormlite.field.types.DateTimeType getSingleton()>
STATIC edge: $r59 = staticinvoke <com.j256.ormlite.field.types.BigDecimalNumericType: com.j256.ormlite.field.types.BigDecimalNumericType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: com.j256.ormlite.field.types.BigDecimalNumericType getSingleton()>
STATIC edge: $r57 = staticinvoke <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>
STATIC edge: $r55 = staticinvoke <com.j256.ormlite.field.types.BigIntegerType: com.j256.ormlite.field.types.BigIntegerType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigIntegerType: com.j256.ormlite.field.types.BigIntegerType getSingleton()>
STATIC edge: $r53 = staticinvoke <com.j256.ormlite.field.types.UuidType: com.j256.ormlite.field.types.UuidType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.UuidType: com.j256.ormlite.field.types.UuidType getSingleton()>
STATIC edge: $r51 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: com.j256.ormlite.field.types.EnumIntegerType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumIntegerType: com.j256.ormlite.field.types.EnumIntegerType getSingleton()>
STATIC edge: $r49 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>
STATIC edge: $r47 = staticinvoke <com.j256.ormlite.field.types.SerializableType: com.j256.ormlite.field.types.SerializableType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.SerializableType: com.j256.ormlite.field.types.SerializableType getSingleton()>
STATIC edge: $r45 = staticinvoke <com.j256.ormlite.field.types.DoubleObjectType: com.j256.ormlite.field.types.DoubleObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: com.j256.ormlite.field.types.DoubleObjectType getSingleton()>
STATIC edge: $r43 = staticinvoke <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()>
STATIC edge: $r41 = staticinvoke <com.j256.ormlite.field.types.FloatObjectType: com.j256.ormlite.field.types.FloatObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatObjectType: com.j256.ormlite.field.types.FloatObjectType getSingleton()>
STATIC edge: $r39 = staticinvoke <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()>
STATIC edge: $r37 = staticinvoke <com.j256.ormlite.field.types.LongObjectType: com.j256.ormlite.field.types.LongObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongObjectType: com.j256.ormlite.field.types.LongObjectType getSingleton()>
STATIC edge: $r35 = staticinvoke <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()>
STATIC edge: $r33 = staticinvoke <com.j256.ormlite.field.types.IntegerObjectType: com.j256.ormlite.field.types.IntegerObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: com.j256.ormlite.field.types.IntegerObjectType getSingleton()>
STATIC edge: $r31 = staticinvoke <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()>
STATIC edge: $r29 = staticinvoke <com.j256.ormlite.field.types.ShortObjectType: com.j256.ormlite.field.types.ShortObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortObjectType: com.j256.ormlite.field.types.ShortObjectType getSingleton()>
STATIC edge: $r27 = staticinvoke <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()>
STATIC edge: $r25 = staticinvoke <com.j256.ormlite.field.types.ByteObjectType: com.j256.ormlite.field.types.ByteObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteObjectType: com.j256.ormlite.field.types.ByteObjectType getSingleton()>
STATIC edge: $r23 = staticinvoke <com.j256.ormlite.field.types.ByteArrayType: com.j256.ormlite.field.types.ByteArrayType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteArrayType: com.j256.ormlite.field.types.ByteArrayType getSingleton()>
STATIC edge: $r21 = staticinvoke <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()>
STATIC edge: $r19 = staticinvoke <com.j256.ormlite.field.types.CharacterObjectType: com.j256.ormlite.field.types.CharacterObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: com.j256.ormlite.field.types.CharacterObjectType getSingleton()>
STATIC edge: $r17 = staticinvoke <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()>
STATIC edge: $r15 = staticinvoke <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.DateStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.DateStringType getSingleton()>
STATIC edge: $r13 = staticinvoke <com.j256.ormlite.field.types.DateLongType: com.j256.ormlite.field.types.DateLongType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateLongType: com.j256.ormlite.field.types.DateLongType getSingleton()>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.DateType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.DateType getSingleton()>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.field.types.BooleanObjectType: com.j256.ormlite.field.types.BooleanObjectType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: com.j256.ormlite.field.types.BooleanObjectType getSingleton()>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()>
STATIC edge: $r5 = staticinvoke <com.j256.ormlite.field.types.StringBytesType: com.j256.ormlite.field.types.StringBytesType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringBytesType: com.j256.ormlite.field.types.StringBytesType getSingleton()>
STATIC edge: $r3 = staticinvoke <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType getSingleton()>
STATIC edge: $r1 = staticinvoke <com.j256.ormlite.field.types.StringType: com.j256.ormlite.field.types.StringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringType: com.j256.ormlite.field.types.StringType getSingleton()>
CLINIT edge: $r65 = staticinvoke <com.j256.ormlite.field.types.TimeStampType: com.j256.ormlite.field.types.TimeStampType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.TimeStampType: void <clinit>()>
CLINIT edge: $r63 = staticinvoke <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.SqlDateType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.SqlDateType: void <clinit>()>
CLINIT edge: $r61 = staticinvoke <com.j256.ormlite.field.types.DateTimeType: com.j256.ormlite.field.types.DateTimeType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
CLINIT edge: $r59 = staticinvoke <com.j256.ormlite.field.types.BigDecimalNumericType: com.j256.ormlite.field.types.BigDecimalNumericType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: void <clinit>()>
CLINIT edge: $r57 = staticinvoke <com.j256.ormlite.field.types.BigDecimalStringType: com.j256.ormlite.field.types.BigDecimalStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()>
CLINIT edge: $r55 = staticinvoke <com.j256.ormlite.field.types.BigIntegerType: com.j256.ormlite.field.types.BigIntegerType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()>
CLINIT edge: $r53 = staticinvoke <com.j256.ormlite.field.types.UuidType: com.j256.ormlite.field.types.UuidType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.UuidType: void <clinit>()>
CLINIT edge: $r51 = staticinvoke <com.j256.ormlite.field.types.EnumIntegerType: com.j256.ormlite.field.types.EnumIntegerType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()>
CLINIT edge: $r49 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
CLINIT edge: $r47 = staticinvoke <com.j256.ormlite.field.types.SerializableType: com.j256.ormlite.field.types.SerializableType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.SerializableType: void <clinit>()>
CLINIT edge: $r43 = staticinvoke <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()>
CLINIT edge: $r43 = staticinvoke <com.j256.ormlite.field.types.DoubleType: com.j256.ormlite.field.types.DoubleType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleType: void <clinit>()>
CLINIT edge: $r39 = staticinvoke <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()>
CLINIT edge: $r39 = staticinvoke <com.j256.ormlite.field.types.FloatType: com.j256.ormlite.field.types.FloatType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatType: void <clinit>()>
CLINIT edge: $r35 = staticinvoke <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongObjectType: void <clinit>()>
CLINIT edge: $r35 = staticinvoke <com.j256.ormlite.field.types.LongType: com.j256.ormlite.field.types.LongType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongType: void <clinit>()>
CLINIT edge: $r31 = staticinvoke <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()>
CLINIT edge: $r31 = staticinvoke <com.j256.ormlite.field.types.IntType: com.j256.ormlite.field.types.IntType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntType: void <clinit>()>
CLINIT edge: $r27 = staticinvoke <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()>
CLINIT edge: $r27 = staticinvoke <com.j256.ormlite.field.types.ShortType: com.j256.ormlite.field.types.ShortType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortType: void <clinit>()>
CLINIT edge: $r23 = staticinvoke <com.j256.ormlite.field.types.ByteArrayType: com.j256.ormlite.field.types.ByteArrayType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteArrayType: void <clinit>()>
CLINIT edge: $r21 = staticinvoke <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()>
CLINIT edge: $r21 = staticinvoke <com.j256.ormlite.field.types.ByteType: com.j256.ormlite.field.types.ByteType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteType: void <clinit>()>
CLINIT edge: $r17 = staticinvoke <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()>
CLINIT edge: $r17 = staticinvoke <com.j256.ormlite.field.types.CharType: com.j256.ormlite.field.types.CharType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharType: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <com.j256.ormlite.field.types.DateStringType: com.j256.ormlite.field.types.DateStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <com.j256.ormlite.field.types.DateLongType: com.j256.ormlite.field.types.DateLongType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateLongType: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.DateType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <com.j256.ormlite.field.types.BooleanType: com.j256.ormlite.field.types.BooleanType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanType: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.j256.ormlite.field.types.StringBytesType: com.j256.ormlite.field.types.StringBytesType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringBytesType: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.j256.ormlite.field.types.LongStringType: com.j256.ormlite.field.types.LongStringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongStringType: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.j256.ormlite.field.types.StringType: com.j256.ormlite.field.types.StringType getSingleton()>() in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: com.j256.ormlite.field.types.EnumStringType getSingleton()>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister DEFAULT_ENUM_PERSISTER> = $r0 in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.DataPersisterManager: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class DEFAULT_PERSISTER_CLASS> = class "Lcom/j256/ormlite/field/types/VoidType;" in <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType UNKNOWN> in <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <java.lang.Double: java.lang.Class TYPE> = null in <java.lang.Double: void <clinit>()> ==> <java.lang.Double: void <clinit>()>
CLINIT edge: <java.lang.Float: java.lang.Class TYPE> = null in <java.lang.Float: void <clinit>()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: <java.lang.Short: java.lang.Class TYPE> = null in <java.lang.Short: void <clinit>()> ==> <java.lang.Short: void <clinit>()>
CLINIT edge: <java.lang.Character: java.lang.Class TYPE> = null in <java.lang.Character: void <clinit>()> ==> <java.lang.Character: void <clinit>()>
CLINIT edge: <java.lang.Byte: java.lang.Class TYPE> = null in <java.lang.Byte: void <clinit>()> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map configMap> in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: r6 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r5, r4) in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map classMap> in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: r28 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>($r0) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>($r4, r35) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r4) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>($r0, r35) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: $r27 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r26, $r21) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: r14 = staticinvoke <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>(r36, $r12) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])>
STATIC edge: r34 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
STATIC edge: staticinvoke <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>($r0, r31) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)>
STATIC edge: r31 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>($r4) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)>
STATIC edge: r28 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>($r0) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)>
CLINIT edge: r34 = staticinvoke <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map tableConfigMap> in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map classMap> in <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map classMap> in <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.dao.DaoManager: java.util.Map tableConfigMap> in <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.SqlType in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.DatabaseFieldConfig in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <clinit>()>
STATIC edge: $r14 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>(r13) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: r13 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r12) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: r11 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r10) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r9 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r8) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>($r6) in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)>
CLINIT edge: <java.lang.Void: java.lang.Class TYPE> = null in <java.lang.Void: void <clinit>()> ==> <java.lang.Void: void <clinit>()>
CLINIT edge: <com.j256.ormlite.support.DatabaseConnection: java.lang.Object MORE_THAN_ONE> = $r0 in <com.j256.ormlite.support.DatabaseConnection: void <clinit>()> ==> <com.j256.ormlite.support.DatabaseConnection: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r2, $r0, "SELECT * FROM ", $r4) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedQueryForId: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>(r2, r5, $r0, null) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)>
CLINIT edge: $r0 = new com.j256.ormlite.logger.Log$Level in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
CLINIT edge: <com.j256.ormlite.logger.Logger: int ARG_STRING_LENGTH> = $i0 in <com.j256.ormlite.logger.Logger: void <clinit>()> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
CLINIT edge: r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.BooleanType in <com.j256.ormlite.field.types.BooleanType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.BooleanType in <com.j256.ormlite.field.types.BooleanType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.BooleanObjectType in <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.StringBytesType in <com.j256.ormlite.field.types.StringBytesType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringBytesType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.DoubleObjectType in <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.FloatObjectType in <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.UuidType: int DEFAULT_WIDTH> = 48 in <com.j256.ormlite.field.types.UuidType: void <clinit>()> ==> <com.j256.ormlite.field.types.UuidType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.DateTimeType in <com.j256.ormlite.field.types.DateTimeType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
CLINIT edge: $r1 = newarray (java.lang.String)[1] in <com.j256.ormlite.field.types.DateTimeType: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.DateStringType: int DEFAULT_WIDTH> = 50 in <com.j256.ormlite.field.types.DateStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateStringType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.IntType in <com.j256.ormlite.field.types.IntType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.IntType in <com.j256.ormlite.field.types.IntType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.IntegerObjectType in <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.BigIntegerType: int DEFAULT_WIDTH> = 255 in <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.LongObjectType in <com.j256.ormlite.field.types.LongObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongObjectType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> = $r0 in <com.j256.ormlite.field.types.DateType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.SqlDateType in <com.j256.ormlite.field.types.SqlDateType: void <clinit>()> ==> <com.j256.ormlite.field.types.SqlDateType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.SqlDateType in <com.j256.ormlite.field.types.SqlDateType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.TimeStampType in <com.j256.ormlite.field.types.TimeStampType: void <clinit>()> ==> <com.j256.ormlite.field.types.TimeStampType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.TimeStampType in <com.j256.ormlite.field.types.TimeStampType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ByteType in <com.j256.ormlite.field.types.ByteType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ByteType in <com.j256.ormlite.field.types.ByteType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ByteObjectType in <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.DoubleType in <com.j256.ormlite.field.types.DoubleType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.DoubleType in <com.j256.ormlite.field.types.DoubleType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.LongStringType in <com.j256.ormlite.field.types.LongStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongStringType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.LongStringType in <com.j256.ormlite.field.types.LongStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.StringType: int DEFAULT_WIDTH> = 255 in <com.j256.ormlite.field.types.StringType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ShortType in <com.j256.ormlite.field.types.ShortType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ShortType in <com.j256.ormlite.field.types.ShortType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ShortObjectType in <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.LongType in <com.j256.ormlite.field.types.LongType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.LongType in <com.j256.ormlite.field.types.LongType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongObjectType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.BigDecimalStringType: int DEFAULT_WIDTH> = 255 in <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.ByteArrayType in <com.j256.ormlite.field.types.ByteArrayType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteArrayType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.DateLongType in <com.j256.ormlite.field.types.DateLongType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateLongType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.CharacterObjectType in <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.SerializableType in <com.j256.ormlite.field.types.SerializableType: void <clinit>()> ==> <com.j256.ormlite.field.types.SerializableType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.EnumIntegerType in <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.CharType in <com.j256.ormlite.field.types.CharType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.CharType in <com.j256.ormlite.field.types.CharType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.types.EnumStringType: int DEFAULT_WIDTH> = 100 in <com.j256.ormlite.field.types.EnumStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.FloatType in <com.j256.ormlite.field.types.FloatType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.FloatType in <com.j256.ormlite.field.types.FloatType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.field.types.BigDecimalNumericType in <com.j256.ormlite.field.types.BigDecimalNumericType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r2, r0, r3, r4) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r2, r0, r3, r4) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
CLINIT edge: r6 = newarray (com.j256.ormlite.field.FieldType)[i0] in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])>(r4, r1, $r2, i0, r6) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])>
STATIC edge: staticinvoke <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>(r4, $r2, "DELETE FROM ", $r5) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)>
CLINIT edge: $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r15, $r10) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i2) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i4) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r3 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r3 = <com.j256.ormlite.misc.TransactionManager: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.misc.TransactionManager: void <clinit>()>
CLINIT edge: $r0 = new com.j256.ormlite.logger.LoggerFactory$LogType in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)>(r20) in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)>
STATIC edge: r20 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.j256.ormlite.logger.file") in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: r16 = staticinvoke <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)>(r3) in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)>
CLINIT edge: r20 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("com.j256.ormlite.logger.file") in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <com.j256.ormlite.logger.LocalLog: java.util.List classLevels> = r16 in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
CLINIT edge: $r11 = <java.lang.System: java.io.PrintStream err> in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: <com.j256.ormlite.logger.LocalLog: com.j256.ormlite.logger.Log$Level DEFAULT_LEVEL> = $r0 in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/dao/RuntimeExceptionDao;") in <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.logger.Log$Level LOG_LEVEL> = $r0 in <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>
CLINIT edge: $r30 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType UNKNOWN> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r31 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r28 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BIG_DECIMAL> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r29 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r26 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType SERIALIZABLE> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r27 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r24 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DOUBLE> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r25 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r22 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType FLOAT> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r23 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r20 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r21 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r18 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType INTEGER> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r19 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r16 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType SHORT> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r17 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r14 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE_ARRAY> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r15 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r12 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r13 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r10 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType CHAR> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r11 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r8 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DATE> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r9 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BOOLEAN> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r7 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: $r4 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG_STRING> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: <com.j256.ormlite.db.BaseDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> = $r1 in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()>
CLINIT edge: <com.j256.ormlite.db.BaseDatabaseType: java.lang.String DEFAULT_SEQUENCE_SUFFIX> = "_id_seq" in <com.j256.ormlite.db.BaseDatabaseType: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()>
CLINIT edge: $r4 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BIG_DECIMAL> in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.db.BaseSqliteDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()>
CLINIT edge: <com.j256.ormlite.db.BaseSqliteDatabaseType$1: int[] $SwitchMap$com$j256$ormlite$field$SqlType> = $r1 in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()>
CLINIT edge: <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter booleanConverter> = $r0 in <com.j256.ormlite.db.BaseSqliteDatabaseType: void <clinit>()> ==> <com.j256.ormlite.db.BaseSqliteDatabaseType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter booleanConverter> = $r0 in <com.j256.ormlite.db.BaseSqliteDatabaseType: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType: void <clinit>()>
CLINIT edge: $r26 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType valueOf(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $z37 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z38 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z39 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z40 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z41 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: r43 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $z42 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z43 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z44 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z45 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z46 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z47 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r3) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
STATIC edge: $z49 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z50 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z51 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z52 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $z53 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: boolean parseBoolean(java.lang.String)>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: $r26 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType valueOf(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType valueOf(java.lang.String)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z37 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z38 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z39 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z40 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z41 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z42 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z43 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z44 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z45 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z46 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z47 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z49 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z50 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z51 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z52 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $z53 = staticinvoke <java.lang.Boolean: boolean parseBoolean(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.j256.ormlite.field.DatabaseFieldConfigLoader: java.lang.Class DEFAULT_PERSISTER_CLASS> = class "Lcom/j256/ormlite/field/types/VoidType;" in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType UNKNOWN> in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>("/com/j256/ormlite/core/VERSION.txt") in <com.j256.ormlite.misc.VersionUtils: java.lang.String readCoreVersion()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>("/com/j256/ormlite/jdbc/VERSION.txt") in <com.j256.ormlite.misc.VersionUtils: java.lang.String readJdbcVersion()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>("/com/j256/ormlite/android/VERSION.txt") in <com.j256.ormlite.misc.VersionUtils: java.lang.String readAndroidVersion()> ==> <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)>
STATIC edge: r9 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: r8 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
STATIC edge: r8 = staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)>
STATIC edge: $r6 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>("Could not read next field from config file", $r5) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
CLINIT edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>(r0, r12, $r13) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>(r0, r12, $r13) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.DatabaseFieldConfigLoader: void write(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)>
CLINIT edge: <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.table.TableUtils: void <clinit>()> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/table/TableUtils;") in <com.j256.ormlite.table.TableUtils: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: $r1 = newarray (com.j256.ormlite.field.FieldType)[0] in <com.j256.ormlite.table.TableUtils: void <clinit>()> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r6, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r6, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.DaoManager: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>
STATIC edge: r2 = staticinvoke <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
CLINIT edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r3, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r3 = new com.j256.ormlite.table.TableInfo in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <clinit>()>
CLINIT edge: $i1 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)>(r0, $r7, z1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)>($r5, r6, $r0, $r2, z0) in <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)>($r5, r6, $r0, $r2, z0) in <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)>
CLINIT edge: $r1 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)>(r7, "drop", $r3, z0, $z1, 0) in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)>(r5, r0, $r3) in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)>(r5, r0, $r3) in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)>
CLINIT edge: $r7 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r10 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType EXECUTE> in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: <com.j256.ormlite.stmt.mapped.BaseMappedStatement: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <clinit>()> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;") in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: $r16 = <java.lang.System: java.io.PrintStream err> in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.System: void <clinit>()>
STATIC edge: r13 = staticinvoke <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>($r12) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>
STATIC edge: r10 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r9) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: $r23 = <java.lang.System: java.io.PrintStream err> in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r13 = staticinvoke <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level valueOf(java.lang.String)>($r12) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r7 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r14 = staticinvoke <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()>
STATIC edge: $r2 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/misc/VersionUtils;") in <com.j256.ormlite.misc.VersionUtils: com.j256.ormlite.logger.Logger getLogger()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
CLINIT edge: $r3 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)>(r9, r1, $r7) in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)>
STATIC edge: i2 = staticinvoke <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)>(r9, "create", $r5, 0, $z1, $z2) in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)>(r1, r2, $r5, $r7, z0) in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)>
CLINIT edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)>(r3, r4, r13, z0, 0) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)>(r3, r4, r13, z0, 1) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)>
STATIC edge: staticinvoke <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)>(r3, r4, r13, z0, 0) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)>
CLINIT edge: $r6 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType EXECUTE> in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
STATIC edge: $r33 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r32, $r27) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r34 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.field.FieldType[] noFieldTypes> in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r15, $r11) in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.field.FieldType[] noFieldTypes> in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
CLINIT edge: $r6 = <com.j256.ormlite.table.TableUtils: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.table.TableUtils: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r34.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connectionSource was never set on ") in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r29 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r38 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r37) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r33.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r39) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("connectionSource is getting a null DatabaseType in ") in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r31 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r30) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r26.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r32) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>($r25, r0, $r24) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>($r6) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>($r10, r0, $r9) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke $r11.<com.j256.ormlite.stmt.StatementExecutor: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r13, $r12, r0) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.stmt.StatementExecutor: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i0 = virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: int size()>
VIRTUAL edge: virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void addDao(com.j256.ormlite.dao.BaseDaoImpl)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void addDao(com.j256.ormlite.dao.BaseDaoImpl)>
VIRTUAL edge: virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void addDao(com.j256.ormlite.dao.BaseDaoImpl)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void addDao(com.j256.ormlite.dao.BaseDaoImpl)>
VIRTUAL edge: $i1 = virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: int size()>
VIRTUAL edge: r17 = virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: com.j256.ormlite.dao.BaseDaoImpl get(int)>(i3) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: com.j256.ormlite.dao.BaseDaoImpl get(int)>
VIRTUAL edge: virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void clear()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void clear()>
VIRTUAL edge: virtualinvoke r16.<com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void clear()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl$DaoConfigArray: void clear()>
VIRTUAL edge: $r19 = virtualinvoke r17.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: $r22 = virtualinvoke r17.<com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
VIRTUAL edge: r44 = virtualinvoke $r19.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: virtualinvoke r20.<com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>($r21, $r22) in <com.j256.ormlite.dao.BaseDaoImpl: void initialize()> ==> <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForId(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>(r2, r3, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForAll()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.j256.ormlite.stmt.StatementExecutor: java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache)>($r2, $r1) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForAll()> ==> <com.j256.ormlite.stmt.StatementExecutor: java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.Where where()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>(r3, r4) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.Where: java.util.List query()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: java.util.List query()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r3, $r2, r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()> ==> <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.UpdateBuilder updateBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.UpdateBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r3, $r2, r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.UpdateBuilder updateBuilder()> ==> <com.j256.ormlite.stmt.UpdateBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.DeleteBuilder deleteBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.DeleteBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r3, $r2, r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.DeleteBuilder deleteBuilder()> ==> <com.j256.ormlite.stmt.DeleteBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>($r3, r1, $r2) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)>(r1, 0) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)>
CLINIT edge: $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)>(r1, 1) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)>(r1, 0) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)>
CLINIT edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.List emptyList()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.Collections: java.util.List emptyList()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)>(r1, 1) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValuesArgs(java.util.Map)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>(r1) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForId(java.lang.Object)>(r2) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForId(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r10, r1, $r3) in <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object createIfNotExists(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object createIfNotExists(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>(0, 0, 0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: boolean idExists(java.lang.Object)>(r2) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean idExists(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
VIRTUAL edge: i1 = virtualinvoke r1.<com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>(1, 0, i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>(0, 1, i1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r3, r1, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int updateId(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r6.<com.j256.ormlite.stmt.StatementExecutor: int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r3, r1, r4, $r5) in <com.j256.ormlite.dao.BaseDaoImpl: int updateId(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate)>(r2, r3) in <com.j256.ormlite.dao.BaseDaoImpl: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r10, r1, $r3) in <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r3, r1, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteById(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r3, r1, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: int deleteById(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int deleteObjects(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>(r3, r1, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)> ==> <com.j256.ormlite.stmt.StatementExecutor: int deleteObjects(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean isEmpty()>() in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int deleteIds(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>(r3, r1, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.stmt.StatementExecutor: int deleteIds(com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete)>(r2, r3) in <com.j256.ormlite.dao.BaseDaoImpl: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)>(-1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)>(-1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)>(i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.dao.BaseDaoImpl$2: void <init>(com.j256.ormlite.dao.BaseDaoImpl)>(r0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.BaseDaoImpl$2: void <init>(com.j256.ormlite.dao.BaseDaoImpl)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.dao.BaseDaoImpl$3: void <init>(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery)>(r0, r3) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl$3: void <init>(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseDaoImpl: void closeLastIterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseDaoImpl: void closeLastIterator()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)>(r1, -1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)>(r1, i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)>
STATIC edge: $r11 = staticinvoke <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>($r10, $r5) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)>($r4, r1, r2, $r3) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)>($r5, r1, r2, r3, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)>($r5, r1, r2, r3, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])>(r2, r3, r4) in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run raw execute statement ") in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])>(r2, r3, r4) in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run raw update statement ") in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)>(r2, z0, r4) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.String objectToString(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)>(r1) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.String objectToString(java.lang.Object)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r5 = virtualinvoke r3.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r4) in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: r7 = virtualinvoke r3.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r6) in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke r3.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>
INTERFACE edge: $z0 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean dataIsEqual(java.lang.Object,java.lang.Object)>(r5, r7) in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.types.ByteArrayType: boolean dataIsEqual(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean dataIsEqual(java.lang.Object,java.lang.Object)>(r5, r7) in <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ") in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have an id field") in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>($r11) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: boolean isUpdatable()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean isUpdatable()> ==> <com.j256.ormlite.table.TableInfo: boolean isUpdatable()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean isTableExists()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.dao.BaseDaoImpl: boolean isTableExists()> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: long countOf()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: l0 = virtualinvoke $r3.<com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)>(r2) in <com.j256.ormlite.dao.BaseDaoImpl: long countOf()> ==> <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.j256.ormlite.stmt.PreparedQuery: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>() in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Prepared query is not of type ") in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11) in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", did you call QueryBuilder.setCountOf(true)?") in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: l0 = virtualinvoke $r6.<com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt)>(r5, r1) in <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r10 = virtualinvoke r9.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: $r11 = virtualinvoke r9.<com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)>(null, null, 1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r6) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find a field named ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ") in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have an id field to enable the object cache") in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.sql.SQLException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <java.lang.Object: java.lang.Class getClass()>
INTERFACE edge: interfaceinvoke $r12.<com.j256.ormlite.dao.ObjectCache: void registerClass(java.lang.Class)>($r11) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r12.<com.j256.ormlite.dao.ObjectCache: void registerClass(java.lang.Class)>($r11) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void registerClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r17.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r16) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r17.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r16) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r13) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r13) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Class ") in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have an id field to enable the object cache") in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>($r11) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.dao.ObjectCache: void registerClass(java.lang.Class)>($r3) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.dao.ObjectCache: void registerClass(java.lang.Class)>($r3) in <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void registerClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: void clearObjectCache()> ==> <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.dao.ObjectCache: void clear(java.lang.Class)>($r2) in <com.j256.ormlite.dao.BaseDaoImpl: void clearObjectCache()> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()>() in <com.j256.ormlite.dao.BaseDaoImpl: void clearAllInternalObjectCaches()> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r3) in <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()>
VIRTUAL edge: z0 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)>(r2, r3) in <com.j256.ormlite.dao.BaseDaoImpl: boolean idExists(java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)>(r2, z0) in <com.j256.ormlite.dao.BaseDaoImpl: void setAutoCommit(boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)>
VIRTUAL edge: z0 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)>(r2) in <com.j256.ormlite.dao.BaseDaoImpl: boolean isAutoCommit()> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.StatementExecutor: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
INTERFACE edge: r3 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, $r2) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
INTERFACE edge: $r9 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedStmt: java.lang.String getStatement()>() in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: java.lang.String getStatement()>
INTERFACE edge: r13 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedStmt: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r5) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r7 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedStmt: java.lang.String getStatement()>() in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: java.lang.String getStatement()>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("query-for-first of \'{}\' returned at least 1 result", $r9) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("query-for-first of \'{}\' returned at 0 results", $r7) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object queryForFirst(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>(r1, $r3, r2) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List queryForAll(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT COUNT(*) FROM ") in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("query of \'{}\' returned {}", $r5, $r6) in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: r3 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, $r2) in <com.j256.ormlite.stmt.StatementExecutor: long queryForCountStar(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedStmt)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
VIRTUAL edge: r4 = virtualinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>(null, r1, r2, r3, -1) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r5.<java.util.List: int size()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $z0 = virtualinvoke r4.<com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>
VIRTUAL edge: $r11 = virtualinvoke r4.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>
VIRTUAL edge: virtualinvoke r4.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: virtualinvoke r4.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: $r8 = interfaceinvoke r2.<com.j256.ormlite.stmt.PreparedStmt: java.lang.String getStatement()>() in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: java.lang.String getStatement()>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("query of \'{}\' returned {} results", $r8, $r9) in <com.j256.ormlite.stmt.StatementExecutor: java.util.List query(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>() in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>(r1, r2, $r4, r3, i0) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>() in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()> ==> <com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.RawRowMapperImpl: void <init>(com.j256.ormlite.table.TableInfo)>($r4) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()> ==> <com.j256.ormlite.stmt.RawRowMapperImpl: void <init>(com.j256.ormlite.table.TableInfo)>
INTERFACE edge: r15 = interfaceinvoke r1.<com.j256.ormlite.stmt.PreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)>(r14, $r2, i0) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)>
INTERFACE edge: $r8 = interfaceinvoke r1.<com.j256.ormlite.stmt.PreparedStmt: java.lang.String getStatement()>() in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: java.lang.String getStatement()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)>($r6, r7, r1, r0, r14, r15, $r8, r9) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)> ==> <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("executing raw query for: {}", r0) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("query arguments: {}", r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>(r16, r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>
SPECIAL edge: r7 = specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>(r16) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>(r3, r15, r0, class "[Ljava/lang/String;", r16, r7, r6, r9) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: r1 = newarray (java.lang.String)[i0] in <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("executing raw query for: {}", r0) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r14.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("query arguments: {}", r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>(r18, r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>
SPECIAL edge: r7 = specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>(r18) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>
SPECIAL edge: specialinvoke $r9.<com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: void <init>(com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper)>(r10, r7, r6) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: void <init>(com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper)>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>(r3, r17, r0, class "[Ljava/lang/String;", r18, r7, $r9, r11) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("executing raw query for: {}", r0) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r14.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("query arguments: {}", r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>(r18, r2) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>
SPECIAL edge: r7 = specialinvoke r6.<com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>(r18) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] extractColumnNames(com.j256.ormlite.support.CompiledStatement)>
SPECIAL edge: specialinvoke $r9.<com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: void <init>(com.j256.ormlite.field.DataType[])>(r10) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: void <init>(com.j256.ormlite.field.DataType[])>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>(r3, r17, r0, class "[Ljava/lang/Object;", r18, r7, $r9, r11) in <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.dao.GenericRawResults queryRaw(com.j256.ormlite.support.ConnectionSource,java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("running raw update statement: {}", r0) in <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("update arguments: {}", r2) in <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r7.<com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>(r6, r2) in <com.j256.ormlite.stmt.StatementExecutor: int updateRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("running raw execute statement: {}", r0) in <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("execute arguments: {}", r2) in <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r7.<com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>(r6, r2) in <com.j256.ormlite.stmt.StatementExecutor: int executeRaw(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.stmt.StatementExecutor: void assignStatementArguments(com.j256.ormlite.support.CompiledStatement,java.lang.String[])>
VIRTUAL edge: $i0 = virtualinvoke $r6.<com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>($r5, r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: int create(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4, r5) in <com.j256.ormlite.stmt.StatementExecutor: int updateId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
INTERFACE edge: r3 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedUpdate: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, $r2) in <com.j256.ormlite.stmt.StatementExecutor: int update(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: int refresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r2, r3, r4) in <com.j256.ormlite.stmt.StatementExecutor: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
INTERFACE edge: r3 = interfaceinvoke r0.<com.j256.ormlite.stmt.PreparedDelete: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, $r2) in <com.j256.ormlite.stmt.StatementExecutor: int delete(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("disabled auto-commit on table {} before batch tasks", $r9) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("re-enabled auto-commit on table {} after batch tasks", $r6) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r15.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("re-enabled auto-commit on table {} after batch tasks", $r16) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object callBatchTasks(com.j256.ormlite.support.DatabaseConnection,boolean,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r13, $r12, $r11) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: virtualinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[])>($r14) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[])>
VIRTUAL edge: $r16 = virtualinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.Where where()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()>
VIRTUAL edge: $r22 = virtualinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: java.lang.String prepareStatementString()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementBuilder: java.lang.String prepareStatementString()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r20.<com.j256.ormlite.stmt.SelectArg: void <init>()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void <init>()>
VIRTUAL edge: virtualinvoke $r16.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>($r19, $r20) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("query of \'{}\' returned {}", $r8, $r9) in <com.j256.ormlite.stmt.StatementExecutor: boolean ifExists(com.j256.ormlite.support.DatabaseConnection,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.String[] mapRow(com.j256.ormlite.support.DatabaseResults)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,java.util.List)>(r1, $r2, r3) in <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.util.List)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataClass was never set on ") in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11) in <com.j256.ormlite.table.DatabaseTableConfig: void initialize()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: $r6 = specialinvoke r0.<com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)>(r3, $r5, $r4) in <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)> ==> <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)>
CLINIT edge: $r27 = new com.j256.ormlite.field.FieldType in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
CLINIT edge: $r4 = newarray (com.j256.ormlite.field.FieldType)[$i0] in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.sql.SQLException: void <init>(java.lang.String)>("Field types have not been extracted in table config") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] getFieldTypes(com.j256.ormlite.db.DatabaseType)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r5.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.String: java.lang.String toUpperCase()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,com.j256.ormlite.field.FieldType[])>(r0, r5, $r4) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.table.DatabaseTableConfig fromClass(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/j256/ormlite/table/DatabaseTable;") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)> ==> <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)> ==> <java.lang.String: int length()>
VIRTUAL edge: r6 = virtualinvoke $r3.<java.lang.String: java.lang.String toLowerCase()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String extractTableName(java.lang.Class)> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Class: java.lang.Class getEnclosingClass()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.Class: java.lang.Class getEnclosingClass()>
SPECIAL edge: specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t lookup declared constructors for ") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r25.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r29, $r24) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r16 = virtualinvoke r15.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $z0 = virtualinvoke r15.<java.lang.reflect.Constructor: boolean isAccessible()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.reflect.AccessibleObject: boolean isAccessible()>
VIRTUAL edge: virtualinvoke r15.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.reflect.Constructor: void setAccessible(boolean)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open access to constructor for ") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find a no-arg constructor for ") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t find a no-arg constructor for ") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Missing static on inner class?") in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r9) in <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor findNoArgConstructor(java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>($r2, r3, $r5) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] getFieldTypes(com.j256.ormlite.db.DatabaseType)>(r5) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] getFieldTypes(com.j256.ormlite.db.DatabaseType)>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor getConstructor()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.reflect.Constructor getConstructor()>
VIRTUAL edge: $z1 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isId()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isId()>
VIRTUAL edge: $z4 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: $z5 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>
VIRTUAL edge: $z2 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>
VIRTUAL edge: $z3 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("More than 1 idField configured for class ") in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r22) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r24) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String)>($r21) in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r27.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r27.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r28, r32) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r28 = virtualinvoke r32.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke r35.<com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>
VIRTUAL edge: $r17 = virtualinvoke r35.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: $r23 = virtualinvoke r35.<com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You should use columnName \'") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for table ") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of fieldName \'") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown column name \'") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in table ") in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r11 = virtualinvoke r9.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: $r14 = virtualinvoke r9.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not generate toString of field ") in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r9) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r22, $r16) in <com.j256.ormlite.table.TableInfo: java.lang.String objectToString(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: r12 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r1) in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
VIRTUAL edge: $r8 = virtualinvoke r0.<java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>() in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.reflect.Constructor: java.lang.Class getDeclaringClass()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not create object for ") in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableInfo: java.lang.Object createObject(java.lang.reflect.Constructor,com.j256.ormlite.dao.Dao)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableInfo: boolean hasColumnName(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r4) in <com.j256.ormlite.table.TableInfo: boolean hasColumnName(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)>(1) in <com.j256.ormlite.dao.ReferenceObjectCache: com.j256.ormlite.dao.ReferenceObjectCache makeWeakCache()> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)>(0) in <com.j256.ormlite.dao.ReferenceObjectCache: com.j256.ormlite.dao.ReferenceObjectCache makeSoftCache()> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void <init>(boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: void registerClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void registerClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) in <com.j256.ormlite.dao.ReferenceObjectCache: void registerClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.ref.Reference: java.lang.Object get()>() in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
SPECIAL edge: specialinvoke $r7.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r5) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r7) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r4) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r5) in <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.lang.ref.SoftReference: void <init>(java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clear(java.lang.Class)> ==> <java.util.HashMap: void clear()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void clearAll()> ==> <java.util.HashMap: void clear()>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r5) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r5) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r5) in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r8 = virtualinvoke r5.<java.lang.ref.Reference: java.lang.Object get()>() in <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: int size(java.lang.Class)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int size(java.lang.Class)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int size(java.lang.Class)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int size(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.ReferenceObjectCache: int sizeAll()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferences(java.lang.Class)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)>(r2) in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferences(java.lang.Class)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)>(r5) in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanNullReferencesAll()> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, r2, r3, $r4) in <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>($r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>
CLINIT edge: r8 = newarray (com.j256.ormlite.field.FieldType)[$i1] in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.String[])> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)>(r4) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.String[])> ==> <com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.BaseDaoImpl$2: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <java.sql.SQLException: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.BaseDaoImpl$3: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.stmt.RawResultsImpl: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.BaseDaoImpl$4: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.BaseDaoImpl$5: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)>(r5) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectColumns(java.lang.Iterable)> ==> <com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[])> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder selectRaw(java.lang.String[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t groupBy foreign colletion field: ") in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder groupBy(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t orderBy foreign colletion field: ") in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.stmt.query.OrderBy: void <init>(java.lang.String,boolean)>(r1, z1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <com.j256.ormlite.stmt.query.OrderBy: void <init>(java.lang.String,boolean)>
INTERFACE edge: interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r4) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder limit(java.lang.Long)>($r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder limit(int)> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder limit(java.lang.Long)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(java.lang.Long)>($r1) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(int)> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(java.lang.Long)>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>("Offset is not supported by this database") in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder offset(java.lang.Long)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>() in <com.j256.ormlite.stmt.QueryBuilder: java.util.List query()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>($r2) in <com.j256.ormlite.stmt.QueryBuilder: java.util.List query()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>() in <com.j256.ormlite.stmt.QueryBuilder: java.lang.Object queryForFirst()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)>($r2) in <com.j256.ormlite.stmt.QueryBuilder: java.lang.Object queryForFirst()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: java.lang.String prepareStatementString()>() in <com.j256.ormlite.stmt.QueryBuilder: java.lang.String[] queryRawFirst()> ==> <com.j256.ormlite.stmt.StatementBuilder: java.lang.String prepareStatementString()>
INTERFACE edge: $r4 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])>($r2, $r3) in <com.j256.ormlite.stmt.QueryBuilder: java.lang.String[] queryRawFirst()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.j256.ormlite.dao.GenericRawResults: java.lang.Object getFirstResult()>() in <com.j256.ormlite.stmt.QueryBuilder: java.lang.String[] queryRawFirst()> ==> <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>() in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>($r2) in <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void clear()>() in <com.j256.ormlite.stmt.QueryBuilder: void clear()> ==> <com.j256.ormlite.stmt.StatementBuilder: void clear()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, r2, r3, $r4) in <com.j256.ormlite.stmt.UpdateBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>(null) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.PreparedUpdate prepare()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)>(r1, $r3) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t update foreign colletion field: ") in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>($r9) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.query.SetValue: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r2, r4) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnValue(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetValue: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)>(r1, $r3) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Can\'t update foreign colletion field: ") in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>($r9) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.query.SetExpression: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2, r4) in <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.StatementBuilder updateColumnExpression(java.lang.String,java.lang.String)> ==> <com.j256.ormlite.stmt.query.SetExpression: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int length()>() in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeColumnName(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i1) in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeColumnName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeColumnName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.String: int length()>() in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeValue(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>($i1) in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeValue(java.lang.String)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.UpdateBuilder: java.lang.String escapeValue(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.PreparedUpdate prepare()>() in <com.j256.ormlite.stmt.UpdateBuilder: int update()> ==> <com.j256.ormlite.stmt.UpdateBuilder: com.j256.ormlite.stmt.PreparedUpdate prepare()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: int update(com.j256.ormlite.stmt.PreparedUpdate)>($r2) in <com.j256.ormlite.stmt.UpdateBuilder: int update()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(com.j256.ormlite.stmt.PreparedUpdate)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void clear()>() in <com.j256.ormlite.stmt.UpdateBuilder: void clear()> ==> <com.j256.ormlite.stmt.StatementBuilder: void clear()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>(r1, r2, r3, $r4) in <com.j256.ormlite.stmt.DeleteBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>(null) in <com.j256.ormlite.stmt.DeleteBuilder: com.j256.ormlite.stmt.PreparedDelete prepare()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.DeleteBuilder: com.j256.ormlite.stmt.PreparedDelete prepare()>() in <com.j256.ormlite.stmt.DeleteBuilder: int delete()> ==> <com.j256.ormlite.stmt.DeleteBuilder: com.j256.ormlite.stmt.PreparedDelete prepare()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: int delete(com.j256.ormlite.stmt.PreparedDelete)>($r2) in <com.j256.ormlite.stmt.DeleteBuilder: int delete()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(com.j256.ormlite.stmt.PreparedDelete)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void clear()>() in <com.j256.ormlite.stmt.DeleteBuilder: void clear()> ==> <com.j256.ormlite.stmt.StatementBuilder: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.Dao$CreateOrUpdateStatus: void <init>(boolean,boolean,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)>(r3, r212) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)>
VIRTUAL edge: virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: void postProcess()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void postProcess()>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: r211 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>
VIRTUAL edge: r212 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: r219 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>
VIRTUAL edge: $z1 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z22 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: $z23 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
VIRTUAL edge: $z24 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
VIRTUAL edge: $r223 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>
VIRTUAL edge: $r13 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>
VIRTUAL edge: $z3 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isId()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isId()>
VIRTUAL edge: $z20 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>
VIRTUAL edge: $r82 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: $z4 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>
VIRTUAL edge: $r68 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: $r14 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: r224 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: $z16 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z17 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: $z5 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUseGetSet()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUseGetSet()>
VIRTUAL edge: $z30 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $z15 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>
VIRTUAL edge: $z7 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: $z14 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z8 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>
VIRTUAL edge: $z13 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $r15 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>
VIRTUAL edge: $z12 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z9 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>
VIRTUAL edge: $i0 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>
VIRTUAL edge: $z10 = virtualinvoke r5.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: r6 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: r220 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r86 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r153 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: r221 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
VIRTUAL edge: $r145 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r138 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r130 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r121 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r79 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r73 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r64 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $z6 = virtualinvoke r4.<java.lang.reflect.Field: boolean isAccessible()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.AccessibleObject: boolean isAccessible()>
VIRTUAL edge: $r181 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r54 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r47 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r40 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r33 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r26 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r19 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: r213 = virtualinvoke r211.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("getSingleton", $r170) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r226.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r206 = virtualinvoke $r226.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find getSingleton static method on class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r207 = virtualinvoke $r206.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r211) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r208 = virtualinvoke $r207.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r215 = virtualinvoke r213.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(null, $r171) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r227.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r199 = virtualinvoke $r227.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run getSingleton method on class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r200 = virtualinvoke $r199.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r211) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r201 = virtualinvoke $r200.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r202 = virtualinvoke $r272.<java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.InvocationTargetException: java.lang.Throwable getTargetException()>
SPECIAL edge: specialinvoke $r228.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r193 = virtualinvoke $r228.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not run getSingleton method on class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r194 = virtualinvoke $r193.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r211) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r195 = virtualinvoke $r194.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r229.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r174 = virtualinvoke $r229.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Static getSingleton method should not return null on class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r175 = virtualinvoke $r174.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r211) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r176 = virtualinvoke $r175.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r230.<java.sql.SQLException: void <init>(java.lang.String)>($r176) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r231.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r187 = virtualinvoke $r231.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not cast result of static getSingleton method to DataPersister from class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r188 = virtualinvoke $r187.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r211) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r189 = virtualinvoke $r188.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $z0 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z0 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDateType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z0 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.VoidType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z0 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.SerializableType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z0 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r4) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseEnumType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BooleanType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.IntType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.ByteType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.DoubleType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.LongType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.ShortType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.CharType: boolean isPrimitive()>
INTERFACE edge: $z21 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.FloatType: boolean isPrimitive()>
INTERFACE edge: $z11 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isValidForVersion()>
INTERFACE edge: $z11 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDateType: boolean isValidForVersion()>
INTERFACE edge: $z11 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.IntegerObjectType: boolean isValidForVersion()>
INTERFACE edge: $z11 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.LongObjectType: boolean isValidForVersion()>
INTERFACE edge: $z11 = interfaceinvoke r212.<com.j256.ormlite.field.DataPersister: boolean isValidForVersion()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <com.j256.ormlite.field.types.ShortObjectType: boolean isValidForVersion()>
SPECIAL edge: specialinvoke $r232.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r163 = virtualinvoke $r232.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r164 = virtualinvoke $r163.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r165 = virtualinvoke $r164.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r166 = virtualinvoke $r165.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r167 = virtualinvoke $r166.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not valid for data persister ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r168 = virtualinvoke $r167.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r212) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r169 = virtualinvoke $r168.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r233.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r169) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r234.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r101 = virtualinvoke $r234.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r102 = virtualinvoke $r101.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r103 = virtualinvoke $r102.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a primitive class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r104 = virtualinvoke $r103.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r105 = virtualinvoke $r104.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but marked as foreign") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r106 = virtualinvoke $r105.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r235.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r106) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r236.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r97 = virtualinvoke $r236.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r220) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r98 = virtualinvoke $r97.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_id") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r220 = virtualinvoke $r98.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r237.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r237.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r220) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r219) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r220 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke $r12.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r238.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r85 = virtualinvoke $r238.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r87 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r86) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r88 = virtualinvoke $r87.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r89 = virtualinvoke $r88.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r90 = virtualinvoke $r89.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' should use the @") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r93 = virtualinvoke $r90.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r92) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" annotation not foreign=true") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r239.<java.sql.SQLException: void <init>(java.lang.String)>($r95) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $z28 = virtualinvoke $r149.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r240.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r152 = virtualinvoke $r240.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r154 = virtualinvoke $r152.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r153) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r155 = virtualinvoke $r154.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be of class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r157 = virtualinvoke $r156.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r158 = virtualinvoke $r155.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r157) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r159 = virtualinvoke $r158.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or Collection.") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r160 = virtualinvoke $r159.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r241.<java.sql.SQLException: void <init>(java.lang.String)>($r160) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r242.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r144 = virtualinvoke $r242.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r146 = virtualinvoke $r144.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r145) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r147 = virtualinvoke $r146.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be a parameterized Collection.") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r148 = virtualinvoke $r147.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r243.<java.sql.SQLException: void <init>(java.lang.String)>($r148) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r244.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r137 = virtualinvoke $r244.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r139 = virtualinvoke $r137.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r138) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r140 = virtualinvoke $r139.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be a parameterized Collection with at least 1 type.") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r141 = virtualinvoke $r140.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r245.<java.sql.SQLException: void <init>(java.lang.String)>($r141) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $z25 = virtualinvoke $r107.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r246.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r127 = virtualinvoke $r246.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ORMLite can\'t store unknown class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r129 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r131 = virtualinvoke $r129.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r130) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r132 = virtualinvoke $r131.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. byte[] fields must specify dataType=DataType.BYTE_ARRAY or SERIALIZABLE") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r133 = virtualinvoke $r132.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r247.<java.sql.SQLException: void <init>(java.lang.String)>($r133) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $z26 = virtualinvoke $r108.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r248.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r118 = virtualinvoke $r248.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ORMLite can\'t store unknown class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r119 = virtualinvoke $r118.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r120 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \'") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r122 = virtualinvoke $r120.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r121) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r123 = virtualinvoke $r122.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Serializable fields must specify dataType=DataType.SERIALIZABLE") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r124 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r249.<java.sql.SQLException: void <init>(java.lang.String)>($r124) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r250.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r111 = virtualinvoke $r250.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ORMLite does not know how to store field class ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r112 = virtualinvoke $r111.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r113 = virtualinvoke $r112.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r114 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r115 = virtualinvoke $r114.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r251.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r115) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r252.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r78 = virtualinvoke $r252.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must specify one of id, generatedId, and generatedIdSequence with ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r80 = virtualinvoke $r78.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r79) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r253.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r81) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r254.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r72 = virtualinvoke $r254.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Must specify one of id, generatedId, and generatedIdSequence with ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r74 = virtualinvoke $r72.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r73) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r75 = virtualinvoke $r74.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r255.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r75) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r224 = virtualinvoke r224.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.String: java.lang.String toUpperCase()>
SPECIAL edge: specialinvoke $r256.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r63 = virtualinvoke $r256.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Id field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r65 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" cannot also be a foreign object") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r257.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r67) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r58.<java.lang.reflect.Field: void setAccessible(boolean)>(1) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.reflect.Field: void setAccessible(boolean)>
SPECIAL edge: specialinvoke $r258.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r180 = virtualinvoke $r258.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not open access to field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r182 = virtualinvoke $r180.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r181) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r183 = virtualinvoke $r182.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  You may have to set useGetSet=true to fix.") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r184 = virtualinvoke $r183.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r259.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r184) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r260.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r53 = virtualinvoke $r260.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r55 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r54) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a generated-id if allowGeneratedIdInsert = true") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r261.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r57) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r262.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r46 = virtualinvoke $r262.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r47) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have foreign = true if foreignAutoRefresh = true") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r263.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r50) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r264.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r39 = virtualinvoke $r264.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r41 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have foreign = true if foreignAutoCreate = true") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r265.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r43) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r266.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r32 = virtualinvoke $r266.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have foreign = true if foreignColumnName is set") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r267.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r36) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r268.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r268.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not a valid type to be a version field") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r269.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r29) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r270.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r270.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" has maxForeignAutoRefreshLevel set but not foreignAutoRefresh is false") in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r271.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r22) in <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
CLINIT edge: r52 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DataType: void <clinit>()>
STATIC edge: r52 = staticinvoke <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataType[] values()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: r97 = virtualinvoke $r8.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>
VIRTUAL edge: r99 = virtualinvoke $r28.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: virtualinvoke r97.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>(r3) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
VIRTUAL edge: r99 = virtualinvoke $r10.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: r100 = virtualinvoke r99.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: r100 = virtualinvoke r99.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>(r6) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>
VIRTUAL edge: r103 = virtualinvoke r99.<com.j256.ormlite.table.TableInfo: java.lang.reflect.Constructor getConstructor()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: java.lang.reflect.Constructor getConstructor()>
SPECIAL edge: specialinvoke $r113.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r113.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign field ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have id field") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r114.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r26) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r115.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r115.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign field ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have field named \'") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r116.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r29.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.BooleanType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.IntType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.ByteType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.DoubleType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.LongType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.ShortType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.CharType: boolean isPrimitive()>
INTERFACE edge: $z7 = interfaceinvoke $r88.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.types.FloatType: boolean isPrimitive()>
SPECIAL edge: specialinvoke $r117.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r91 = virtualinvoke $r117.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r93 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is a primitive class ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r95 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but marked as foreign") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r118.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r96) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r105 = virtualinvoke $r69.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>
VIRTUAL edge: virtualinvoke r105.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>(r3) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
VIRTUAL edge: r106 = virtualinvoke $r70.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: r100 = virtualinvoke r106.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: r103 = virtualinvoke r106.<com.j256.ormlite.table.TableInfo: java.lang.reflect.Constructor getConstructor()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: java.lang.reflect.Constructor getConstructor()>
SPECIAL edge: specialinvoke $r119.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r84 = virtualinvoke $r119.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign field ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r85 = virtualinvoke $r84.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not have id field") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r120.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r87) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>
SPECIAL edge: r104 = specialinvoke r0.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)>(r34, r37, $r38) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)>(r4, $r12) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)>
VIRTUAL edge: $z6 = virtualinvoke r100.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
SPECIAL edge: specialinvoke $r121.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r73 = virtualinvoke $r121.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r75 = virtualinvoke $r74.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r77 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", if foreignAutoCreate = true then class ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r78 = virtualinvoke r2.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r79 = virtualinvoke $r77.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r78) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r80 = virtualinvoke $r79.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must have id field with generatedId = true") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r81 = virtualinvoke $r80.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r122.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r81) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r30.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
VIRTUAL edge: $z4 = virtualinvoke $r55.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r2) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r123.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r58 = virtualinvoke $r123.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be of class ") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r65 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r64) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" or Collection.") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r124.<java.sql.SQLException: void <init>(java.lang.String)>($r67) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: r107 = virtualinvoke $r31.<java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.reflect.Type getGenericType()>
SPECIAL edge: specialinvoke $r125.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r49 = virtualinvoke $r125.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r52 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r51) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be a parameterized Collection.") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r126.<java.sql.SQLException: void <init>(java.lang.String)>($r54) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r127.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r41 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field class for \'") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r44 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r43) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' must be a parameterized Collection with at least 1 type.") in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r128.<java.sql.SQLException: void <init>(java.lang.String)>($r46) in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: r36 = virtualinvoke $r35.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.table.DatabaseTableConfig getForeignTableConfig()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.FieldType: void configDaoInformation(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: java.lang.String getFieldName()> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Class getType()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.field.FieldConverter: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: com.j256.ormlite.field.SqlType getSqlType()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.field.FieldConverter: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()> ==> <com.j256.ormlite.field.types.BaseDataType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>() in <com.j256.ormlite.field.FieldType: int getWidth()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>() in <com.j256.ormlite.field.FieldType: boolean isCanBeNull()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: boolean isForeign()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: r59 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r59.<java.lang.Object: boolean equals(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i7 = virtualinvoke $r25.<com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>
VIRTUAL edge: virtualinvoke $r24.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r60, r58, 0, r12) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: r60 = virtualinvoke $r13.<com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r62, r58, r12) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r6.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r2, r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r46.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not assign object \'") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to field ") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r38.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not assign object \'") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' to field ") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not call ") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r29) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" on object with \'") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r58) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ") in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.j256.ormlite.field.DataPersister: java.lang.Object convertIdNumber(java.lang.Number)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Object convertIdNumber(java.lang.Number)>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.j256.ormlite.field.DataPersister: java.lang.Object convertIdNumber(java.lang.Number)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.j256.ormlite.field.DataPersister: java.lang.Object convertIdNumber(java.lang.Number)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid class ") in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for sequence-id ") in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>($r13) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r4, r3, 0, r5) in <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r21 = virtualinvoke $r5.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get field value for ") in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke $r4.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r2, $r3) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not call ") in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for ") in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>(r4) in <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.DateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.SqlDateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.TimeStampType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.CharType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.SqlDateType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>(r1, r0, i0) in <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: java.lang.Object moveToNextValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Object moveToNextValue(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: java.lang.Object moveToNextValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: java.lang.Object moveToNextValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: java.lang.Object moveToNextValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: java.lang.Object moveToNextValue(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.BooleanObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.DoubleObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.FloatObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.DateTimeType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.IntegerObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.LongObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.ByteObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.ShortObjectType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.DateLongType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.EnumIntegerType: boolean isEscapedValue()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedValue()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: boolean isEscapedValue()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>() in <com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>() in <com.j256.ormlite.field.FieldType: java.lang.String getFormat()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUnique()>() in <com.j256.ormlite.field.FieldType: boolean isUnique()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUnique()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUniqueCombo()>() in <com.j256.ormlite.field.FieldType: boolean isUniqueCombo()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUniqueCombo()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getIndexName(java.lang.String)>($r1) in <com.j256.ormlite.field.FieldType: java.lang.String getIndexName()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getIndexName(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getUniqueIndexName(java.lang.String)>($r1) in <com.j256.ormlite.field.FieldType: java.lang.String getUniqueIndexName()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getUniqueIndexName(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isEscapedDefaultValue()>() in <com.j256.ormlite.field.FieldType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: ") in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.sql.SQLException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: boolean isComparable()>() in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isComparable()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.j256.ormlite.field.DataPersister: boolean isComparable()>() in <com.j256.ormlite.field.FieldType: boolean isComparable()> ==> <com.j256.ormlite.field.types.SerializableType: boolean isComparable()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isArgumentHolderRequired()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()> ==> <com.j256.ormlite.field.types.StringBytesType: boolean isArgumentHolderRequired()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()> ==> <com.j256.ormlite.field.types.DateType: boolean isArgumentHolderRequired()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()> ==> <com.j256.ormlite.field.types.ByteArrayType: boolean isArgumentHolderRequired()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()> ==> <com.j256.ormlite.field.types.SerializableType: boolean isArgumentHolderRequired()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: boolean isForeignCollection()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollectionEager()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollectionEager()>
VIRTUAL edge: $r25 = virtualinvoke $r23.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>
SPECIAL edge: specialinvoke $r21.<com.j256.ormlite.dao.LazyForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r2, r8, r9, $r24, $r25) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.dao.LazyForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $i7 = virtualinvoke $r20.<com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>
SPECIAL edge: specialinvoke $r15.<com.j256.ormlite.dao.LazyForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r2, r8, r9, $r18, $r19) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.dao.LazyForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>
SPECIAL edge: specialinvoke $r7.<com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r2, r8, r9, $r12, $r13) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r22) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r22) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r22) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r22.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i3 = virtualinvoke r22.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i2 = virtualinvoke r22.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r22.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.Integer: int intValue()>
INTERFACE edge: r6 = interfaceinvoke $r5.<com.j256.ormlite.field.FieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r4, $i0) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.BooleanType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.IntType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.ByteType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.DoubleType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.LongType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.ShortType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.CharType: boolean isPrimitive()>
INTERFACE edge: $z1 = interfaceinvoke $r8.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.FloatType: boolean isPrimitive()>
VIRTUAL edge: $z4 = virtualinvoke $r10.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Results value for primitive field \'") in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r16 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was an invalid null value") in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String)>($r18) in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: $z2 = interfaceinvoke $r9.<com.j256.ormlite.field.FieldConverter: boolean isStreamType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.BaseFieldConverter: boolean isStreamType()>
INTERFACE edge: $z2 = interfaceinvoke $r9.<com.j256.ormlite.field.FieldConverter: boolean isStreamType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)> ==> <com.j256.ormlite.field.types.SerializableType: boolean isStreamType()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isSelfGeneratedId()>() in <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isSelfGeneratedId()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: boolean isSelfGeneratedId()>() in <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()> ==> <com.j256.ormlite.field.types.UuidType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>() in <com.j256.ormlite.field.FieldType: java.lang.String getColumnDefinition()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>() in <com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>() in <com.j256.ormlite.field.FieldType: boolean isVersion()> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: java.lang.Object generateId()>() in <com.j256.ormlite.field.FieldType: java.lang.Object generateId()> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Object generateId()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.field.DataPersister: java.lang.Object generateId()>() in <com.j256.ormlite.field.FieldType: java.lang.Object generateId()> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object generateId()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()> ==> <java.lang.reflect.Field: java.lang.Class getType()>
INTERFACE edge: $i0 = interfaceinvoke r1.<com.j256.ormlite.dao.Dao: int create(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: int createWithForeignDao(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)>(r0, r2, r3, r4, r6) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType createFieldType(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,java.lang.Class)> ==> <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.reflect.Field: boolean equals(java.lang.Object)>($r5) in <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.reflect.Field: int hashCode()>() in <com.j256.ormlite.field.FieldType: int hashCode()> ==> <java.lang.reflect.Field: int hashCode()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":name=") in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",class=") in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>() in <com.j256.ormlite.stmt.SelectArg: void <init>()> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(com.j256.ormlite.field.SqlType)>(r1) in <com.j256.ormlite.stmt.SelectArg: void <init>(com.j256.ormlite.field.SqlType,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(com.j256.ormlite.field.SqlType)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.SelectArg: void <init>(com.j256.ormlite.field.SqlType,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>() in <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.misc.BaseDaoEnabled: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: int create()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int create(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: int create()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: int refresh()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int refresh(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: int refresh()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: int update()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int update(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: int update()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: int updateId(java.lang.Object)> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int updateId(java.lang.Object,java.lang.Object)>(r0, r2) in <com.j256.ormlite.misc.BaseDaoEnabled: int updateId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int updateId(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: int delete()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int delete(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: int delete()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: java.lang.String objectToString()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.misc.BaseDaoEnabled: java.lang.String objectToString()> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.lang.String objectToString(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: java.lang.String objectToString()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.String objectToString(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: java.lang.Object extractId()> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object extractId(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: java.lang.Object extractId()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>() in <com.j256.ormlite.misc.BaseDaoEnabled: boolean objectsEqual(java.lang.Object)> ==> <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: boolean objectsEqual(java.lang.Object,java.lang.Object)>(r0, r2) in <com.j256.ormlite.misc.BaseDaoEnabled: boolean objectsEqual(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.sql.SQLException: java.lang.Throwable initCause(java.lang.Throwable)>(r3) in <com.j256.ormlite.misc.SqlExceptionUtil: java.sql.SQLException create(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: virtualinvoke $r10.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("starting iterator @{} for \'{}\'", $r11, r9) in <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>() in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>() in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Errors getting more results of ") in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r8, $r1) in <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object first()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object previous()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object first()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object current()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object first()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object current()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>
VIRTUAL edge: r9 = virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get next result for ") in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r6, r8) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>() in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object moveRelative(int)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No last ") in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" object to remove. Must be called after a call to next.") in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18) in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot remove ") in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" object because classDao not initialized") in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r11) in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.dao.Dao: int delete(java.lang.Object)>($r3) in <com.j256.ormlite.stmt.SelectIterator: void removeThrow()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void removeThrow()>() in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <com.j256.ormlite.stmt.SelectIterator: void removeThrow()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>() in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not delete ") in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" object ") in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r1) in <com.j256.ormlite.stmt.SelectIterator: void remove()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("closed iterator @{} after {} rows", $r6, $r7) in <com.j256.ormlite.stmt.SelectIterator: void close()> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.DaoManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/j256/ormlite/table/DatabaseTable;") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: virtualinvoke $r6.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("created dao for class {} with reflection", r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find public constructor with ConnectionSource and optional Class parameters ") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.sql.SQLException: void <init>(java.lang.String)>($r17) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke r37.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r36) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r11.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("created dao for class {} from constructor", r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not call the constructor in class ") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r35) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, $r3) in <com.j256.ormlite.dao.DaoManager: void registerDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r2.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, $r3) in <com.j256.ormlite.dao.DaoManager: void unregisterDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("connectionSource argument cannot be null") in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.DatabaseTableConfig getTableConfig()>() in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.DatabaseTableConfig getTableConfig()>
SPECIAL edge: specialinvoke $r6.<com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r0, r5) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r0, $r3) in <com.j256.ormlite.dao.DaoManager: void registerDaoWithTableConfig(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearCache()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.DaoManager: void clearDaoCache()> ==> <java.util.HashMap: void clear()>
SPECIAL edge: specialinvoke $r11.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>(java.util.Map)>($r2) in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <java.util.HashMap: void <init>(java.util.Map)>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r7 = virtualinvoke r6.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
VIRTUAL edge: $r10 = virtualinvoke r6.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
INTERFACE edge: interfaceinvoke r12.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r6) in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>("Loaded configuration for {}", $r10) in <com.j256.ormlite.dao.DaoManager: void addCachedDatabaseConfigs(java.util.Collection)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.BaseDaoImpl$5: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseDaoImpl$3: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build prepared-query iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r4) in <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.BaseDaoImpl$4: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseDaoImpl$2: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r3) in <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int create(java.lang.Object)>(r2) in <com.j256.ormlite.dao.BaseForeignCollection: boolean add(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create data element in dao", $r4) in <com.j256.ormlite.dao.BaseForeignCollection: boolean add(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.dao.Dao: int create(java.lang.Object)>(r4) in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not create data elements in dao", $r6) in <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r10 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r10 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void remove()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r10) in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r10) in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r10) in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Collection: boolean contains(java.lang.Object)>(r10) in <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.stmt.SelectIterator: void remove()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.BaseForeignCollection: void clear()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int update(java.lang.Object)>(r2) in <com.j256.ormlite.dao.BaseForeignCollection: int update(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int refresh(java.lang.Object)>(r2) in <com.j256.ormlite.dao.BaseForeignCollection: int refresh(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: void close()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void close()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl$3: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl$2: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.stmt.RawResultsImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.CloseableIterable: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void close()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void close()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.CloseableWrappedIterableImpl: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and()> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and()> ==> <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String)>($r2, "AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and()> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String)>(r1, "AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r5) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String)>(r4, r3, r2, "AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least one clause in and(numClauses)") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r1.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String)>(r0, "AND") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where between(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where between(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.Between: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Object)>(r2, $r3, r4, r5) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where between(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.Between: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, "=") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ge(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ge(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, ">=") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ge(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where gt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where gt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, ">") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where gt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean)>(r2, $r3, r4, 1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean)>(r2, $r3, r4, 0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Iterable)> ==> <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])>(1, r1, r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])>(0, r1, r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where notIn(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)>(1, r1, r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)>(0, r1, r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where notIn(java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void enableInnerQuery()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void enableInnerQuery()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void <init>(com.j256.ormlite.stmt.QueryBuilder)>(r0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void <init>(com.j256.ormlite.stmt.QueryBuilder)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.Exists: void <init>(com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)>($r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.query.Exists: void <init>(com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where exists(com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNull(java.lang.String)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNull(java.lang.String)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.IsNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)>(r2, $r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNull(java.lang.String)> ==> <com.j256.ormlite.stmt.query.IsNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNotNull(java.lang.String)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNotNull(java.lang.String)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.IsNotNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)>(r2, $r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where isNotNull(java.lang.String)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where le(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where le(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, "<=") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where le(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where lt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where lt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, "<") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where lt(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where like(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where like(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, "LIKE") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where like(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ne(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ne(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, "<>") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where ne(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.Not: void <init>()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where not()> ==> <com.j256.ormlite.stmt.query.Not: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where not()> ==> <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("NOT") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where not(com.j256.ormlite.stmt.Where)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where not(com.j256.ormlite.stmt.Where)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.Not: void <init>(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where not(com.j256.ormlite.stmt.Where)> ==> <com.j256.ormlite.stmt.query.Not: void <init>(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or()> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or()> ==> <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String)>($r2, "OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or()> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String)>(r1, "OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String)>
SPECIAL edge: r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: r4 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r5) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String)>(r4, r3, r2, "OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where,com.j256.ormlite.stmt.Where[])> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Must have at least one clause in or(numClauses)") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r1.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>("OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(int)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(int)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String)>(r0, "OR") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where or(int)> ==> <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>("Object has no id column specified") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>($r5, $r4, r3, "=") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>("Object has no id column specified") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke r3.<com.j256.ormlite.dao.Dao: java.lang.Object extractId(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>($r5, $r6, $r7, "=") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where idEq(com.j256.ormlite.dao.Dao,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
INTERFACE edge: r6 = interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String getColumnName()>
INTERFACE edge: r6 = interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.NullArgHolder: java.lang.String getColumnName()>
INTERFACE edge: $r8 = interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>
INTERFACE edge: $r8 = interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.NullArgHolder: com.j256.ormlite.field.SqlType getSqlType()>
INTERFACE edge: interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>($r7) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>
INTERFACE edge: interfaceinvoke r5.<com.j256.ormlite.stmt.ArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>($r7) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.NullArgHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Either the column name or SqlType must be set on each argument") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r6) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.query.Raw: void <init>(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])>(r4, r0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where raw(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <com.j256.ormlite.stmt.query.Raw: void <init>(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where rawComparison(java.lang.String,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where rawComparison(java.lang.String,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>(r2, $r3, r4, r5) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where rawComparison(java.lang.String,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>(null) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.PreparedQuery prepare()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>() in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call query on a statement of type ") in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>() in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.stmt.Where: java.util.List query()> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot call iterator on a statement of type ") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.StatementBuilder$StatementType getType()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: java.lang.String getStatement()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: java.lang.String getStatement()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.Where: java.lang.String getStatement()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)>($r0, $r3) in <com.j256.ormlite.stmt.Where: java.lang.String getStatement()> ==> <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)>
SPECIAL edge: r1 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause peek()>() in <com.j256.ormlite.stmt.Where: java.lang.String toString()> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause peek()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("where clause: ") in <com.j256.ormlite.stmt.Where: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.Where: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(com.j256.ormlite.field.SqlType)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column name cannot be set twice from ") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Using a SelectArg twice in query with different columns?") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FieldType name cannot be set twice from ") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to ") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Using a SelectArg twice in query with different columns?") in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)>(r1) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>(r2) in <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(com.j256.ormlite.field.FieldType)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: boolean isValueSet()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.stmt.SelectArg: boolean isValueSet()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: boolean isValueSet()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: boolean isValueSet()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getValue()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.stmt.SelectArg: java.lang.Object getValue()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getValue()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: java.lang.Object getValue()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Column value has not been set for ") in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.sql.SQLException: void <init>(java.lang.String)>($r17) in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.j256.ormlite.field.FieldType: boolean isForeign()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.field.FieldType: boolean isForeign()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r10 = virtualinvoke $r9.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>
VIRTUAL edge: $r11 = virtualinvoke r10.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: boolean isValueSet()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.SelectArg: boolean isValueSet()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: boolean isValueSet()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: boolean isValueSet()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.sql.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.sql.Date: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.In: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.Where: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.sql.Time: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.field.FieldType: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.Not: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.security.Timestamp: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[could not get value: ") in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: void <init>(java.lang.String,java.lang.String,com.j256.ormlite.field.DataType,java.lang.String,int,boolean,boolean,boolean,java.lang.String,boolean,com.j256.ormlite.table.DatabaseTableConfig,boolean,java.lang.Enum,boolean,java.lang.String,boolean,java.lang.String,java.lang.String,boolean,int,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getIndexName(java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getUniqueIndexName(java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/j256/ormlite/field/DatabaseField;") in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/j256/ormlite/field/ForeignCollectionField;") in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
VIRTUAL edge: $r6 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r12 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: r4 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r3) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find appropriate get method for ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r21) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.reflect.Method: java.lang.Class getReturnType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Method: java.lang.Class getReturnType()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Return type of get method ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not return ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findGetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: r5 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>(r1, $r3) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find appropriate set method for ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Method: java.lang.Class getReturnType()>
VIRTUAL edge: $r13 = virtualinvoke r5.<java.lang.reflect.Method: java.lang.Class getReturnType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.reflect.Method: java.lang.Class getReturnType()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Return type of set method ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" returns ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r13) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" instead of void") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r16) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.reflect.Method findSetMethod(java.lang.reflect.Field,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $z1 = virtualinvoke r9.<java.lang.String: boolean equals(java.lang.Object)>("__ormlite__ no default value string was specified") in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromDatabaseField(com.j256.ormlite.db.DatabaseType,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseField)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Object[] getEnumConstants()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.Class: java.lang.Object[] getEnumConstants()>
VIRTUAL edge: $r14 = virtualinvoke r13.<java.lang.Enum: java.lang.String name()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $z0 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r0) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknwown enum unknown name ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field ") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum findMatchingEnumVal(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: r32 = interfaceinvoke r0.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r31, r3) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
INTERFACE edge: r32 = interfaceinvoke r0.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r31, r3) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object convertIdToFieldObject(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object convertIdToFieldObject(java.lang.Object)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.mapped.MappedQueryForId: void logArgs(java.lang.Object[])>($r1) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: void logArgs(java.lang.Object[])>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.mapped.MappedQueryForId: void logArgs(java.lang.Object[])>($r1) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: void logArgs(java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r27.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("{} using \'{}\' and {} args, got no results", $r28, $r29, $r30) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("{} using \'{}\' and {} args, got >1 results", $r16, $r17, $r18) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" got more than 1 result: ") in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.sql.SQLException: void <init>(java.lang.String)>($r26) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r10.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("{} using \'{}\' and {} args, got 1 result", $r11, $r12, $r13) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: r13 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r9 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot query-for-id with ") in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field") in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.mapped.MappedQueryForId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String)>(r1, r2, $r4, $r5, "query-for-id") in <com.j256.ormlite.stmt.mapped.MappedQueryForId: com.j256.ormlite.stmt.mapped.MappedQueryForId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5) in <com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.dao.BaseForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>() in <com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>
SPECIAL edge: specialinvoke $r8.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: $r7 = interfaceinvoke r1.<com.j256.ormlite.dao.Dao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>($r6) in <com.j256.ormlite.dao.EagerForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>() in <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>() in <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.EagerForeignCollection$1: void <init>(com.j256.ormlite.dao.EagerForeignCollection)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void <init>(com.j256.ormlite.dao.EagerForeignCollection)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection: int size()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean isEmpty()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean containsAll(java.util.Collection)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractCollection: boolean containsAll(java.util.Collection)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object[] toArray()>() in <com.j256.ormlite.dao.EagerForeignCollection: java.lang.Object[] toArray()> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean add(java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: $z1 = specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: boolean add(java.lang.Object)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean add(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseForeignCollection: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean addAll(java.util.Collection)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean addAll(java.util.Collection)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: $z1 = specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean addAll(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseForeignCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean remove(java.lang.Object)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r5.<com.j256.ormlite.dao.Dao: int delete(java.lang.Object)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>("Could not delete data element from dao", $r6) in <com.j256.ormlite.dao.EagerForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $z1 = virtualinvoke r3.<com.j256.ormlite.dao.EagerForeignCollection: boolean remove(java.lang.Object)>(r2) in <com.j256.ormlite.dao.EagerForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean remove(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)>(r1) in <com.j256.ormlite.dao.EagerForeignCollection: boolean retainAll(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseForeignCollection: boolean retainAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <com.j256.ormlite.dao.EagerForeignCollection: void clear()> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: void clear()>() in <com.j256.ormlite.dao.EagerForeignCollection: void clear()> ==> <com.j256.ormlite.dao.BaseForeignCollection: void clear()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.j256.ormlite.dao.Dao: int update(java.lang.Object)>(r3) in <com.j256.ormlite.dao.EagerForeignCollection: int updateAll()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<com.j256.ormlite.dao.Dao: int refresh(java.lang.Object)>(r3) in <com.j256.ormlite.dao.EagerForeignCollection: int refreshAll()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshCollection()> ==> <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>
INTERFACE edge: $r3 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>($r2) in <com.j256.ormlite.dao.EagerForeignCollection: int refreshCollection()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection: int refreshCollection()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r3) in <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.dao.EagerForeignCollection: int hashCode()> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.DataPersisterManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.field.DataPersisterManager: void registerDataPersisters(com.j256.ormlite.field.DataPersister[])> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean addAll(java.util.Collection)>($r6) in <com.j256.ormlite.field.DataPersisterManager: void registerDataPersisters(com.j256.ormlite.field.DataPersister[])> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r5) in <com.j256.ormlite.field.DataPersisterManager: void registerDataPersisters(com.j256.ormlite.field.DataPersister[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r14 = interfaceinvoke $r8.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $z2 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r1) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z2 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r1) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseDateType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z2 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r1) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.VoidType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z2 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r1) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.SerializableType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: $z2 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: boolean isValidForField(java.lang.reflect.Field)>(r1) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseEnumType: boolean isValidForField(java.lang.reflect.Field)>
INTERFACE edge: r11 = interfaceinvoke r10.<com.j256.ormlite.field.DataPersister: java.lang.Class[] getAssociatedClasses()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Class[] getAssociatedClasses()>
VIRTUAL edge: $r13 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>($r4) in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Class: boolean isEnum()>() in <com.j256.ormlite.field.DataPersisterManager: com.j256.ormlite.field.DataPersister lookupForField(java.lang.reflect.Field)> ==> <java.lang.Class: boolean isEnum()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>(r1, r2, r3, r4, r5) in <com.j256.ormlite.dao.LazyForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.dao.BaseForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build lazy iterator for ") in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r2) in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iteratorThrow()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Internal DAO object is null.  Lazy collections cannot be used if they have been deserialized.") in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>() in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()> ==> <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>($r3) in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.dao.LazyForeignCollection$1: void <init>(com.j256.ormlite.dao.LazyForeignCollection)>(r2) in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: void <init>(com.j256.ormlite.dao.LazyForeignCollection)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>($r1) in <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: void <init>(com.j256.ormlite.dao.CloseableIterable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: void closeLastIterator()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: void closeLastIterator()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void moveToNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.stmt.SelectIterator: void moveToNext()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void moveToNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void moveToNext()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: int size()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean isEmpty()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>(java.util.Collection)>(r1) in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean remove(java.lang.Object)>($r5) in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: z1 = interfaceinvoke $r0.<java.util.Set: boolean isEmpty()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <java.util.HashSet: boolean isEmpty()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean containsAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void remove()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean remove(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void remove()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void remove()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Collection: boolean contains(java.lang.Object)>($r3) in <com.j256.ormlite.dao.LazyForeignCollection: boolean removeAll(java.util.Collection)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: boolean hasNext()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r13 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r13 = interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: interfaceinvoke r1.<com.j256.ormlite.dao.CloseableIterator: void close()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void close()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r6) in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r13) in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke r12.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>(r2) in <com.j256.ormlite.dao.LazyForeignCollection: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot call updateAll() on a lazy collection.") in <com.j256.ormlite.dao.LazyForeignCollection: int updateAll()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Cannot call updateAll() on a lazy collection.") in <com.j256.ormlite.dao.LazyForeignCollection: int refreshAll()> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.dao.LazyForeignCollection: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.logger.Logger: void <init>(com.j256.ormlite.logger.Log)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.j256.ormlite.logger.Log: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>(r1) in <com.j256.ormlite.logger.Logger: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)> ==> <com.j256.ormlite.logger.LocalLog: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void trace(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void debug(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void info(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void warn(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void warn(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, $r4, $r3, $r2, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, $r4, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r5, null, r1, r2, r3, r4, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, null, r1, $r5, $r4, $r3, r2) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r6, r1, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>($r7, r1, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void fatal(java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, null, r2, $r5, $r4, $r3, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, null, r2, r3, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, null, r2, r3, r4, $r5, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, null, r2, r3, r4, r5, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, null, r2, $r6, $r5, $r4, r3) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, $r6, $r5, $r4, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, r4, $r6, $r5, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, r4, r5, $r6, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, r4, r5, r6, null) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r1, r2, r3, $r7, $r6, $r5, r4) in <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLog(java.lang.String)>(r2) in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLog(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLog(java.lang.String)>(r2) in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory$LogType$1: com.j256.ormlite.logger.Log createLog(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.logger.Logger: void <init>(com.j256.ormlite.logger.Log)>($r4) in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void <init>(com.j256.ormlite.logger.Log)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") in <com.j256.ormlite.logger.LoggerFactory: java.lang.String getSimpleClassName(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r4.<com.j256.ormlite.stmt.StatementBuilder$StatementType: boolean isOkForStatementBuilder()>() in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: boolean isOkForStatementBuilder()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Building a statement from a ") in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" statement is not allowed") in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.stmt.StatementBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.Where: void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType)>($r3, r0, $r2) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()> ==> <com.j256.ormlite.stmt.Where: void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String prepareStatementString()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: $r3 = specialinvoke r2.<com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)>($r0) in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String prepareStatementString()> ==> <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder: void <clinit>()>
CLINIT edge: <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.logger.Logger logger> = $r0 in <com.j256.ormlite.stmt.StatementBuilder: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>(class "Lcom/j256/ormlite/stmt/StatementBuilder;") in <com.j256.ormlite.stmt.StatementBuilder: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.Logger getLogger(java.lang.Class)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, r3, 1) in <com.j256.ormlite.stmt.query.SetExpression: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ") in <com.j256.ormlite.stmt.query.SetExpression: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SetExpression: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.SetExpression: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, $r7, 0) in <com.j256.ormlite.stmt.query.SetValue: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ") in <com.j256.ormlite.stmt.query.SetValue: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SetValue: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.SetValue: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedQuery: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>(r1, r2, r3, r4) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.ArgumentHolder[],java.lang.Long,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)>(r1, r2, -1) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not compile this ") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" statement since the caller is expecting a ") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" statement.  Check your QueryBuilder methods.") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>($r16) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: $r7 = specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)>(r3, r6) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compile(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.stmt.StatementBuilder$StatementType,int)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)>
CLINIT edge: $r2 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level TRACE> in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("argument holder index ") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be >= 0") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<java.sql.SQLException: void <init>(java.lang.String)>($r19) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("argument holder index ") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not valid, only ") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" in statement") in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.sql.SQLException: void <init>(java.lang.String)>($r13) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.stmt.ArgumentHolder: void setValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.stmt.ArgumentHolder: void setValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.j256.ormlite.stmt.ArgumentHolder: void setValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setArgumentHolderValue(int,java.lang.Object)> ==> <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("String-bytes type cannot have default values") in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: r5 = specialinvoke r3.<com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)>(r4) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)>
SPECIAL edge: specialinvoke $r6.<java.lang.String: void <init>(byte[],java.lang.String)>(r2, r5) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert string with charset name: ") in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: r4 = specialinvoke r2.<com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)>(r3) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.lang.String)>(r4) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not convert string with charset name: ") in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("String-bytes type cannot be converted from string to Java") in <com.j256.ormlite.field.types.StringBytesType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default UUID-string \'") in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with column ") in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing UUID-string \'") in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.util.UUID: java.lang.String toString()>() in <com.j256.ormlite.field.types.UuidType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.UUID: java.lang.String toString()>
SPECIAL edge: r11 = specialinvoke r0.<com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod()>
VIRTUAL edge: $r3 = virtualinvoke r11.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, $r2) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not use reflection to get millis from Joda DateTime: ") in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod> in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
SPECIAL edge: r8 = specialinvoke r0.<com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()>
VIRTUAL edge: $r4 = virtualinvoke r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r1) in <com.j256.ormlite.field.types.DateTimeType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor millisConstructor> in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
CLINIT edge: $r5 = <java.lang.Long: java.lang.Class TYPE> in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default date-string \'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using \'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with column ") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing date-string \'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using \'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r5) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.String getFormat()>() in <com.j256.ormlite.field.types.DateStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFormat()>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r2, i0) in <com.j256.ormlite.field.types.DateStringType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
SPECIAL edge: specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigInteger: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default BigInteger string \'") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.math.BigInteger: void <init>(java.lang.String)>($r2) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.math.BigInteger: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with column ") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing BigInteger string \'") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.math.BigInteger: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Float: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Byte: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.util.concurrent.atomic.AtomicInteger: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.math.BigDecimal: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Integer: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Short: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.math.BigInteger: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.lang.Number: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Double: long longValue()>
VIRTUAL edge: $l0 = virtualinvoke $r1.<java.lang.Long: long longValue()>() in <com.j256.ormlite.field.types.LongObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()>
VIRTUAL edge: $l0 = virtualinvoke $r6.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l0 = virtualinvoke $r6.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.Timestamp: long getTime()>
SPECIAL edge: specialinvoke $r4.<java.sql.Timestamp: void <init>(long)>($l0) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.Timestamp: void <init>(long)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems parsing default date string \'") in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' using \'") in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig defaultDateFormatConfig> in <com.j256.ormlite.field.types.DateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig sqlDateFormatConfig> in <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()> ==> <com.j256.ormlite.field.types.SqlDateType: void <clinit>()>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig sqlDateFormatConfig> in <com.j256.ormlite.field.types.SqlDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig getDefaultDateFormatConfig()> ==> <com.j256.ormlite.field.types.DateType: void <clinit>()>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.sql.Timestamp: long getTime()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.sql.Timestamp: long getTime()>
SPECIAL edge: specialinvoke $r2.<java.util.Date: void <init>(long)>($l0) in <com.j256.ormlite.field.types.DateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Timestamp: long getTime()>
SPECIAL edge: specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>($l0) in <com.j256.ormlite.field.types.DateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Timestamp: void <init>(long)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.sql.Timestamp: long getTime()>() in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.sql.Timestamp: long getTime()>
SPECIAL edge: specialinvoke $r2.<java.sql.Date: void <init>(long)>($l0) in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.sql.Date: void <init>(long)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.sql.Date: long getTime()>() in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r2.<java.sql.Timestamp: void <init>(long)>($l0) in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Timestamp: void <init>(long)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.types.SqlDateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, $r3, i0) in <com.j256.ormlite.field.types.SqlDateType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.SqlDateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
SPECIAL edge: specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigDecimal: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default BigDecimal string \'") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>($r2) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.math.BigDecimal: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with column ") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing BigDecimal string \'") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.math.BigDecimal: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Float: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.math.BigDecimal: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.util.concurrent.atomic.AtomicInteger: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Double: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Short: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.math.BigInteger: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Byte: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Number: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object convertIdNumber(java.lang.Number)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("byte[] type cannot have default values") in <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("byte[] type cannot be converted from string to Java") in <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default date-long value: ") in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $l0 = virtualinvoke $r2.<java.lang.Long: long longValue()>() in <com.j256.ormlite.field.types.DateLongType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Long: long longValue()>
SPECIAL edge: specialinvoke $r0.<java.util.Date: void <init>(long)>($l0) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateLongType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l0 = virtualinvoke r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.DateLongType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Timestamp: long getTime()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.types.DateLongType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, $r3, i1) in <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", default string to long for Character: \'") in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $s0 = virtualinvoke $r1.<java.lang.Short: short shortValue()>() in <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.lang.Short: short shortValue()>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("Default values for serializable types are not supported") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.io.ByteArrayInputStream: void <init>(byte[])>(r2) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
SPECIAL edge: specialinvoke $r3.<java.io.ObjectInputStream: void <init>(java.io.InputStream)>($r4) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.io.ObjectInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: r24 = virtualinvoke $r3.<java.io.ObjectInputStream: java.lang.Object readObject()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.io.ObjectInputStream: java.lang.Object readObject()>
VIRTUAL edge: virtualinvoke $r3.<java.io.ObjectInputStream: void close()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.io.ObjectInputStream: void close()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not read serialized object from byte array: ") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(len ") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r23.<java.io.ObjectInputStream: void close()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.io.ObjectInputStream: void close()>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: r3 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r1.<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>($r0) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r1.<java.io.ObjectOutputStream: void writeObject(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectOutputStream: void writeObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.io.ObjectOutputStream: void close()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectOutputStream: void close()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not write serialized object to byte array: ") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r18.<java.io.ObjectOutputStream: void close()>() in <com.j256.ormlite.field.types.SerializableType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.types.SerializableType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2) in <com.j256.ormlite.field.types.SerializableType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<java.sql.SQLException: void <init>(java.lang.String)>("Serializable type cannot be converted from string to Java") in <com.j256.ormlite.field.types.SerializableType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.lang.Enum: int ordinal()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r8) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object[] getEnumConstants()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Class: java.lang.Object[] getEnumConstants()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" improperly configured as type ") in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String)>($r18) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r8.<java.lang.Enum: int ordinal()>() in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, $r3, i1) in <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $c0 = virtualinvoke r1.<java.lang.Character: char charValue()>() in <com.j256.ormlite.field.types.CharType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Character: char charValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <com.j256.ormlite.field.FieldType: java.lang.Enum getUnknownEnumVal()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.Enum: java.lang.String name()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Enum: java.lang.String name()>
SPECIAL edge: specialinvoke $r0.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r8) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.Class: java.lang.Object[] getEnumConstants()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Class: java.lang.Object[] getEnumConstants()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" improperly configured as type ") in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String)>($r18) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke r8.<java.lang.Enum: java.lang.String name()>() in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r2, i0) in <com.j256.ormlite.field.types.EnumStringType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
SPECIAL edge: specialinvoke $r0.<java.math.BigDecimal: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.math.BigDecimal: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problems with field ") in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" parsing default BigDecimal string \'") in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z3 = virtualinvoke $r20.<com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $z8 = virtualinvoke $r29.<com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke $r40.<com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z7 = virtualinvoke $r25.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: $r28 = virtualinvoke $r26.<com.j256.ormlite.field.FieldType: java.lang.Object generateId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object generateId()>
VIRTUAL edge: virtualinvoke $r27.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r2, $r28, 0, r4) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $z4 = virtualinvoke $r21.<com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r3, r2, r4) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r44 = virtualinvoke r0.<com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.Object[] getFieldObjects(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)>(r2, r53, "keyholder", r4) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: $z0 = specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedCreate: boolean foreignCollectionsAreAssigned(com.j256.ormlite.field.FieldType[],java.lang.Object)>($r6, r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: boolean foreignCollectionsAreAssigned(com.j256.ormlite.field.FieldType[],java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke $r22.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
SPECIAL edge: specialinvoke $r23.<com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>(com.j256.ormlite.stmt.mapped.MappedCreate$1)>(null) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>(com.j256.ormlite.stmt.mapped.MappedCreate$1)>
VIRTUAL edge: $z11 = virtualinvoke $r41.<com.j256.ormlite.table.TableInfo: boolean isForeignAutoCreate()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: boolean isForeignAutoCreate()>
VIRTUAL edge: r42 = virtualinvoke $r17.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $z1 = virtualinvoke r43.<com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignAutoCreate()>
VIRTUAL edge: r18 = virtualinvoke r43.<com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractRawJavaFieldValue(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke r43.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>
VIRTUAL edge: virtualinvoke r43.<com.j256.ormlite.field.FieldType: int createWithForeignDao(java.lang.Object)>(r18) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: int createWithForeignDao(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r19.<com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)>(r18) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: boolean isObjectsFieldValueDefault(java.lang.Object)>
VIRTUAL edge: r45 = virtualinvoke r46.<com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)>(null) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke r46.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r45) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r49.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("insert data with statement \'{}\' and {} args, changed {} rows", $r50, $r51, $r52) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("insert arguments: {}", r44) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r2, r45, 0, null) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r53 = virtualinvoke r39.<com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: java.lang.Number getKey()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: java.lang.Number getKey()>
SPECIAL edge: specialinvoke $r10.<java.sql.SQLException: void <init>(java.lang.String)>("generated-id key was not set by the update call") in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Float: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.math.BigDecimal: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.concurrent.atomic.AtomicInteger: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Double: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Short: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.math.BigInteger: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Byte: long longValue()>
VIRTUAL edge: $l1 = virtualinvoke r53.<java.lang.Number: long longValue()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Integer: long longValue()>
SPECIAL edge: specialinvoke $r9.<java.sql.SQLException: void <init>(java.lang.String)>("generated-id key must not be 0 value") in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getForeignCollections()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getForeignCollections()>
VIRTUAL edge: r54 = virtualinvoke $r7.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.ObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>($r8, r54, r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<com.j256.ormlite.dao.ObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>($r8, r54, r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r31.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run insert stmt on object ") in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r35) in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: int insert(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r6 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level DEBUG> in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") VALUES (") in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: r13 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r16 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r18 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r20 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $z3 = virtualinvoke r14.<com.j256.ormlite.field.FieldType: boolean isVersion()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: boolean isVersion()>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.stmt.mapped.MappedCreate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int)>(r3, $r9, r15, r21, i2) in <com.j256.ormlite.stmt.mapped.MappedCreate: com.j256.ormlite.stmt.mapped.MappedCreate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r18 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: r23 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r26 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot update ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r15.<java.sql.SQLException: void <init>(java.lang.String)>($r21) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SET ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ?") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" AND ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ?") in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: boolean isVersion()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.field.FieldType: boolean isVersion()>
SPECIAL edge: specialinvoke $r7.<com.j256.ormlite.stmt.mapped.MappedUpdate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType,int)>(r0, $r8, r25, r22, i2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: com.j256.ormlite.stmt.mapped.MappedUpdate build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType,int)>
VIRTUAL edge: r32 = virtualinvoke r0.<com.j256.ormlite.stmt.mapped.MappedUpdate: java.lang.Object[] getFieldObjects(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)>
VIRTUAL edge: r34 = virtualinvoke $r19.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: r33 = virtualinvoke $r20.<com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)>(r34) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object moveToNextValue(java.lang.Object)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r33) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r18.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r2, r33, 0, null) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r10 = virtualinvoke $r9.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
INTERFACE edge: r12 = interfaceinvoke r8.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r11, r10) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
INTERFACE edge: r12 = interfaceinvoke r8.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r11, r10) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
VIRTUAL edge: r14 = virtualinvoke $r13.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r17 = virtualinvoke r15.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke r15.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r12, $r17, 0, r8) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r35.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("update data with statement \'{}\' and {} args, changed {} rows", $r36, $r37, $r38) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("update arguments: {}", r32) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run update stmt on object ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r28) in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: int update(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.j256.ormlite.stmt.mapped.MappedUpdateId: java.lang.Object convertIdToFieldObject(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object convertIdToFieldObject(java.lang.Object)>
SPECIAL edge: $r5 = specialinvoke r1.<com.j256.ormlite.stmt.mapped.MappedUpdateId: java.lang.Object extractIdToFieldObject(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdateId: java.lang.Object extractIdToFieldObject(java.lang.Object)>
VIRTUAL edge: r12 = virtualinvoke $r11.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
INTERFACE edge: r14 = interfaceinvoke r10.<com.j256.ormlite.dao.ObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)>($r13, r12, r2) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)>
INTERFACE edge: r14 = interfaceinvoke r10.<com.j256.ormlite.dao.ObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)>($r13, r12, r2) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r14, r2, 0, r10) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r26.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r4, r2, 0, r10) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r27.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("updating-id with statement \'{}\' and {} args, changed {} rows", $r28, $r29, $r30) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("updating-id arguments: {}", $r0) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run update-id stmt on object ") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: int execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r14 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot update-id in ") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.sql.SQLException: void <init>(java.lang.String)>($r17) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SET ") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ? ") in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.stmt.mapped.MappedUpdateId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r0, $r9, $r10) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: com.j256.ormlite.stmt.mapped.MappedUpdateId build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedUpdateId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete from ") in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field") in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.sql.SQLException: void <init>(java.lang.String)>($r15) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<com.j256.ormlite.stmt.mapped.MappedDelete: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r0, $r7, $r8) in <com.j256.ormlite.stmt.mapped.MappedDelete: com.j256.ormlite.stmt.mapped.MappedDelete build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedDelete: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: r23 = virtualinvoke r0.<com.j256.ormlite.stmt.mapped.MappedDelete: java.lang.Object[] getFieldObjects(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("delete data with statement \'{}\' and {} args, changed {} rows", $r6, $r7, $r8) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("delete arguments: {}", r23) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
VIRTUAL edge: r11 = virtualinvoke $r10.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>($r12, r11) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>($r12, r11) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run delete stmt on object ") in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: int delete(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.j256.ormlite.stmt.mapped.MappedDelete: java.lang.Object convertIdToFieldObject(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object convertIdToFieldObject(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("delete data with statement \'{}\' and {} args, changed {} rows", $r8, $r9, $r10) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("delete arguments: {}", $r0) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
INTERFACE edge: interfaceinvoke r11.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>($r12, r2) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)>
INTERFACE edge: interfaceinvoke r11.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>($r12, r2) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run deleteById stmt on id ") in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDelete: int deleteById(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
SPECIAL edge: r5 = specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>(r4, r3, null) in <com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.Object execute(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $r9 = virtualinvoke r7.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r5) in <com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke r7.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r1, $r9, 0, r10) in <com.j256.ormlite.stmt.mapped.MappedRefresh: int executeRefresh(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot refresh ") in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field") in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.sql.SQLException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.stmt.mapped.MappedRefresh: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>(r0, r3, $r5, $r7) in <com.j256.ormlite.stmt.mapped.MappedRefresh: com.j256.ormlite.stmt.mapped.MappedRefresh build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo)> ==> <com.j256.ormlite.stmt.mapped.MappedRefresh: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r5 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r8 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r11 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>(r10) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteObjects(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Collection: int size()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r6 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: r5 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r8 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r10 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r11 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r10) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int deleteIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.support.DatabaseConnection,java.util.Collection,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: void <init>(com.j256.ormlite.field.DataType[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r7.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<com.j256.ormlite.field.DataPersister: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(null, r0, i2) in <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object[] mapRow(com.j256.ormlite.support.DatabaseResults)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)>(r2, null, r3, r4, r5, r6, r7, r8) in <com.j256.ormlite.stmt.RawResultsImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.lang.Class,com.j256.ormlite.support.CompiledStatement,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.SelectIterator: void <init>(java.lang.Class,com.j256.ormlite.dao.Dao,com.j256.ormlite.stmt.GenericRowMapper,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement,java.lang.String,com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7) in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: virtualinvoke $r10.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.List getResults()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNextThrow()>
VIRTUAL edge: r5 = virtualinvoke $r2.<com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object nextThrow()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.RawResultsImpl: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()> ==> <com.j256.ormlite.stmt.RawResultsImpl: void close()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.RawResultsImpl: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()> ==> <com.j256.ormlite.stmt.RawResultsImpl: void close()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.RawResultsImpl: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.lang.Object getFirstResult()> ==> <com.j256.ormlite.stmt.RawResultsImpl: void close()>
VIRTUAL edge: virtualinvoke $r2.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.RawResultsImpl: void close()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.stmt.RawResultsImpl: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.stmt.RawResultsImpl: java.util.Iterator iterator()> ==> <com.j256.ormlite.stmt.RawResultsImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.misc.TransactionManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.misc.TransactionManager: void <init>(com.j256.ormlite.support.ConnectionSource)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.misc.TransactionManager: void initialize()>() in <com.j256.ormlite.misc.TransactionManager: void <init>(com.j256.ormlite.support.ConnectionSource)> ==> <com.j256.ormlite.misc.TransactionManager: void initialize()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("dataSource was not set on ") in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.misc.TransactionManager: void initialize()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("had to set auto-commit to false") in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ORMLITE") in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r18.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r6.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("started savePoint transaction") in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("started savePoint transaction {}", $r2) in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("restored auto-commit to true") in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("restored auto-commit to true") in <com.j256.ormlite.misc.TransactionManager: java.lang.Object callInTransaction(com.j256.ormlite.support.DatabaseConnection,boolean,com.j256.ormlite.db.DatabaseType,java.util.concurrent.Callable)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: void <init>(com.j256.ormlite.dao.RawRowMapper,java.lang.String[],com.j256.ormlite.stmt.GenericRowMapper)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.dao.RawRowMapper: java.lang.Object mapRow(java.lang.String[],java.lang.String[])>($r5, r4) in <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.stmt.RawRowMapperImpl: java.lang.Object mapRow(java.lang.String[],java.lang.String[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.RawRowMapperImpl: void <init>(com.j256.ormlite.table.TableInfo)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.table.TableInfo: java.lang.Object createObject()>() in <com.j256.ormlite.stmt.RawRowMapperImpl: java.lang.Object mapRow(java.lang.String[],java.lang.String[])> ==> <com.j256.ormlite.table.TableInfo: java.lang.Object createObject()>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>($r5) in <com.j256.ormlite.stmt.RawRowMapperImpl: java.lang.Object mapRow(java.lang.String[],java.lang.String[])> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r7.<com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)>($r8, i2) in <com.j256.ormlite.stmt.RawRowMapperImpl: java.lang.Object mapRow(java.lang.String[],java.lang.String[])> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertStringToJavaField(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r7.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r2, r9, 0, null) in <com.j256.ormlite.stmt.RawRowMapperImpl: java.lang.Object mapRow(java.lang.String[],java.lang.String[])> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.stmt.QueryBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)>(r1, r2) in <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.OrderBy: void <init>(java.lang.String,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r78 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.'annotation'.Annotation[] getAnnotations()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.AccessibleObject: java.lang.'annotation'.Annotation[] getAnnotations()>
VIRTUAL edge: r83 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r20 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r38 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r39 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r40 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r41 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r42 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r43 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r44 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r45 = virtualinvoke r80.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z8 = virtualinvoke $r38.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.Column") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke $r39.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.Id") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.GeneratedValue") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.OneToOne") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke $r42.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.ManyToOne") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke $r43.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.JoinColumn") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke $r44.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.Enumerated") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke $r45.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.Version") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setFieldName(java.lang.String)>(r83) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>(r85) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setColumnDefinition(java.lang.String)>(r91) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setColumnDefinition(java.lang.String)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setWidth(int)>($i6) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setWidth(int)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>($z7) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>($z6) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setId(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setId(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedId(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedId(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollection(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollection(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionColumnName(java.lang.String)>(r107) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionEager(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionEager(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeign(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeign(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>(r115) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>($z5) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>($z4) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setDataType(com.j256.ormlite.field.DataType)>($r13) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setDataType(com.j256.ormlite.field.DataType)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setDataType(com.j256.ormlite.field.DataType)>($r11) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setDataType(com.j256.ormlite.field.DataType)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setVersion(boolean)>(1) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setVersion(boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setDataPersister(com.j256.ormlite.field.DataPersister)>($r7) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setDataPersister(com.j256.ormlite.field.DataPersister)>
VIRTUAL edge: virtualinvoke $r81.<com.j256.ormlite.field.DatabaseFieldConfig: void setUseGetSet(boolean)>($z17) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUseGetSet(boolean)>
VIRTUAL edge: r83 = virtualinvoke r83.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: r84 = virtualinvoke $r29.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("name", $r30) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r32 = virtualinvoke r84.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r70, $r31) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i3 = virtualinvoke r85.<java.lang.String: int length()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: int length()>
VIRTUAL edge: r88 = virtualinvoke $r86.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("columnDefinition", $r87) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r90 = virtualinvoke r88.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r70, $r89) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i2 = virtualinvoke r91.<java.lang.String: int length()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: int length()>
VIRTUAL edge: r94 = virtualinvoke $r92.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("length", $r93) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r96 = virtualinvoke r94.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r70, $r95) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i6 = virtualinvoke $r97.<java.lang.Integer: int intValue()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: r100 = virtualinvoke $r98.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("nullable", $r99) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r102 = virtualinvoke r100.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r70, $r101) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $z7 = virtualinvoke r103.<java.lang.Boolean: boolean booleanValue()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: r104 = virtualinvoke $r33.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("unique", $r34) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r36 = virtualinvoke r104.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r70, $r35) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $z6 = virtualinvoke r37.<java.lang.Boolean: boolean booleanValue()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r65.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem accessing fields from the @Column annotation for field ") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r3) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: $z3 = virtualinvoke $r19.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r20) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: r106 = virtualinvoke $r14.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("name", $r15) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r17 = virtualinvoke r106.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r75, $r16) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke r107.<java.lang.String: int length()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: int length()>
VIRTUAL edge: r110 = virtualinvoke $r108.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("fetch", $r109) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: r112 = virtualinvoke r110.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r75, $r111) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Date: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.In: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.Where: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Time: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.FieldType: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.Not: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke r112.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke $r18.<java.lang.String: boolean equals(java.lang.Object)>("EAGER") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r59.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem accessing fields from the @JoinColumn annotation for field ") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r114 = virtualinvoke $r21.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("name", $r22) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r24 = virtualinvoke r114.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r75, $r23) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i1 = virtualinvoke r115.<java.lang.String: int length()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: int length()>
VIRTUAL edge: r118 = virtualinvoke $r116.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("nullable", $r117) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r120 = virtualinvoke r118.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r75, $r119) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $z5 = virtualinvoke r121.<java.lang.Boolean: boolean booleanValue()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: r122 = virtualinvoke $r25.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("unique", $r26) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r28 = virtualinvoke r122.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r75, $r27) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $z4 = virtualinvoke r123.<java.lang.Boolean: boolean booleanValue()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r53.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r54 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem accessing fields from the @JoinColumn annotation for field ") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r125 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("value", $r9) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: r126 = virtualinvoke r125.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r76, $r10) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Date: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.In: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.Where: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.sql.Time: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.field.FieldType: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <com.j256.ormlite.stmt.query.Not: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke r126.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $z1 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>("STRING") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r47.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Problem accessing fields from the @Enumerated annotation for field ") in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: com.j256.ormlite.field.DatabaseFieldConfig createFieldConfig(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r15 = virtualinvoke r0.<java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>() in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>("javax.persistence.Entity") in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r16 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("name", $r2) in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: $r4 = virtualinvoke r16.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r14, $r3) in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $i0 = virtualinvoke r17.<java.lang.String: int length()>() in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not get entity name from class ") in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r13, $r8) in <com.j256.ormlite.misc.JavaxPersistence: java.lang.String getEntityName(java.lang.Class)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.Exists: void <init>(com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("EXISTS (") in <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void appendStatementString(java.lang.StringBuilder,java.util.List)>(r0, r3) in <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void appendStatementString(java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.InSubQuery: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper,boolean)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT IN ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void appendStatementString(java.lang.StringBuilder,java.util.List)>(r0, r3) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void appendStatementString(java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("There must be only 1 result column in sub-query but we found ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.sql.SQLException: void <init>(java.lang.String)>($r25) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Outer column ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r15) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not the same type as inner column ") in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r18) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.sql.SQLException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.IsNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS NULL ") in <com.j256.ormlite.stmt.query.IsNull: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.IsNull: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause,com.j256.ormlite.stmt.query.Clause[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.ManyClause: void <init>(com.j256.ormlite.stmt.query.Clause[],java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(") in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r5.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r18.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r14.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r3, r0, r4) in <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, r3, 1) in <com.j256.ormlite.stmt.query.SimpleComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.String)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.j256.ormlite.stmt.query.SimpleComparison: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.SimpleComparison: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SimpleComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.IsNotNull: void <init>(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IS NOT NULL ") in <com.j256.ormlite.stmt.query.IsNotNull: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.Raw: void <init>(java.lang.String,com.j256.ormlite.stmt.ArgumentHolder[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r6) in <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.Not: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.Not: void <init>(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>(r1) in <com.j256.ormlite.stmt.query.Not: void <init>(com.j256.ormlite.stmt.query.Clause)> ==> <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("NOT operation already has a comparison set") in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT operation can only work with comparison SQL clauses, not ") in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r7) in <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Clause has not been set in NOT operation") in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(NOT ") in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(NOT ") in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r14.<com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String getColumnName()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.j256.ormlite.stmt.query.Comparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String getColumnName()>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.stmt.query.Comparison: void appendOperation(java.lang.StringBuilder)>(r3) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendOperation(java.lang.StringBuilder)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.stmt.query.Comparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r5, r3, r10) in <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.Not: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT comparison ") in <com.j256.ormlite.stmt.query.Not: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.j256.ormlite.stmt.query.Not: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.Not: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Iterable,boolean)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object[],boolean)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IN ") in <com.j256.ormlite.stmt.query.In: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT IN ") in <com.j256.ormlite.stmt.query.In: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(40) in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.CloseableWrappedIterableImpl: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.BaseDaoImpl$5: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.RawResultsImpl: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.BaseDaoImpl$3: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.BaseDaoImpl$4: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.BaseDaoImpl$2: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.sql.SQLException: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.lang.Iterable: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("one of the IN values for \'") in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is null") in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17) in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r8, $r10, r0, r9, r6) in <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.In: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.In: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>(r1, r2, null, 1) in <com.j256.ormlite.stmt.query.Between: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BETWEEN ") in <com.j256.ormlite.stmt.query.Between: void appendOperation(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BETWEEN low value for \'") in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r21) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is null") in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BETWEEN high value for \'") in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is null") in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r11.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r17) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.query.Between: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r3, $r7, r4, r5, $r6) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.query.Between: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r3, $r10, r4, r5, $r9) in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("AND ") in <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.Between: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.query.Between: java.lang.String getColumnName()> ==> <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r1, r2, r3) in <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object first()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(0) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object first()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>($i2) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i3 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object nextThrow()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i4) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object nextThrow()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object current()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i3) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object current()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i4 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object previous()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i5) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object previous()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i5 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object moveRelative(int)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i6) in <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object moveRelative(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("next() must be called before remove()") in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("current results position (") in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") is out of bounds") in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r15) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object remove(int)>($i3) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.util.ArrayList: java.lang.Object remove(int)>
INTERFACE edge: interfaceinvoke $r9.<com.j256.ormlite.dao.Dao: int delete(java.lang.Object)>(r5) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r17) in <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r29.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: r17 = virtualinvoke $r13.<com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)>(r2, $r30) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)>
INTERFACE edge: r18 = interfaceinvoke r3.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r14, r17) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
INTERFACE edge: r18 = interfaceinvoke r3.<com.j256.ormlite.dao.ObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>($r14, r17) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.ObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>($r5, r20, r19) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<com.j256.ormlite.dao.ObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>($r5, r20, r19) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)>
VIRTUAL edge: r19 = virtualinvoke $r4.<com.j256.ormlite.table.TableInfo: java.lang.Object createObject()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Object createObject()>
VIRTUAL edge: $z1 = virtualinvoke r22.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
VIRTUAL edge: r23 = virtualinvoke r22.<com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)>(r2, $r31) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object resultToJava(com.j256.ormlite.support.DatabaseResults,java.util.Map)>
VIRTUAL edge: $r7 = virtualinvoke r22.<com.j256.ormlite.field.FieldType: java.lang.reflect.Field getField()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: java.lang.reflect.Field getField()>
VIRTUAL edge: virtualinvoke r22.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r19, $r12, 1, r3) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: virtualinvoke r22.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r19, r23, 0, r3) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r23.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
VIRTUAL edge: r27 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)>(r19, r20, 0) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.dao.BaseForeignCollection buildForeignCollection(java.lang.Object,java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke r26.<com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>(r19, r27, 0, r3) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.field.FieldType: void assignField(java.lang.Object,java.lang.Object,boolean,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection: com.j256.ormlite.dao.CloseableIterator seperateIteratorThrow()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build lazy iterator for ") in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r10 = interfaceinvoke $r9.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
VIRTUAL edge: $r11 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r10) in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r12, $r3) in <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator closeableIterator()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: java.util.Iterator iterator()> ==> <com.j256.ormlite.dao.LazyForeignCollection$1: com.j256.ormlite.dao.CloseableIterator iterator()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.LoggerFactory$LogType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)>(r1) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLog(java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)>
CLINIT edge: $r8 = new com.j256.ormlite.logger.LocalLog in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
STATIC edge: r16 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r10 = <com.j256.ormlite.logger.Log$Level: com.j256.ormlite.logger.Log$Level WARNING> in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <com.j256.ormlite.logger.Log$Level: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailableTestClass()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailable()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailableTestClass()>
STATIC edge: staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r1) in <com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailableTestClass()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>(r0, r1, r5) in <com.j256.ormlite.stmt.query.BaseComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r1, $r5, r2, r3, $r4) in <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r1, $r5, r2, r3, $r4) in <com.j256.ormlite.stmt.query.BaseComparison: void appendValue(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.IsNull: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SetValue: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.In: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.Between: void appendOperation(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.query.BaseComparison: void appendOperation(java.lang.StringBuilder)>($r0) in <com.j256.ormlite.stmt.query.BaseComparison: java.lang.String toString()> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendOperation(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.NullArgHolder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set null on ") in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>($r6) in <com.j256.ormlite.stmt.NullArgHolder: void setValue(java.lang.Object)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: void <init>()>() in <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.BaseFieldConverter: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r5) in <com.j256.ormlite.field.types.BaseDataType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.BooleanObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.DoubleObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.FloatObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.DateTimeType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.IntegerObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.LongObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.ShortObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.ByteObjectType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.EnumIntegerType: boolean isEscapedValue()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: boolean isEscapedValue()>() in <com.j256.ormlite.field.types.BaseDataType: boolean isEscapedDefaultValue()> ==> <com.j256.ormlite.field.types.DateLongType: boolean isEscapedValue()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Should not have tried to generate this type") in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object generateId()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.field.types.BaseDataType: boolean dataIsEqual(java.lang.Object,java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.LongObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.VoidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.StringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDataType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r1, r2) in <com.j256.ormlite.field.types.BaseDataType: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.Date: void <init>(long)>(l0) in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l1 = virtualinvoke $r1.<java.util.Date: long getTime()>() in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.sql.Timestamp: long getTime()>
SPECIAL edge: specialinvoke $r3.<java.util.Date: void <init>(long)>($l3) in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.util.Date: void <init>(long)>
SPECIAL edge: specialinvoke $r2.<java.util.Date: void <init>(long)>(l0) in <com.j256.ormlite.field.types.BaseDateType: java.lang.Object moveToNextValue(java.lang.Object)> ==> <java.util.Date: void <init>(long)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.types.BaseDateType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1: void <init>(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>(r0) in <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1: void <init>(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.reflect.Field: java.lang.Class getType()>() in <com.j256.ormlite.field.types.BaseEnumType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.reflect.Field: java.lang.Class getType()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.Class: boolean isEnum()>() in <com.j256.ormlite.field.types.BaseEnumType: boolean isValidForField(java.lang.reflect.Field)> ==> <java.lang.Class: boolean isEnum()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MappedStatement: ") in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("generated key has already been set to ") in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", now set to ") in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8) in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void addKey(java.lang.Number)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r19 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r19.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r19.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.util.regex.Matcher: boolean matches()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.util.regex.Matcher: boolean matches()>
VIRTUAL edge: $i0 = virtualinvoke $r9.<com.j256.ormlite.logger.Log$Level: int ordinal()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i1 = virtualinvoke r18.<com.j256.ormlite.logger.Log$Level: int ordinal()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r4 = virtualinvoke r21.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.String: java.lang.String toUpperCase()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level \'") in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r21) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not found") in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r17, $r10) in <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0) in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.io.PrintStream: void <init>(java.io.File)>($r2) in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.io.PrintStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Log file ") in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was not found") in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>($r11, $r4) in <com.j256.ormlite.logger.LocalLog: void openLogFile(java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.j256.ormlite.logger.Log$Level: boolean isEnabled(com.j256.ormlite.logger.Log$Level)>(r1) in <com.j256.ormlite.logger.LocalLog: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)> ==> <com.j256.ormlite.logger.Log$Level: boolean isEnabled(com.j256.ormlite.logger.Log$Level)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>(r1, r2, null) in <com.j256.ormlite.logger.LocalLog: void log(com.j256.ormlite.logger.Log$Level,java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>
CLINIT edge: $r4 = <com.j256.ormlite.logger.LocalLog: java.lang.ThreadLocal dateFormatThreadLocal> in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <com.j256.ormlite.logger.LocalLog: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>(r1, r2, r3) in <com.j256.ormlite.logger.LocalLog: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.logger.LoggerFactory$LogType$1: com.j256.ormlite.logger.Log createLog(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.BaseFieldConverter: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.StringType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.LongObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.VoidType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>(r1, r2, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object resultToSqlArg(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.SqlDateType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.TimeStampType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, r3, i0) in <com.j256.ormlite.field.BaseFieldConverter: java.lang.Object resultToJava(com.j256.ormlite.field.FieldType,com.j256.ormlite.support.DatabaseResults,int)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.logger.LocalLog$PatternLevel: void <init>(java.util.regex.Pattern,com.j256.ormlite.logger.Log$Level)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(i0, 0.75F, 1) in <com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap: void <init>(int)> ==> <java.util.LinkedHashMap: void <init>(int,float,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.LruObjectCache: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.ConcurrentHashMap: void <init>()>() in <com.j256.ormlite.dao.LruObjectCache: void <init>(int)> ==> <java.util.concurrent.ConcurrentHashMap: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap: void <init>(int)>($i0) in <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)> ==> <com.j256.ormlite.dao.LruObjectCache$LimitedLinkedHashMap: void <init>(int)>
VIRTUAL edge: virtualinvoke $r5.<java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r8) in <com.j256.ormlite.dao.LruObjectCache: void registerClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object get(java.lang.Class,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r4) in <com.j256.ormlite.dao.LruObjectCache: void put(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clear(java.lang.Class)> ==> <java.util.HashMap: void clear()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.LinkedHashMap: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke r5.<java.util.Map: void clear()>() in <com.j256.ormlite.dao.LruObjectCache: void clearAll()> ==> <java.util.HashMap: void clear()>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r3) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.dao.LruObjectCache: java.lang.Object updateId(java.lang.Class,java.lang.Object,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: r2 = specialinvoke r0.<com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>(r1) in <com.j256.ormlite.dao.LruObjectCache: int size(java.lang.Class)> ==> <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int size(java.lang.Class)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int size(java.lang.Class)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int size(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r5.<java.util.Map: int size()>() in <com.j256.ormlite.dao.LruObjectCache: int sizeAll()> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void <init>(com.j256.ormlite.dao.Dao)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.dao.RuntimeExceptionDao: void <init>(com.j256.ormlite.dao.Dao)>(r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <init>(com.j256.ormlite.dao.Dao)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.dao.RuntimeExceptionDao: void <init>(com.j256.ormlite.dao.Dao)>(r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RuntimeExceptionDao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <init>(com.j256.ormlite.dao.Dao)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object queryForId(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForId(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForId threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForId(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
CLINIT edge: $r3 = <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.logger.Logger logger> in <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void <clinit>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForFirst threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForFirst(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.util.List queryForAll()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForAll()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForAll()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r7, "queryForAll threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForAll()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForAll()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: java.util.List queryForEq(java.lang.String,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForEq(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForEq threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r14, $r10) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForEq(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.util.List queryForMatching(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForMatching threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatching(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.util.List queryForMatchingArgs(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatchingArgs(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForMatchingArgs threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForMatchingArgs(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.util.List queryForFieldValues(java.util.Map)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValues(java.util.Map)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r8, "queryForFieldValues threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValues(java.util.Map)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValues(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.util.List queryForFieldValuesArgs(java.util.Map)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValuesArgs(java.util.Map)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValuesArgs(java.util.Map)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r8, "queryForFieldValuesArgs threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValuesArgs(java.util.Map)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List queryForFieldValuesArgs(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object queryForSameId(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object queryForSameId(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryForSameId threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object queryForSameId(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.QueryBuilder queryBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.stmt.UpdateBuilder updateBuilder()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.UpdateBuilder updateBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.UpdateBuilder updateBuilder()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.stmt.DeleteBuilder deleteBuilder()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.DeleteBuilder deleteBuilder()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.DeleteBuilder deleteBuilder()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("query threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.util.List query(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int create(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int create(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("create threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int create(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object createIfNotExists(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object createIfNotExists(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createIfNotExists threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object createIfNotExists(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createOrUpdate threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.Dao$CreateOrUpdateStatus createOrUpdate(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int update(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int updateId(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int updateId(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateId threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateId(java.lang.Object,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int update(com.j256.ormlite.stmt.PreparedUpdate)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int update(com.j256.ormlite.stmt.PreparedUpdate)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("update threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int update(com.j256.ormlite.stmt.PreparedUpdate)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int refresh(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int refresh(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("refresh threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int refresh(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int delete(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delete threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int deleteById(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int deleteById(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleteById threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteById(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int delete(java.util.Collection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(java.util.Collection)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delete threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(java.util.Collection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int deleteIds(java.util.Collection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int deleteIds(java.util.Collection)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("deleteIds threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int deleteIds(java.util.Collection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: int delete(com.j256.ormlite.stmt.PreparedDelete)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.dao.BaseDaoImpl: int delete(com.j256.ormlite.stmt.PreparedDelete)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("delete threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: int delete(com.j256.ormlite.stmt.PreparedDelete)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator(int)>(i0) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableWrappedIterable getWrappedIterable(com.j256.ormlite.stmt.PreparedQuery)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: void closeLastIterator()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void closeLastIterator()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void closeLastIterator()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r6, "closeLastIterator threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void closeLastIterator()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: void closeLastIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iterator threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)>(r1, i0) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("iterator threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.CloseableIterator iterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryRaw threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r14, $r10) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r5) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])>(r1, r2, r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryRaw threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r15, $r11) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.dao.RawRowMapper,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])>(r1, r2, r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("queryRaw threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r15, $r11) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r6) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.GenericRawResults queryRaw(java.lang.String,com.j256.ormlite.field.DataType[],java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int executeRaw(java.lang.String,java.lang.String[])>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: int executeRaw(java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("executeRaw threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: int executeRaw(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: int updateRaw(java.lang.String,java.lang.String[])>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.BaseDaoImpl: int updateRaw(java.lang.String,java.lang.String[])>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("updateRaw threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: int updateRaw(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object callBatchTasks(java.util.concurrent.Callable)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("callBatchTasks threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r4, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object callBatchTasks(java.util.concurrent.Callable)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.String objectToString(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.String objectToString(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.String objectToString(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<com.j256.ormlite.dao.Dao: boolean objectsEqual(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean objectsEqual(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("objectsEqual threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" and ") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r15, $r11) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean objectsEqual(java.lang.Object,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object extractId(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object extractId(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("extractId threw exception on: ") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object extractId(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Class getDataClass()> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Class getDataClass()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: boolean isUpdatable()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isUpdatable()> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean isUpdatable()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: boolean isTableExists()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isTableExists()> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean isTableExists()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r6, "isTableExists threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isTableExists()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isTableExists()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $l0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: long countOf()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf()> ==> <com.j256.ormlite.dao.BaseDaoImpl: long countOf()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r6, "countOf threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $l0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: long countOf(com.j256.ormlite.stmt.PreparedQuery)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.BaseDaoImpl: long countOf(com.j256.ormlite.stmt.PreparedQuery)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("countOf threw exception on ") in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: long countOf(com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("getEmptyForeignCollection threw exception on ") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ForeignCollection getEmptyForeignCollection(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: void setObjectCache(boolean)>(z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(boolean)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setObjectCache(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.ObjectCache getObjectCache()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.ObjectCache getObjectCache()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.ObjectCache getObjectCache()>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void setObjectCache(com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setObjectCache threw exception on ") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setObjectCache(com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: void clearObjectCache()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void clearObjectCache()> ==> <com.j256.ormlite.dao.BaseDaoImpl: void clearObjectCache()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.BaseDaoImpl: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r8, "mapSelectStarRow threw exception on results") in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r4) in <com.j256.ormlite.dao.RuntimeExceptionDao: java.lang.Object mapSelectStarRow(com.j256.ormlite.support.DatabaseResults)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r7, "getSelectStarRowMapper threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.stmt.GenericRowMapper getSelectStarRowMapper()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: boolean idExists(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean idExists(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("idExists threw exception on ") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean idExists(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.support.DatabaseConnection startThreadConnection()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.support.DatabaseConnection startThreadConnection()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.support.DatabaseConnection startThreadConnection()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r7, "startThreadConnection() threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.support.DatabaseConnection startThreadConnection()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.support.DatabaseConnection startThreadConnection()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("endThreadConnection(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: void endThreadConnection(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: void setAutoCommit(boolean)>(z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void setAutoCommit(boolean)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAutoCommit(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r12, $r8) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)>(r1, z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("setAutoCommit(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r15, $r11) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: void setAutoCommit(com.j256.ormlite.support.DatabaseConnection,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: boolean isAutoCommit()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit()> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean isAutoCommit()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r6, "isAutoCommit() threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit()> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("isAutoCommit(") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: boolean isAutoCommit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: void commit(com.j256.ormlite.support.DatabaseConnection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void commit(com.j256.ormlite.support.DatabaseConnection)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("commit(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: void commit(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r2.<com.j256.ormlite.dao.Dao: void rollBack(com.j256.ormlite.support.DatabaseConnection)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void rollBack(com.j256.ormlite.support.DatabaseConnection)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("rollBack(") in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") threw exception") in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>($r13, $r9) in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r3) in <com.j256.ormlite.dao.RuntimeExceptionDao: void rollBack(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.j256.ormlite.dao.Dao: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()>() in <com.j256.ormlite.dao.RuntimeExceptionDao: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.RawRowMapper getRawRowMapper()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Driver class was not found for ") in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" database.  Missing jar with class ") in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void loadDriver()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: r5 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: i2 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: int getWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: int getWidth()>
VIRTUAL edge: $z6 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedIdSequence()>
VIRTUAL edge: $z5 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: $z4 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isId()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isId()>
VIRTUAL edge: $z7 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: r9 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>
VIRTUAL edge: $z2 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isCanBeNull()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isCanBeNull()>
VIRTUAL edge: $z3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isUnique()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isUnique()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void appendIntegerType(java.lang.StringBuilder,int)>(r1, i2) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void appendIntegerType(java.lang.StringBuilder,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void appendFloatType(java.lang.StringBuilder,int)>(r1, i2) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void appendFloatType(java.lang.StringBuilder,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void appendDoubleType(java.lang.StringBuilder,int)>(r1, i2) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void appendDoubleType(java.lang.StringBuilder,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)>(r1, r2, r9) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void appendCanBeNull(java.lang.StringBuilder,com.j256.ormlite.field.FieldType)>(r1, r2) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void appendCanBeNull(java.lang.StringBuilder,com.j256.ormlite.field.FieldType)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)>(r1, r2, r11, r12) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DEFAULT ") in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("NOT NULL ") in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.BaseDataType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.UuidType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.DateStringType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.BigIntegerType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.LongStringType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.StringType: int getDefaultWidth()>
INTERFACE edge: i2 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: int getDefaultWidth()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.EnumStringType: int getDefaultWidth()>
INTERFACE edge: $r7 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.BaseDataType: com.j256.ormlite.field.SqlType getSqlType()>
INTERFACE edge: $r21 = interfaceinvoke r5.<com.j256.ormlite.field.DataPersister: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.types.BaseDataType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: $i0 = virtualinvoke $r7.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown SQL-type ") in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r21) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r23) in <com.j256.ormlite.db.BaseDatabaseType: void appendColumnArg(java.lang.String,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: $z3 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>() in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z4 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: boolean isId()>() in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isId()>
VIRTUAL edge: $r8 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>(48) in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("PRIMARY KEY (") in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4) in <com.j256.ormlite.db.BaseDatabaseType: void addPrimaryKeySql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: boolean isUniqueCombo()>() in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: boolean isUniqueCombo()>
VIRTUAL edge: $r8 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>(int)>(48) in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNIQUE (") in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r4) in <com.j256.ormlite.db.BaseDatabaseType: void addUniqueComboSql(com.j256.ormlite.field.FieldType[],java.util.List,java.util.List,java.util.List,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedWord(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedWord(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedWord(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(96) in <com.j256.ormlite.db.BaseDatabaseType: void appendEscapedEntityName(java.lang.StringBuilder,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.db.BaseDatabaseType: java.lang.String generateIdSequenceName(java.lang.String,com.j256.ormlite.field.FieldType)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("LIMIT ") in <com.j256.ormlite.db.BaseDatabaseType: void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) in <com.j256.ormlite.db.BaseDatabaseType: void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.db.BaseDatabaseType: void appendLimitValue(java.lang.StringBuilder,long,java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("OFFSET ") in <com.j256.ormlite.db.BaseDatabaseType: void appendOffsetValue(java.lang.StringBuilder,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) in <com.j256.ormlite.db.BaseDatabaseType: void appendOffsetValue(java.lang.StringBuilder,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.db.BaseDatabaseType: void appendOffsetValue(java.lang.StringBuilder,long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>() in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object javaToSqlArg(com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: b0 = virtualinvoke $r1.<java.lang.Byte: byte byteValue()>() in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)> ==> <java.lang.Byte: byte byteValue()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>(r1, $r3, i1) in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object resultStringToJava(com.j256.ormlite.field.FieldType,java.lang.String,int)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object sqlArgToJava(com.j256.ormlite.field.FieldType,java.lang.Object,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.db.BaseDatabaseType: void <init>()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: void <init>()> ==> <com.j256.ormlite.db.BaseDatabaseType: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke r0.<com.j256.ormlite.field.DataPersister: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: $r6 = specialinvoke r5.<com.j256.ormlite.db.BaseDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)>(r0) in <com.j256.ormlite.db.BaseSqliteDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.db.BaseDatabaseType: com.j256.ormlite.field.FieldConverter getFieldConverter(com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --field-end--") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r3.<java.lang.String: int length()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("#") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --field-start--") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r14 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", -2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DatabaseFieldConfig reading from stream cannot parse line: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: com.j256.ormlite.field.DatabaseFieldConfig fromReader(java.io.BufferedReader)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --field-start--") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r143 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("fieldName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r139 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("columnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r135 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("dataPersister") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r122 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("defaultValue") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r118 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("width") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r114 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("canBeNull") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r111 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("id") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r108 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("generatedId") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r104 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("generatedIdSequence") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r101 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreign") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r98 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("useGetSet") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r88 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("unknownEnumValue") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r85 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("throwIfNull") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r81 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("format") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r78 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("unique") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r75 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("uniqueCombo") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r72 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("indexName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r69 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("uniqueIndexName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r66 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignAutoRefresh") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r62 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("maxForeignAutoRefreshLevel") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r57 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("persisterClass") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r54 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("allowGeneratedIdInsert") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r50 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("columnDefinition") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r47 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignAutoCreate") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r44 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("version") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r41 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r38 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollection") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r35 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollectionEager") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r31 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollectionMaxEagerLevel") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r27 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollectionColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r23 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollectionOrderColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r19 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("foreignCollectionForeignFieldName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --field-end--") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>
VIRTUAL edge: $r145 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>
VIRTUAL edge: $r141 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnName()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: $r134 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: $r129 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>
VIRTUAL edge: $r124 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>
VIRTUAL edge: $i5 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getWidth()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>
VIRTUAL edge: $z14 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isCanBeNull()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isId()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isId()>
VIRTUAL edge: $z2 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isGeneratedId()>
VIRTUAL edge: $r8 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: $r106 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getGeneratedIdSequence()>
VIRTUAL edge: $z3 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z4 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUseGetSet()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUseGetSet()>
VIRTUAL edge: $r9 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>
VIRTUAL edge: $r90 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>
VIRTUAL edge: $r95 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Enum getUnknownEnumValue()>
VIRTUAL edge: $z5 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>
VIRTUAL edge: $r10 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>
VIRTUAL edge: $r83 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFormat()>
VIRTUAL edge: $z6 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUnique()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUnique()>
VIRTUAL edge: $z7 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isUniqueCombo()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isUniqueCombo()>
VIRTUAL edge: r148 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getIndexName(java.lang.String)>(r11) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getIndexName(java.lang.String)>
VIRTUAL edge: r149 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getUniqueIndexName(java.lang.String)>(r11) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getUniqueIndexName(java.lang.String)>
VIRTUAL edge: $z8 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
VIRTUAL edge: $i1 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>
VIRTUAL edge: $i4 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getMaxForeignAutoRefreshLevel()>
VIRTUAL edge: $r12 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>
VIRTUAL edge: $r59 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.Class getPersisterClass()>
VIRTUAL edge: $z9 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $r14 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>
VIRTUAL edge: $r52 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getColumnDefinition()>
VIRTUAL edge: $z10 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoCreate()>
VIRTUAL edge: $z11 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isVersion()>
VIRTUAL edge: r150 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignColumnName()>
VIRTUAL edge: $z12 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
VIRTUAL edge: $z13 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollectionEager()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollectionEager()>
VIRTUAL edge: $i2 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>
VIRTUAL edge: $i3 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: int getForeignCollectionMaxEagerLevel()>
VIRTUAL edge: $r15 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionColumnName()>
VIRTUAL edge: $r29 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionColumnName()>
VIRTUAL edge: $r16 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>
VIRTUAL edge: $r25 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionOrderColumnName()>
VIRTUAL edge: $r17 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>
VIRTUAL edge: $r21 = virtualinvoke r2.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>
VIRTUAL edge: $r144 = virtualinvoke $r143.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: $r144 = virtualinvoke $r143.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r144.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r145) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r144.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r145) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r140 = virtualinvoke $r139.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r140 = virtualinvoke $r139.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r140.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r141) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r140.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r141) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r133 = virtualinvoke r132.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: $r137 = virtualinvoke r132.<com.j256.ormlite.field.DataType: java.lang.String name()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r136 = virtualinvoke $r135.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r136 = virtualinvoke $r135.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r136.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r137) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r136.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r137) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r127.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r128 = virtualinvoke $r127.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown data persister field: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r130 = virtualinvoke $r128.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r129) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r131 = virtualinvoke $r130.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r126.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r131) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r123 = virtualinvoke $r122.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r123 = virtualinvoke $r122.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r123.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r124) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r123.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r124) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r119 = virtualinvoke $r118.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r119 = virtualinvoke $r118.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r119.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r120) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r119.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r120) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r115 = virtualinvoke $r114.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r115 = virtualinvoke $r114.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r115.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r116) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r115.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r116) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r112 = virtualinvoke $r111.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r112 = virtualinvoke $r111.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r112.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r112.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r109 = virtualinvoke $r108.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r109 = virtualinvoke $r108.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r109.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r109.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r105 = virtualinvoke $r104.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r105 = virtualinvoke $r104.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r105.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r106) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r105.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r106) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r102 = virtualinvoke $r101.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r102 = virtualinvoke $r101.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r102.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r102.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r99 = virtualinvoke $r98.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r99 = virtualinvoke $r98.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r99.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r99.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r89 = virtualinvoke $r88.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r89 = virtualinvoke $r88.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: $r91 = virtualinvoke $r90.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r92 = virtualinvoke $r91.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r93 = virtualinvoke $r89.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r92) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r93 = virtualinvoke $r89.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r92) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("#") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r94 = virtualinvoke $r93.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("#") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r96 = virtualinvoke $r95.<java.lang.Enum: java.lang.String name()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: virtualinvoke $r94.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r96) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r94.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r96) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r86 = virtualinvoke $r85.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r86.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r86.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r82 = virtualinvoke $r81.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r82 = virtualinvoke $r81.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r82.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r83) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r82.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r83) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r79 = virtualinvoke $r78.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r79 = virtualinvoke $r78.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r79.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r79.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r76 = virtualinvoke $r75.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r76 = virtualinvoke $r75.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r76.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r76.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r73 = virtualinvoke $r72.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r73.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r148) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r73.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r148) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r70 = virtualinvoke $r69.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r70 = virtualinvoke $r69.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r70.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r149) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r70.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r149) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r67 = virtualinvoke $r66.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r67.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r67.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r63 = virtualinvoke $r62.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r63 = virtualinvoke $r62.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r63.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r64) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r63.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r64) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r58.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r60) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r58.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r60) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r55 = virtualinvoke $r54.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r55 = virtualinvoke $r54.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r55.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r55.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r51 = virtualinvoke $r50.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r51.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r52) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r51.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r52) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r48.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r48.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r45.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r45.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r42 = virtualinvoke $r41.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r42.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r150) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r42.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>(r150) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r39.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r39.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r36.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r36.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>("true") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r32.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r33) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r32.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r33) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r28.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r29) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r28.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r29) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r24.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r25) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r24.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r25) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r20.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r21) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r20.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r21) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper: void <init>(java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>()> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(java.lang.String)>(r1) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.String,java.lang.Object)> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.String,java.lang.Object)> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(com.j256.ormlite.field.SqlType)>(r1) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(com.j256.ormlite.field.SqlType,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>(com.j256.ormlite.field.SqlType)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(com.j256.ormlite.field.SqlType,java.lang.Object)> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(com.j256.ormlite.field.SqlType,java.lang.Object)> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.Object)> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void <init>(java.lang.Object)> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper: void <init>(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)> ==> <com.j256.ormlite.stmt.ThreadLocalSelectArg$ValueWrapper: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.ThreadLocal: void set(java.lang.Object)>($r1) in <com.j256.ormlite.stmt.ThreadLocalSelectArg: void setValue(java.lang.Object)> ==> <java.lang.ThreadLocal: void set(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.support.BaseConnectionSource$NestedConnection: void <init>(com.j256.ormlite.support.DatabaseConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.support.BaseConnectionSource: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.support.BaseConnectionSource: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.support.BaseConnectionSource: com.j256.ormlite.support.DatabaseConnection getSpecialConnection()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: java.util.List loadDatabaseConfigFromReader(java.io.BufferedReader)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r3) in <com.j256.ormlite.table.DatabaseTableConfigLoader: java.util.List loadDatabaseConfigFromReader(java.io.BufferedReader)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.table.DatabaseTableConfig: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void <init>()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --table-end--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --table-fields-start--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r3.<java.lang.String: int length()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z2 = virtualinvoke r3.<java.lang.String: boolean startsWith(java.lang.String)>("#") in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --table-start--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r14 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", -2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DatabaseTableConfig reading from stream cannot parse line: ") in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.table.DatabaseTableConfigLoader: com.j256.ormlite.table.DatabaseTableConfig fromReader(java.io.BufferedReader)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>(r0, null, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>(r0) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>($r4, null, r1) in <com.j256.ormlite.table.TableUtils: java.util.List getCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>(r0, null, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>(r0) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>(r1, null, r2) in <com.j256.ormlite.table.TableUtils: int dropTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>
VIRTUAL edge: r3 = virtualinvoke r3.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.BaseDaoImpl$1: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void <clinit>()> ==> <com.j256.ormlite.dao.BaseDaoImpl$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("SELECT", 0, 1, 1, 0, 0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("SELECT_LONG", 1, 1, 1, 0, 0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("SELECT_RAW", 2, 1, 1, 0, 0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("UPDATE", 3, 1, 0, 1, 0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("DELETE", 4, 1, 0, 1, 0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>("EXECUTE", 5, 0, 0, 0, 1) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <com.j256.ormlite.misc.TransactionManager: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.FieldType$1: void <init>()>() in <com.j256.ormlite.field.FieldType: void <clinit>()> ==> <com.j256.ormlite.field.FieldType$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r19) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: r15 = virtualinvoke r20.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
VIRTUAL edge: r20 = virtualinvoke r20.<java.lang.Class: java.lang.Class getSuperclass()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.Class getSuperclass()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No fields have a ") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" annotation in ") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] extractFieldTypes(com.j256.ormlite.support.ConnectionSource,java.lang.Class,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.stmt.NullArgHolder: void <init>()>() in <com.j256.ormlite.stmt.query.SetValue: void <clinit>()> ==> <com.j256.ormlite.stmt.NullArgHolder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("STRING", 0, $r1) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("LONG_STRING", 1, $r3) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("STRING_BYTES", 2, $r5) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r6.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BOOLEAN", 3, $r7) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BOOLEAN_OBJ", 4, $r9) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r10.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DATE", 5, $r11) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r12.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DATE_LONG", 6, $r13) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r14.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DATE_STRING", 7, $r15) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r16.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("CHAR", 8, $r17) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r18.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("CHAR_OBJ", 9, $r19) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r20.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BYTE", 10, $r21) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r22.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BYTE_ARRAY", 11, $r23) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r24.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BYTE_OBJ", 12, $r25) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r26.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("SHORT", 13, $r27) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r28.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("SHORT_OBJ", 14, $r29) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r30.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("INTEGER", 15, $r31) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r32.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("INTEGER_OBJ", 16, $r33) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r34.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("LONG", 17, $r35) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r36.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("LONG_OBJ", 18, $r37) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r38.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("FLOAT", 19, $r39) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r40.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("FLOAT_OBJ", 20, $r41) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r42.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DOUBLE", 21, $r43) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r44.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DOUBLE_OBJ", 22, $r45) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r46.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("SERIALIZABLE", 23, $r47) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r48.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("ENUM_STRING", 24, $r49) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r50.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("ENUM_INTEGER", 25, $r51) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r52.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("UUID", 26, $r53) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r54.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BIG_INTEGER", 27, $r55) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r56.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BIG_DECIMAL", 28, $r57) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r58.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("BIG_DECIMAL_NUMERIC", 29, $r59) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r60.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("DATE_TIME", 30, $r61) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r62.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("SQL_DATE", 31, $r63) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r64.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("TIME_STAMP", 32, $r65) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r66.<com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>("UNKNOWN", 33, null) in <com.j256.ormlite.field.DataType: void <clinit>()> ==> <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.HashMap: void <init>()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
INTERFACE edge: r11 = interfaceinvoke r4.<com.j256.ormlite.field.DataPersister: java.lang.Class[] getAssociatedClasses()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Class[] getAssociatedClasses()>
INTERFACE edge: r13 = interfaceinvoke r4.<com.j256.ormlite.field.DataPersister: java.lang.String[] getAssociatedClassNames()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.String[] getAssociatedClassNames()>
INTERFACE edge: r13 = interfaceinvoke r4.<com.j256.ormlite.field.DataPersister: java.lang.String[] getAssociatedClassNames()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.String[] getAssociatedClassNames()>
INTERFACE edge: r14 = interfaceinvoke r4.<com.j256.ormlite.field.DataPersister: java.lang.String[] getAssociatedClassNames()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.String[] getAssociatedClassNames()>
INTERFACE edge: r14 = interfaceinvoke r4.<com.j256.ormlite.field.DataPersister: java.lang.String[] getAssociatedClassNames()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.String[] getAssociatedClassNames()>
VIRTUAL edge: $r9 = virtualinvoke r12.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r4) in <com.j256.ormlite.field.DataPersisterManager: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>() in <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])> ==> <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() in <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])> ==> <java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r7) in <com.j256.ormlite.dao.DaoManager: java.lang.reflect.Constructor findConstructor(java.lang.Class,java.lang.Object[])> ==> <java.lang.Class: boolean isAssignableFrom(java.lang.Class)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.BaseDaoImpl$5: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl$5: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.BaseDaoImpl$4: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r1, r2) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.Dao createDao(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl$4: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: java.lang.Object createDaoFromConfig(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$ClassConnectionSource)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
VIRTUAL edge: r30 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r1, r30) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/j256/ormlite/table/DatabaseTable;") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find public constructor with ConnectionSource, DatabaseTableConfig parameters in class ") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.sql.SQLException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke r14.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r12) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
SPECIAL edge: specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not call the constructor in class ") in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r36) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("created dao for class {} from table config", r30) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao doCreateDao(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: com.j256.ormlite.dao.Dao lookupDao(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) in <com.j256.ormlite.dao.DaoManager: void removeDaoToClassMap(com.j256.ormlite.dao.DaoManager$ClassConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.j256.ormlite.dao.DaoManager: void addDaoToTableMap(com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource,com.j256.ormlite.dao.Dao)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: $r2 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)>(r1, i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$200(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)>(i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator access$100(com.j256.ormlite.dao.BaseDaoImpl,int)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("STRING", 0) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("LONG_STRING", 1) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("DATE", 2) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("BOOLEAN", 3) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("CHAR", 4) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("BYTE", 5) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("BYTE_ARRAY", 6) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("SHORT", 7) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("INTEGER", 8) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r9.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("LONG", 9) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r10.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("FLOAT", 10) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r11.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("DOUBLE", 11) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r12.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("SERIALIZABLE", 12) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r13.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("BLOB", 13) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r14.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("BIG_DECIMAL", 14) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r15.<com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>("UNKNOWN", 15) in <com.j256.ormlite.field.SqlType: void <clinit>()> ==> <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.String: int length()>() in <com.j256.ormlite.field.DatabaseFieldConfig: com.j256.ormlite.field.DatabaseFieldConfig fromForeignCollection(com.j256.ormlite.db.DatabaseType,java.lang.reflect.Field,com.j256.ormlite.field.ForeignCollectionField)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r8 = virtualinvoke r3.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.String: java.lang.String substring(int,int)>(0, 1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String toUpperCase()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r7 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String substring(int)>(1) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r10 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String methodFromField(java.lang.reflect.Field,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String valueIfNotBlank(java.lang.String)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.support.DatabaseConnection: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r6 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedQueryForId: java.lang.String buildStatement(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("TRACE", 0, 1) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("DEBUG", 1, 2) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("INFO", 2, 3) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("WARNING", 3, 4) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r4.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("ERROR", 4, 5) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>("FATAL", 5, 6) in <com.j256.ormlite.logger.Log$Level: void <clinit>()> ==> <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.lang.String: int length()>() in <com.j256.ormlite.logger.Logger: void <clinit>()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r1.<java.lang.Object: void <init>()>() in <com.j256.ormlite.logger.Logger: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailable()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailable()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.j256.ormlite.logger.LoggerFactory$LogType: boolean isAvailable()>() in <com.j256.ormlite.logger.LoggerFactory: com.j256.ormlite.logger.LoggerFactory$LogType findLogType()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType$1: boolean isAvailable()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BooleanType: void <init>()>() in <com.j256.ormlite.field.types.BooleanType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BOOLEAN> in <com.j256.ormlite.field.types.BooleanType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Boolean: java.lang.Class TYPE> in <com.j256.ormlite.field.types.BooleanType: void <init>()> ==> <java.lang.Boolean: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BooleanObjectType: void <init>()>() in <com.j256.ormlite.field.types.BooleanObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BOOLEAN> in <com.j256.ormlite.field.types.BooleanObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.StringBytesType: void <init>()>() in <com.j256.ormlite.field.types.StringBytesType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringBytesType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE_ARRAY> in <com.j256.ormlite.field.types.StringBytesType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.DoubleObjectType: void <init>()>() in <com.j256.ormlite.field.types.DoubleObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DOUBLE> in <com.j256.ormlite.field.types.DoubleObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.FloatObjectType: void <init>()>() in <com.j256.ormlite.field.types.FloatObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType FLOAT> in <com.j256.ormlite.field.types.FloatObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.UuidType: void <init>()>() in <com.j256.ormlite.field.types.UuidType: void <clinit>()> ==> <com.j256.ormlite.field.types.UuidType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.UuidType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.DateTimeType: void <init>()>() in <com.j256.ormlite.field.types.DateTimeType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateTimeType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG> in <com.j256.ormlite.field.types.DateTimeType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSSSSS") in <com.j256.ormlite.field.types.DateStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.field.types.DateStringType: void <init>()>() in <com.j256.ormlite.field.types.DateStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateStringType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.DateStringType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>() in <com.j256.ormlite.field.types.BaseDateType: java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>
VIRTUAL edge: r3 = virtualinvoke r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2) in <com.j256.ormlite.field.types.BaseDateType: java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)> ==> <java.text.DateFormat: java.util.Date parse(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r3) in <com.j256.ormlite.field.types.BaseDateType: java.lang.String normalizeDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>() in <com.j256.ormlite.field.types.BaseDateType: com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig convertDateStringConfig(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDataTypeConfigObj()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>() in <com.j256.ormlite.field.types.BaseDateType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.text.DateFormat getDateFormat()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2) in <com.j256.ormlite.field.types.BaseDateType: java.util.Date parseDateString(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig,java.lang.String)> ==> <java.text.DateFormat: java.util.Date parse(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.IntType: void <init>()>() in <com.j256.ormlite.field.types.IntType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType INTEGER> in <com.j256.ormlite.field.types.IntType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Integer: java.lang.Class TYPE> in <com.j256.ormlite.field.types.IntType: void <init>()> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.IntegerObjectType: void <init>()>() in <com.j256.ormlite.field.types.IntegerObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType INTEGER> in <com.j256.ormlite.field.types.IntegerObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BigIntegerType: void <init>()>() in <com.j256.ormlite.field.types.BigIntegerType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigIntegerType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.BigIntegerType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.LongObjectType: void <init>()>() in <com.j256.ormlite.field.types.LongObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG> in <com.j256.ormlite.field.types.LongObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>("yyyy-MM-dd HH:mm:ss.SSSSSS") in <com.j256.ormlite.field.types.DateType: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.field.types.DateType: void <init>()>() in <com.j256.ormlite.field.types.DateType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DATE> in <com.j256.ormlite.field.types.DateType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.SqlDateType: void <init>()>() in <com.j256.ormlite.field.types.SqlDateType: void <clinit>()> ==> <com.j256.ormlite.field.types.SqlDateType: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>("yyyy-MM-dd") in <com.j256.ormlite.field.types.SqlDateType: void <clinit>()> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: void <init>(java.lang.String)>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DATE> in <com.j256.ormlite.field.types.SqlDateType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.TimeStampType: void <init>()>() in <com.j256.ormlite.field.types.TimeStampType: void <clinit>()> ==> <com.j256.ormlite.field.types.TimeStampType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DATE> in <com.j256.ormlite.field.types.TimeStampType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.ByteType: void <init>()>() in <com.j256.ormlite.field.types.ByteType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE> in <com.j256.ormlite.field.types.ByteType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Byte: java.lang.Class TYPE> in <com.j256.ormlite.field.types.ByteType: void <init>()> ==> <java.lang.Byte: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.ByteObjectType: void <init>()>() in <com.j256.ormlite.field.types.ByteObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE> in <com.j256.ormlite.field.types.ByteObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.DoubleType: void <init>()>() in <com.j256.ormlite.field.types.DoubleType: void <clinit>()> ==> <com.j256.ormlite.field.types.DoubleType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType DOUBLE> in <com.j256.ormlite.field.types.DoubleType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Double: java.lang.Class TYPE> in <com.j256.ormlite.field.types.DoubleType: void <init>()> ==> <java.lang.Double: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.LongStringType: void <init>()>() in <com.j256.ormlite.field.types.LongStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongStringType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG_STRING> in <com.j256.ormlite.field.types.LongStringType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.StringType: void <init>()>() in <com.j256.ormlite.field.types.StringType: void <clinit>()> ==> <com.j256.ormlite.field.types.StringType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.StringType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.ShortType: void <init>()>() in <com.j256.ormlite.field.types.ShortType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType SHORT> in <com.j256.ormlite.field.types.ShortType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Short: java.lang.Class TYPE> in <com.j256.ormlite.field.types.ShortType: void <init>()> ==> <java.lang.Short: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.ShortObjectType: void <init>()>() in <com.j256.ormlite.field.types.ShortObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType SHORT> in <com.j256.ormlite.field.types.ShortObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.LongType: void <init>()>() in <com.j256.ormlite.field.types.LongType: void <clinit>()> ==> <com.j256.ormlite.field.types.LongType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG> in <com.j256.ormlite.field.types.LongType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Long: java.lang.Class TYPE> in <com.j256.ormlite.field.types.LongType: void <init>()> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BigDecimalStringType: void <init>()>() in <com.j256.ormlite.field.types.BigDecimalStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalStringType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.BigDecimalStringType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.ByteArrayType: void <init>()>() in <com.j256.ormlite.field.types.ByteArrayType: void <clinit>()> ==> <com.j256.ormlite.field.types.ByteArrayType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BYTE_ARRAY> in <com.j256.ormlite.field.types.ByteArrayType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.DateLongType: void <init>()>() in <com.j256.ormlite.field.types.DateLongType: void <clinit>()> ==> <com.j256.ormlite.field.types.DateLongType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType LONG> in <com.j256.ormlite.field.types.DateLongType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.CharacterObjectType: void <init>()>() in <com.j256.ormlite.field.types.CharacterObjectType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType CHAR> in <com.j256.ormlite.field.types.CharacterObjectType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.SerializableType: void <init>()>() in <com.j256.ormlite.field.types.SerializableType: void <clinit>()> ==> <com.j256.ormlite.field.types.SerializableType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType SERIALIZABLE> in <com.j256.ormlite.field.types.SerializableType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.EnumIntegerType: void <init>()>() in <com.j256.ormlite.field.types.EnumIntegerType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumIntegerType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType INTEGER> in <com.j256.ormlite.field.types.EnumIntegerType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot get enum value of \'") in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r5) in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for field ") in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r8) in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.field.types.BaseEnumType: java.lang.Enum enumVal(com.j256.ormlite.field.FieldType,java.lang.Object,java.lang.Enum,java.lang.Enum)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.CharType: void <init>()>() in <com.j256.ormlite.field.types.CharType: void <clinit>()> ==> <com.j256.ormlite.field.types.CharType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType CHAR> in <com.j256.ormlite.field.types.CharType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Character: java.lang.Class TYPE> in <com.j256.ormlite.field.types.CharType: void <init>()> ==> <java.lang.Character: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.EnumStringType: void <init>()>() in <com.j256.ormlite.field.types.EnumStringType: void <clinit>()> ==> <com.j256.ormlite.field.types.EnumStringType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType STRING> in <com.j256.ormlite.field.types.EnumStringType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.FloatType: void <init>()>() in <com.j256.ormlite.field.types.FloatType: void <clinit>()> ==> <com.j256.ormlite.field.types.FloatType: void <init>()>
CLINIT edge: $r3 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType FLOAT> in <com.j256.ormlite.field.types.FloatType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
CLINIT edge: $r2 = <java.lang.Float: java.lang.Class TYPE> in <com.j256.ormlite.field.types.FloatType: void <init>()> ==> <java.lang.Float: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.field.types.BigDecimalNumericType: void <init>()>() in <com.j256.ormlite.field.types.BigDecimalNumericType: void <clinit>()> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: void <init>()>
CLINIT edge: $r2 = <com.j256.ormlite.field.SqlType: com.j256.ormlite.field.SqlType BIG_DECIMAL> in <com.j256.ormlite.field.types.BigDecimalNumericType: void <init>()> ==> <com.j256.ormlite.field.SqlType: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.String getGeneratedIdSequence()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getGeneratedIdSequence()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: java.lang.String buildQueryNextSequence(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isGeneratedId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: boolean isGeneratedId()>
VIRTUAL edge: $z3 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: boolean isSelfGeneratedId()>
VIRTUAL edge: $z4 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: boolean isFieldCreatable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
INTERFACE edge: interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendFieldColumnName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendTableName(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE ") in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("= ?") in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void appendWhereFieldEq(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.mapped.MappedUpdate: boolean isFieldUpdatable(com.j256.ormlite.field.FieldType,com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot delete ") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" because it doesn\'t have an id field defined") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.sql.SQLException: void <init>(java.lang.String)>($r15) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r8 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r0, $r8, r6) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: com.j256.ormlite.stmt.mapped.MappedDeleteCollection build(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,int)> ==> <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
INTERFACE edge: interfaceinvoke r6.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>(r9, r8) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.LruObjectCache: void remove(java.lang.Class,java.lang.Object)>
INTERFACE edge: interfaceinvoke r6.<com.j256.ormlite.dao.ObjectCache: void remove(java.lang.Class,java.lang.Object)>(r9, r8) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.dao.ReferenceObjectCache: void remove(java.lang.Class,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r17.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("delete-collection with statement \'{}\' and {} args, changed {} rows", $r18, $r19, $r20) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("delete-collection arguments: {}", r2) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to run delete collection stmt: ") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: int updateRows(com.j256.ormlite.support.DatabaseConnection,java.lang.Class,com.j256.ormlite.stmt.mapped.MappedDeleteCollection,java.lang.Object[],com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("rolled back savePoint transaction") in <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("rolled back savePoint transaction {}", $r5) in <com.j256.ormlite.misc.TransactionManager: void rollBack(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.logger.Logger: void debug(java.lang.String)>("committed savePoint transaction") in <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("committed savePoint transaction {}", $r5) in <com.j256.ormlite.misc.TransactionManager: void commit(com.j256.ormlite.support.DatabaseConnection,java.sql.Savepoint)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("ANDROID", 0, "android.util.Log", "com.j256.ormlite.android.AndroidLog") in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("COMMONS_LOGGING", 1, "org.apache.commons.logging.LogFactory", "com.j256.ormlite.logger.CommonsLoggingLog") in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("LOG4J", 2, "org.apache.log4j.Logger", "com.j256.ormlite.logger.Log4jLog") in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <java.lang.Class: java.lang.String getName()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.logger.LoggerFactory$LogType$1: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>("LOCAL", 3, $r5, $r7) in <com.j256.ormlite.logger.LoggerFactory$LogType: void <clinit>()> ==> <com.j256.ormlite.logger.LoggerFactory$LogType$1: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.j256.ormlite.logger.LocalLog$1: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <com.j256.ormlite.logger.LocalLog$1: void <init>()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>("/ormliteLocalLog.properties") in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke r3.<java.io.InputStream: void close()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.InputStream: void close()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IO exception reading the log properties file \'/ormliteLocalLog.properties\': ") in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r11.<java.io.PrintStream: void println(java.lang.String)>($r14) in <com.j256.ormlite.logger.LocalLog: void <clinit>()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i7 = virtualinvoke $r14.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i8 = virtualinvoke $r16.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i9 = virtualinvoke $r18.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i10 = virtualinvoke $r20.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i11 = virtualinvoke $r22.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i12 = virtualinvoke $r24.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i13 = virtualinvoke $r26.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i14 = virtualinvoke $r28.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i15 = virtualinvoke $r30.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.j256.ormlite.field.SqlType: int ordinal()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: void <init>()>() in <com.j256.ormlite.db.BaseSqliteDatabaseType: void <clinit>()> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("fieldName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("columnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("dataPersister") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("defaultValue") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("width") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("canBeNull") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("id") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("generatedId") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("generatedIdSequence") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreign") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("useGetSet") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unknownEnumValue") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("throwIfNull") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("format") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("unique") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("uniqueCombo") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z16 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("index") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z17 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("indexName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z18 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("uniqueIndex") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z19 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("uniqueIndexName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z20 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignAutoRefresh") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z21 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("maxForeignAutoRefreshLevel") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z22 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("persisterClass") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z23 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("allowGeneratedIdInsert") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z24 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("columnDefinition") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z25 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignAutoCreate") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z26 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("version") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z27 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z28 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollection") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z29 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionEager") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z30 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("maxEagerForeignCollectionLevel") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z31 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionMaxEagerLevel") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z32 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z33 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionOrderColumn") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z34 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionOrderColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z35 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionForeignColumnName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z36 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("foreignCollectionForeignFieldName") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setFieldName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setDataPersister(com.j256.ormlite.field.DataPersister)>($r27) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setDataPersister(com.j256.ormlite.field.DataPersister)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setDefaultValue(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setDefaultValue(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setWidth(int)>($i5) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setWidth(int)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>($z53) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setCanBeNull(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setId(boolean)>($z52) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setId(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedId(boolean)>($z51) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedId(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedIdSequence(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setGeneratedIdSequence(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeign(boolean)>($z50) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeign(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUseGetSet(boolean)>($z49) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUseGetSet(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUnknownEnumValue(java.lang.Enum)>(r13) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUnknownEnumValue(java.lang.Enum)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setThrowIfNull(boolean)>($z47) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setThrowIfNull(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setFormat(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setFormat(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>($z46) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUnique(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueCombo(boolean)>($z45) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueCombo(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setIndex(boolean)>($z44) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setIndex(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setIndex(boolean)>(1) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setIndex(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setIndexName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setIndexName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndex(boolean)>($z43) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndex(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndex(boolean)>(1) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndex(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndexName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setUniqueIndexName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignAutoRefresh(boolean)>($z42) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignAutoRefresh(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setMaxForeignAutoRefreshLevel(int)>($i2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setMaxForeignAutoRefreshLevel(int)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setPersisterClass(java.lang.Class)>(r43) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setPersisterClass(java.lang.Class)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setAllowGeneratedIdInsert(boolean)>($z41) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setAllowGeneratedIdInsert(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setColumnDefinition(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setColumnDefinition(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignAutoCreate(boolean)>($z40) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignAutoCreate(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setVersion(boolean)>($z39) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setVersion(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignColumnName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollection(boolean)>($z38) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollection(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionEager(boolean)>($z37) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionEager(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionMaxEagerLevel(int)>($i1) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionMaxEagerLevel(int)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionMaxEagerLevel(int)>($i0) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionMaxEagerLevel(int)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionColumnName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionOrderColumnName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionOrderColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionOrderColumnName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionOrderColumnName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionForeignFieldName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionForeignFieldName(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionForeignFieldName(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: void setForeignCollectionForeignFieldName(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: r40 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("#", -2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid value for unknownEnumValue which should be in class#name format: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r25) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r36.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown class specified for unknownEnumValue: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r35.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r39) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: r42 = virtualinvoke r4.<java.lang.Class: java.lang.Object[] getEnumConstants()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Class: java.lang.Object[] getEnumConstants()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid class is not an Enum for unknownEnumValue: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r13.<java.lang.Enum: java.lang.String name()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $z48 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>($r15) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid enum value name for unknownEnumvalue: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find persisterClass: ") in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r33) in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void readField(com.j256.ormlite.field.DatabaseFieldConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.DatabaseFieldConfigLoader: void <clinit>()> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("Unknown version for {}, version for {} is \'{}\'", r4, r5, r1) in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("Unknown version for {}, version for {} is \'{}\'", r5, r4, r0) in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>(r1) in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object[])>("Mismatched versions: {} is \'{}\', while {} is \'{}\'", $r3) in <com.j256.ormlite.misc.VersionUtils: void logVersionErrors(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("dataClass") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("tableName") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.table.DatabaseTableConfig: void setDataClass(java.lang.Class)>(r9) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void setDataClass(java.lang.Class)>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.table.DatabaseTableConfig: void setTableName(java.lang.String)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void setTableName(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown class specified for dataClass: ") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r8) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readTableField(com.j256.ormlite.table.DatabaseTableConfig,java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.io.BufferedReader: java.lang.String readLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.lang.String: boolean equals(java.lang.Object)>("# --table-fields-end--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<com.j256.ormlite.table.DatabaseTableConfig: void setFieldConfigs(java.util.List)>($r0) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void readFields(java.io.BufferedReader,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void setFieldConfigs(java.util.List)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --table-start--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r18 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("dataClass") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r14 = virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("tableName") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --table-fields-start--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --table-fields-end--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)>("# --table-end--") in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<java.io.BufferedWriter: void newLine()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.BufferedWriter: void newLine()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
VIRTUAL edge: $r20 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>
VIRTUAL edge: $r16 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.util.List getFieldConfigs()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.util.List getFieldConfigs()>
VIRTUAL edge: $r9 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.util.List getFieldConfigs()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.util.List getFieldConfigs()>
VIRTUAL edge: $r13 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.String getTableName()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r19.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r21) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r19.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r21) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.PrintWriter: java.io.Writer append(char)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.io.Writer: java.io.Writer append(char)>(61) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(char)>
VIRTUAL edge: virtualinvoke $r15.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r16) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.PrintWriter: java.io.Writer append(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r15.<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>($r16) in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.io.Writer: java.io.Writer append(java.lang.CharSequence)>
INTERFACE edge: r10 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.DatabaseTableConfigLoader: void writeConfig(java.io.BufferedWriter,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>(r0, null, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,java.lang.Class,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.dao.Dao,java.lang.Class)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: virtualinvoke r1.<com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>(r0) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.DatabaseTableConfig: void extractFieldTypes(com.j256.ormlite.support.ConnectionSource)>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>($r4, null, r1) in <com.j256.ormlite.table.TableUtils: int createTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig,boolean)> ==> <com.j256.ormlite.table.TableInfo: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.dao.Dao,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: java.util.List addCreateTableStatements(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r1.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>("dropping table \'{}\'", $r2) in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doDropTable(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(48) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("TRUNCATE TABLE ") in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ") in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("clearing table \'{}\' with \'{}", r5, r6) in <com.j256.ormlite.table.TableUtils: int clearTable(com.j256.ormlite.support.ConnectionSource,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE ") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" IN (") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void appendWhereIds(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,int,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r1.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r0.<java.io.BufferedReader: void <init>(java.io.Reader)>($r1) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r6 = virtualinvoke $r0.<java.io.BufferedReader: java.lang.String readLine()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.io.BufferedReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r14) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r6.<java.lang.String: int length()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c1 = virtualinvoke r6.<java.lang.String: char charAt(int)>(0) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Line is not in the format of \'pattern = level\': ") in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r16.<java.io.PrintStream: void println(java.lang.String)>($r19) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: java.lang.String trim()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.String: java.lang.String trim()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level \'") in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' was not found") in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r23.<java.io.PrintStream: void println(java.lang.String)>($r28) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.j256.ormlite.logger.LocalLog$PatternLevel: void <init>(java.util.regex.Pattern,com.j256.ormlite.logger.Log$Level)>(r10, r13) in <com.j256.ormlite.logger.LocalLog: java.util.List configureClassLevels(java.io.InputStream)> ==> <com.j256.ormlite.logger.LocalLog$PatternLevel: void <init>(java.util.regex.Pattern,com.j256.ormlite.logger.Log$Level)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>(r0) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)>("Could not find version file {}", r0) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r2) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.InputStreamReader: void <init>(java.io.InputStream)>
SPECIAL edge: specialinvoke $r3.<java.io.BufferedReader: void <init>(java.io.Reader)>($r4) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.BufferedReader: void <init>(java.io.Reader)>
VIRTUAL edge: r6 = virtualinvoke $r3.<java.io.BufferedReader: java.lang.String readLine()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.BufferedReader: java.lang.String readLine()>
VIRTUAL edge: virtualinvoke $r3.<java.io.BufferedReader: void close()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.BufferedReader: void close()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r3.<java.io.BufferedReader: void close()>() in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <java.io.BufferedReader: void close()>
VIRTUAL edge: virtualinvoke $r14.<com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object)>($r13, "Could not read version from {}", r0) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.Throwable,java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)>("No version specified in {}", r0) in <com.j256.ormlite.misc.VersionUtils: java.lang.String getVersionFromFile(java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void error(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>("creating table \'{}\'", $r4) in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doCreateTable(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.TableInfo,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(256) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE TABLE ") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IF NOT EXISTS ") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" (") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r16 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(") ") in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r27 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: r31 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r25 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: $r9 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r11 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
SPECIAL edge: specialinvoke $r28.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: r32 = interfaceinvoke $r28.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
SPECIAL edge: specialinvoke $r29.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r30.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $z5 = virtualinvoke r18.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
VIRTUAL edge: r20 = virtualinvoke r18.<com.j256.ormlite.field.FieldType: java.lang.String getColumnDefinition()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnDefinition()>
VIRTUAL edge: $r21 = virtualinvoke r18.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: $z1 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r32.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r15 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke r32.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r33) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: interfaceinvoke r13.<java.util.List: boolean addAll(java.util.Collection)>($r29) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke r13.<java.util.List: boolean add(java.lang.Object)>($r14) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r13.<java.util.List: boolean addAll(java.util.Collection)>($r30) in <com.j256.ormlite.table.TableUtils: void addCreateTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,java.util.List,boolean)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.dao.LazyForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r8.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("executed {} table statement changed {} rows: {}", r7, $r9, r3) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r34.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>("ignoring {} error \'{}\' for statement: {}", r7, $r27, r3) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL statement failed: ") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL statement ") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" updated ") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows, we were expecting >= 0") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.sql.SQLException: void <init>(java.lang.String)>($r24) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SQL statement updated ") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" rows, we were expecting == 0: ") in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.sql.SQLException: void <init>(java.lang.String)>($r16) in <com.j256.ormlite.table.TableUtils: int doStatements(com.j256.ormlite.support.DatabaseConnection,java.lang.String,java.util.Collection,boolean,boolean,boolean)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: r13 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r8 = virtualinvoke r4.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>(int)>(64) in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP TABLE ") in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r11 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke r10.<java.util.List: boolean addAll(java.util.Collection)>($r0) in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r11) in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r10.<java.util.List: boolean addAll(java.util.Collection)>($r2) in <com.j256.ormlite.table.TableUtils: void addDropTableStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.HashSet: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r12) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Set: boolean add(java.lang.Object)>(r13) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: r16 = interfaceinvoke $r0.<java.util.Set: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.HashSet: java.util.Iterator iterator()>
VIRTUAL edge: r14 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: r12 = virtualinvoke r11.<com.j256.ormlite.field.FieldType: java.lang.String getIndexName()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getIndexName()>
VIRTUAL edge: r13 = virtualinvoke r11.<com.j256.ormlite.field.FieldType: java.lang.String getUniqueIndexName()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getUniqueIndexName()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(48) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DROP INDEX ") in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.StringBuilder: void setLength(int)>(0) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.lang.StringBuilder: void setLength(int)>
INTERFACE edge: $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("dropping index \'{}\' for table \'{}", r17, $r6) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<java.util.List: boolean add(java.lang.Object)>($r10) in <com.j256.ormlite.table.TableUtils: void addDropIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r7.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("executing create table after-query got {} results: {}", $r8, r3) in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("executing create table after-query failed: ") in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: int doCreateTestQueries(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.db.DatabaseType,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r39.<java.util.HashMap: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.HashMap: void <init>()>
INTERFACE edge: $r21 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r21 = interfaceinvoke $r39.<java.util.Map: java.lang.Object get(java.lang.Object)>(r27) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r39.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r27, $r40) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r39.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.HashMap: java.util.Set entrySet()>
VIRTUAL edge: r25 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r8 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: $r34 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: r27 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: java.lang.String getUniqueIndexName()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getUniqueIndexName()>
VIRTUAL edge: r27 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: java.lang.String getIndexName()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getIndexName()>
VIRTUAL edge: $r22 = virtualinvoke r26.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r40.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r42.<java.util.List: boolean add(java.lang.Object)>($r22) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r41.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("CREATE ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UNIQUE ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INDEX ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("IF NOT EXISTS ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ON ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ( ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" )") in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r41.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r41.<java.lang.StringBuilder: void setLength(int)>(0) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.lang.StringBuilder: void setLength(int)>
INTERFACE edge: r30 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r30.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r30.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r6.<com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("creating index \'{}\' for table \'{}", $r7, $r8) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.logger.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>
INTERFACE edge: r37 = interfaceinvoke $r36.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z7 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z7 = interfaceinvoke r37.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r17 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r17 = interfaceinvoke r37.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r15.<java.util.List: boolean add(java.lang.Object)>($r16) in <com.j256.ormlite.table.TableUtils: void addCreateIndexStatements(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,java.util.List,boolean,boolean)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("you must call initialize() before you can use the dao") in <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.Where where()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: r13 = virtualinvoke r8.<com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)>(r9) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke r8.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r12.<com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)>(r13) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>($r10, r13) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)>(i1) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForMatching(java.lang.Object,boolean)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void checkForInitialized()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.Where where()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.QueryBuilder: java.util.List query()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i1 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i1 = interfaceinvoke r3.<java.util.Map: int size()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
SPECIAL edge: specialinvoke $r14.<com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)>(r15) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.SelectArg: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>($r12, r15) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)>($i1) in <com.j256.ormlite.dao.BaseDaoImpl: java.util.List queryForFieldValues(java.util.Map,boolean)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where and(int)>
VIRTUAL edge: r11 = virtualinvoke $r3.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache)>(r0, $r2, i0, $r1) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,int,com.j256.ormlite.dao.ObjectCache)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>($r10, $r4) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl$2: void <init>(com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl$3: void <init>(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.stmt.PreparedQuery)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r12 = virtualinvoke $r4.<com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>(r0, $r3, r1, $r2, i0) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <com.j256.ormlite.stmt.StatementExecutor: com.j256.ormlite.stmt.SelectIterator buildIterator(com.j256.ormlite.dao.BaseDaoImpl,com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.stmt.PreparedStmt,com.j256.ormlite.dao.ObjectCache,int)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not build prepared-query iterator for ") in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.dao.CloseableIterator createIterator(com.j256.ormlite.stmt.PreparedQuery,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>($r5, $r4, $r3) in <com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()> ==> <com.j256.ormlite.stmt.QueryBuilder: void <init>(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.table.TableInfo,com.j256.ormlite.dao.Dao)>
VIRTUAL edge: $r6 = virtualinvoke $r2.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>() in <com.j256.ormlite.stmt.StatementExecutor: void prepareQueryForAll()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.PreparedQuery prepare()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r33) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r0.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: r3 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: $r25 = virtualinvoke r15.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>
VIRTUAL edge: $r19 = virtualinvoke r15.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getFieldName()>
VIRTUAL edge: r26 = virtualinvoke r34.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>($r25) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r34.<java.lang.Class: java.lang.Class getSuperclass()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.Class: java.lang.Class getSuperclass()>
SPECIAL edge: specialinvoke $r27.<com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)>(r28, r29, r26, r15, $r30) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <com.j256.ormlite.field.FieldType: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.lang.reflect.Field,com.j256.ormlite.field.DatabaseFieldConfig,java.lang.Class)>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not find declared field with name \'") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' for ") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r16.<java.sql.SQLException: void <init>(java.lang.String)>($r24) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No fields were configured for class ") in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r11) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>($r13) in <com.j256.ormlite.table.DatabaseTableConfig: com.j256.ormlite.field.FieldType[] convertFieldConfigs(com.j256.ormlite.support.ConnectionSource,java.lang.String,java.util.List)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.table.DatabaseTableConfig: void <init>(java.lang.Class,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.ReferenceObjectCache: java.util.Map getMapForClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r2.<java.util.Iterator: void remove()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.stmt.SelectIterator: void remove()>
INTERFACE edge: interfaceinvoke r2.<java.util.Iterator: void remove()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: void remove()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.ref.Reference: java.lang.Object get()>() in <com.j256.ormlite.dao.ReferenceObjectCache: void cleanMap(java.util.Map)> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r0.<java.util.List: int size()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r0.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r4) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: $i1 = interfaceinvoke $r0.<java.util.List: int size()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: r3 = specialinvoke r2.<com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)>($r0) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)>
VIRTUAL edge: r7 = virtualinvoke r2.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>
VIRTUAL edge: r7 = virtualinvoke r2.<com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType[] getResultFieldTypes()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.FieldType getFieldType()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: com.j256.ormlite.field.FieldType getFieldType()>
INTERFACE edge: $r27 = interfaceinvoke $r26.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.FieldType getFieldType()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.NullArgHolder: com.j256.ormlite.field.FieldType getFieldType()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<com.j256.ormlite.stmt.StatementBuilder$StatementType: boolean isOkForStatementBuilder()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: boolean isOkForStatementBuilder()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Building a statement from a ") in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r22) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" statement is not allowed") in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r25) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.ArgumentHolder[],java.lang.Long,com.j256.ormlite.stmt.StatementBuilder$StatementType)>($r12, r3, r8, r7, r6, $r28, $r14) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.mapped.MappedPreparedStmt prepareStatement(java.lang.Long)> ==> <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],com.j256.ormlite.stmt.ArgumentHolder[],java.lang.Long,com.j256.ormlite.stmt.StatementBuilder$StatementType)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void addSelectColumnToList(java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.field.FieldType verifyColumnName(java.lang.String)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.UpdateBuilder: void addUpdateColumnToList(java.lang.String,com.j256.ormlite.stmt.query.Clause)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z9 = virtualinvoke $r59.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z10 = virtualinvoke $r60.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignCollection()>
SPECIAL edge: specialinvoke $r62.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Data persister for field ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r64 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r65 = virtualinvoke $r64.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is null but the field is not a foreign or foreignCollection") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r61.<java.sql.SQLException: void <init>(java.lang.String)>($r66) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: $z7 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isValidGeneratedType()>
INTERFACE edge: $z7 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.UuidType: boolean isValidGeneratedType()>
INTERFACE edge: $z7 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.IntegerObjectType: boolean isValidGeneratedType()>
INTERFACE edge: $z7 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.LongObjectType: boolean isValidGeneratedType()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BooleanType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.IntType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ByteType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DoubleType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.LongType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ShortType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.CharType: boolean isPrimitive()>
INTERFACE edge: $z6 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isPrimitive()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.FloatType: boolean isPrimitive()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BooleanObjectType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.StringBytesType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateTimeType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigIntegerType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.LongStringType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ByteArrayType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.SerializableType: boolean isAppropriateId()>
INTERFACE edge: $z5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: boolean isAppropriateId()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: boolean isAppropriateId()>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>(r0) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>(r0) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>(r0) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>
INTERFACE edge: $r5 = interfaceinvoke r1.<com.j256.ormlite.field.DataPersister: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>(r0) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object makeConfigObject(com.j256.ormlite.field.FieldType)>
SPECIAL edge: specialinvoke $r37.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Generated-id field \'") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' in ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" can\'t be type ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".  Must be one of: ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r55) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r54 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r38.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r40) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.reflect.Field: java.lang.Class getDeclaringClass()>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r49 = interfaceinvoke $r48.<com.j256.ormlite.field.DataPersister: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r49) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: r56 = virtualinvoke r55.<com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DataType: com.j256.ormlite.field.DataPersister getDataPersister()>
INTERFACE edge: $z8 = interfaceinvoke r56.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BaseDataType: boolean isValidGeneratedType()>
INTERFACE edge: $z8 = interfaceinvoke r56.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.UuidType: boolean isValidGeneratedType()>
INTERFACE edge: $z8 = interfaceinvoke r56.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.IntegerObjectType: boolean isValidGeneratedType()>
INTERFACE edge: $z8 = interfaceinvoke r56.<com.j256.ormlite.field.DataPersister: boolean isValidGeneratedType()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.LongObjectType: boolean isValidGeneratedType()>
VIRTUAL edge: virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r53.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r54) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isThrowIfNull()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" must be a primitive if set with throwIfNull") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r29.<java.sql.SQLException: void <init>(java.lang.String)>($r36) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r24 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is of data type ") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which cannot be the ID field") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.sql.SQLException: void <init>(java.lang.String)>($r28) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: r68 = virtualinvoke $r6.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getDefaultValue()>
VIRTUAL edge: $z3 = virtualinvoke r68.<java.lang.String: boolean equals(java.lang.Object)>("") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r14 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' cannot be a generatedId and have a default value \'") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.sql.SQLException: void <init>(java.lang.String)>($r18) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BooleanObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.StringBytesType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DoubleObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.FloatObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.UuidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.IntegerObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.LongObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.VoidType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ByteObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.StringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ShortObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.ByteArrayType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.CharacterObjectType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.DateLongType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.SerializableType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.EnumIntegerType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.EnumStringType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
INTERFACE edge: $r8 = interfaceinvoke $r7.<com.j256.ormlite.field.FieldConverter: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>(r0, r68) in <com.j256.ormlite.field.FieldType: void assignDataType(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.DataPersister)> ==> <com.j256.ormlite.field.types.BigDecimalNumericType: java.lang.Object parseDefaultString(com.j256.ormlite.field.FieldType,java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String getForeignCollectionForeignFieldName()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.table.TableInfo getTableInfo()>
VIRTUAL edge: r42 = virtualinvoke $r4.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
VIRTUAL edge: $r25 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: $r40 = virtualinvoke r24.<com.j256.ormlite.field.FieldType: java.lang.reflect.Field getField()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.field.FieldType: java.lang.reflect.Field getField()>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $z2 = virtualinvoke $r41.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r26.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeign()>
VIRTUAL edge: $z1 = virtualinvoke $r27.<com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <com.j256.ormlite.field.DatabaseFieldConfig: boolean isForeignAutoRefresh()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign collection object ") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r7) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \'") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r34) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' contains a field of class ") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r16) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r38 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" but it\'s not foreign") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r39 = virtualinvoke $r38.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r28.<java.sql.SQLException: void <init>(java.lang.String)>($r39) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Foreign collection class ") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" for field \'") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" named \'") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" of class ") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.reflect.Field: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.reflect.Field: java.lang.String getName()>
VIRTUAL edge: $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' column-name does not contain a foreign field") in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(39) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r17 = virtualinvoke r16.<java.lang.Class: java.lang.String getName()>() in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r19.<java.sql.SQLException: void <init>(java.lang.String)>($r20) in <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType findForeignFieldType(java.lang.Class,java.lang.Class,com.j256.ormlite.dao.BaseDaoImpl)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()>() in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getJavaDefaultValueDefault()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.math.MathContext: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.sql.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$ClassConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.dao.LazyForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.math.BigDecimal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.dao.DaoManager$TableConfigConnectionSource: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.dao.EagerForeignCollection: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r2) in <com.j256.ormlite.field.FieldType: boolean isFieldValueDefault(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dao has not been set on ") in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" object: ") in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.sql.SQLException: void <init>(java.lang.String)>($r9) in <com.j256.ormlite.misc.BaseDaoEnabled: void checkForDao()> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.SelectIterator: void close()>() in <com.j256.ormlite.stmt.SelectIterator: void closeNoThrow()> ==> <com.j256.ormlite.stmt.SelectIterator: void close()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>($r1) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()> ==> <com.j256.ormlite.stmt.StatementExecutor: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>($r1) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()> ==> <com.j256.ormlite.stmt.StatementExecutor$UserObjectRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>($r1) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()> ==> <com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.j256.ormlite.stmt.GenericRowMapper: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>($r1) in <com.j256.ormlite.stmt.SelectIterator: java.lang.Object getCurrent()> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: java.lang.Object mapRow(com.j256.ormlite.support.DatabaseResults)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expecting there to be a clause already defined for \'") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' operation") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r5) in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is already waiting for a future clause, can\'t add: ") in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9) in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void push(com.j256.ormlite.stmt.query.Clause)>(r2) in <com.j256.ormlite.stmt.Where: void addNeedsFuture(com.j256.ormlite.stmt.query.NeedsFutureClause)> ==> <com.j256.ormlite.stmt.Where: void push(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: $r3 = specialinvoke r1.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>(r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause[] buildClauseArray(com.j256.ormlite.stmt.Where[],java.lang.String)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause pop(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.Where: void push(com.j256.ormlite.stmt.query.Clause)>(r2) in <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)> ==> <com.j256.ormlite.stmt.Where: void push(com.j256.ormlite.stmt.query.Clause)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.stmt.query.NeedsFutureClause: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>(r2) in <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)> ==> <com.j256.ormlite.stmt.query.ManyClause: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>
INTERFACE edge: interfaceinvoke $r3.<com.j256.ormlite.stmt.query.NeedsFutureClause: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>(r2) in <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)> ==> <com.j256.ormlite.stmt.query.Not: void setMissingClause(com.j256.ormlite.stmt.query.Clause)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>(r1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z1 = virtualinvoke $r6.<java.lang.Class: boolean isArray()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <java.lang.Class: boolean isArray()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object argument to IN seems to be an array within an array") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Object argument to IN seems to be a Where.class instead of a QueryBuilder.class") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r1.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object[],boolean)>(r3, $r4, r0, z0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,java.lang.Object[])> ==> <com.j256.ormlite.stmt.query.In: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object[],boolean)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: int getSelectColumnCount()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: int getSelectColumnCount()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: int getSelectColumnCount()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: int getSelectColumnCount()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void enableInnerQuery()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void enableInnerQuery()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Inner query must have only 1 select column specified instead of ") in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.sql.SQLException: void <init>(java.lang.String)>($r10) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r1.<com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>(r3) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.field.FieldType findColumnFieldType(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>($r2) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.Where: void addClause(com.j256.ormlite.stmt.query.Clause)>
SPECIAL edge: specialinvoke $r5.<com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void <init>(com.j256.ormlite.stmt.QueryBuilder)>(r0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void <init>(com.j256.ormlite.stmt.QueryBuilder)>
SPECIAL edge: specialinvoke $r2.<com.j256.ormlite.stmt.query.InSubQuery: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper,boolean)>(r3, $r4, $r5, z0) in <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where in(boolean,java.lang.String,com.j256.ormlite.stmt.QueryBuilder)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper,boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper: void <init>(com.j256.ormlite.stmt.QueryBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("No where clauses defined.  Did you miss a where operation?") in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Both the \"left-hand\" and \"right-hand\" clauses have been defined.  Did you miss an AND or OR?") in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: $r1 = specialinvoke r0.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause peek()>() in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.query.Clause peek()>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke $r1.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r4, r2, r3) in <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: boolean isValueSet()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.stmt.ThreadLocalSelectArg: java.lang.Object getValue()> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_idx") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_idx") in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.field.DatabaseFieldConfig: java.lang.String findIndexName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object convertIdToFieldObject(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>("{} arguments: {}", $r2, r0) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: void logArgs(java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedQuery: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>(r1, r2, r3, r4) in <com.j256.ormlite.stmt.mapped.MappedQueryForId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.BaseForeignCollection: void <init>(com.j256.ormlite.dao.Dao,java.lang.Object,java.lang.Object,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.j256.ormlite.stmt.SelectArg: void <init>()>() in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.SelectArg: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>($r5) in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
INTERFACE edge: r7 = interfaceinvoke $r6.<com.j256.ormlite.dao.Dao: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>() in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.dao.BaseDaoImpl: com.j256.ormlite.stmt.QueryBuilder queryBuilder()>
VIRTUAL edge: virtualinvoke r7.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)>($r18, 1) in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.QueryBuilder orderBy(java.lang.String,boolean)>
VIRTUAL edge: $r9 = virtualinvoke r7.<com.j256.ormlite.stmt.QueryBuilder: com.j256.ormlite.stmt.Where where()>() in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.StatementBuilder: com.j256.ormlite.stmt.Where where()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>($r10, $r3) in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.Where eq(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.PreparedQuery prepare()>() in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.Where: com.j256.ormlite.stmt.PreparedQuery prepare()>
VIRTUAL edge: virtualinvoke r15.<com.j256.ormlite.stmt.mapped.MappedPreparedStmt: void setParentInformation(java.lang.Object,java.lang.Object)>($r17, $r16) in <com.j256.ormlite.dao.BaseForeignCollection: com.j256.ormlite.stmt.PreparedQuery getPreparedQuery()> ==> <com.j256.ormlite.stmt.mapped.BaseMappedQuery: void setParentInformation(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.EagerForeignCollection$1: void <init>(com.j256.ormlite.dao.EagerForeignCollection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.LazyForeignCollection$1: void <init>(com.j256.ormlite.dao.LazyForeignCollection)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.j256.ormlite.logger.Log: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>(r1) in <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.LocalLog: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>
SPECIAL edge: r8 = specialinvoke r0.<com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>(r3, r4, r5, r6, r7) in <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])>
INTERFACE edge: interfaceinvoke $r11.<com.j256.ormlite.logger.Log: void log(com.j256.ormlite.logger.Log$Level,java.lang.String)>(r1, r8) in <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.LocalLog: void log(com.j256.ormlite.logger.Log$Level,java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<com.j256.ormlite.logger.Log: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>(r1, r8, r9) in <com.j256.ormlite.logger.Logger: void innerLog(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.LocalLog: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>
CLINIT edge: $i1 = <com.j256.ormlite.logger.Logger: int ARG_STRING_LENGTH> in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.Where: void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.Where: void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.Where: void <init>(com.j256.ormlite.table.TableInfo,com.j256.ormlite.stmt.StatementBuilder,com.j256.ormlite.db.DatabaseType)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r2.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)>($r0, r3) in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>("built statement {}", r4) in <com.j256.ormlite.stmt.StatementBuilder: java.lang.String buildStatementString(java.util.List)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: boolean isComparable()>() in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.FieldType: boolean isComparable()>
VIRTUAL edge: $r9 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>() in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.DataPersister getDataPersister()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Field \'") in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is of data type ") in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" which can not be compared") in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.sql.SQLException: void <init>(java.lang.String)>($r12) in <com.j256.ormlite.stmt.query.BaseComparison: void <init>(java.lang.String,com.j256.ormlite.field.FieldType,java.lang.Object,boolean)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.BaseMappedQuery: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: $i3 = virtualinvoke $r19.<java.lang.Long: int intValue()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <java.lang.Long: int intValue()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.j256.ormlite.logger.Logger: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>($r2) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.logger.Logger: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>
INTERFACE edge: r12 = interfaceinvoke $r11.<com.j256.ormlite.stmt.ArgumentHolder: java.lang.Object getSqlArgValue()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.Object getSqlArgValue()>
INTERFACE edge: r12 = interfaceinvoke $r11.<com.j256.ormlite.stmt.ArgumentHolder: java.lang.Object getSqlArgValue()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.stmt.NullArgHolder: java.lang.Object getSqlArgValue()>
INTERFACE edge: r25 = interfaceinvoke $r16.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>
INTERFACE edge: r25 = interfaceinvoke $r16.<com.j256.ormlite.stmt.ArgumentHolder: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.stmt.NullArgHolder: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: r25 = virtualinvoke r14.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>() in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.SqlType getSqlType()>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("prepared statement \'{}\' with {} args", $r6, $r7) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>("prepared statement arguments: {}", r23) in <com.j256.ormlite.stmt.mapped.MappedPreparedStmt: com.j256.ormlite.support.CompiledStatement compileStatement(com.j256.ormlite.support.DatabaseConnection,com.j256.ormlite.support.CompiledStatement)> ==> <com.j256.ormlite.logger.Logger: void trace(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.String getFormat()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFormat()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: java.lang.String getFormat()>() in <com.j256.ormlite.field.types.StringBytesType: java.lang.String getCharsetName(com.j256.ormlite.field.FieldType)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFormat()>
SPECIAL edge: r3 = specialinvoke r2.<com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod()> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("getMillis", $r4) in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Method getMillisMethod()> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
CLINIT edge: $r0 = <com.j256.ormlite.field.types.DateTimeType: java.lang.Class dateTimeClass> in <com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()> ==> <com.j256.ormlite.field.types.DateTimeType: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("org.joda.time.DateTime") in <com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
SPECIAL edge: r3 = specialinvoke r2.<com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()>() in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()> ==> <com.j256.ormlite.field.types.DateTimeType: java.lang.Class getDateTimeClass()>
VIRTUAL edge: $r6 = virtualinvoke r3.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r4) in <com.j256.ormlite.field.types.DateTimeType: java.lang.reflect.Constructor getConstructor()> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("queried for sequence {} using stmt: {}", $r4, $r5) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Should not have returned 0 for stmt: ") in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.sql.SQLException: void <init>(java.lang.String)>($r14) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)>(r6, $r7, "sequence", r8) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignSequenceId(com.j256.ormlite.support.DatabaseConnection,java.lang.Object,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $z0 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isAllowGeneratedIdInsert()>
VIRTUAL edge: $r11 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)>(r6) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getFieldValueIfNotDefault(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>(r6) in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>
VIRTUAL edge: $r10 = virtualinvoke r5.<com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.Object[] getFieldObjects(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object getDefaultValue()>
VIRTUAL edge: virtualinvoke $r4.<com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object assignIdValue(java.lang.Object,java.lang.Number,com.j256.ormlite.dao.ObjectCache)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<com.j256.ormlite.logger.Logger: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>($r6) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>
VIRTUAL edge: virtualinvoke $r11.<com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object[])>("assigned id \'{}\' from {} to \'{}\' in {} object", $r8) in <com.j256.ormlite.stmt.mapped.MappedCreate: void assignIdValue(java.lang.Object,java.lang.Number,java.lang.String,com.j256.ormlite.dao.ObjectCache)> ==> <com.j256.ormlite.logger.Logger: void debug(java.lang.String,java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r3) in <com.j256.ormlite.stmt.mapped.MappedCreate: boolean foreignCollectionsAreAssigned(com.j256.ormlite.field.FieldType[],java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>(com.j256.ormlite.stmt.mapped.MappedCreate$1)> ==> <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedCreate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int)> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getSimpleName()>() in <com.j256.ormlite.stmt.mapped.MappedCreate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],java.lang.String,int)> ==> <java.lang.Class: java.lang.String getSimpleName()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedUpdate: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType,int)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: java.lang.Object extractIdToFieldObject(java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldToSqlArgValue(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedUpdateId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedDelete: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.MappedQueryForId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String)>(r1, r2, r3, r4, "refresh") in <com.j256.ormlite.stmt.mapped.MappedRefresh: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.stmt.mapped.MappedQueryForId: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[],com.j256.ormlite.field.FieldType[],java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>(r1, r2) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.DeleteBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>(r1, r2) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>(r1, r2) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementEnd(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.DeleteBuilder: void appendStatementEnd(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementEnd(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.stmt.StatementBuilder: void appendStatementEnd(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementEnd(java.lang.StringBuilder)>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("WHERE ") in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)>(r1, r2) in <com.j256.ormlite.stmt.StatementBuilder: void appendStatementString(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.Where: void appendSql(java.lang.StringBuilder,java.util.List)>
CLINIT edge: $r10 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_LONG> in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r5 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT> in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
CLINIT edge: $r9 = <com.j256.ormlite.stmt.StatementBuilder$StatementType: com.j256.ormlite.stmt.StatementBuilder$StatementType SELECT_RAW> in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <clinit>()>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("argument for \'") in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getFieldName()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isArgumentHolderRequired()>
VIRTUAL edge: $z2 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: boolean isForeign()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isForeign()>
VIRTUAL edge: $r9 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: java.lang.Class getType()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Class getType()>
VIRTUAL edge: r28 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: com.j256.ormlite.field.FieldType getForeignIdField()>
VIRTUAL edge: $z3 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: boolean isEscapedValue()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isEscapedValue()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r0) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>(r0) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object convertJavaFieldToSqlArgValue(java.lang.Object)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is null") in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.sql.SQLException: void <init>(java.lang.String)>($r25) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(63) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r3) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: interfaceinvoke r26.<com.j256.ormlite.stmt.ArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>($r18, r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>
INTERFACE edge: interfaceinvoke r26.<com.j256.ormlite.stmt.ArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>($r18, r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.NullArgHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>
INTERFACE edge: interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>(r26) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r12.<java.util.List: boolean add(java.lang.Object)>($r15) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<com.j256.ormlite.stmt.SelectArg: void <init>()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void <init>()>
INTERFACE edge: interfaceinvoke $r15.<com.j256.ormlite.stmt.ArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>($r16, r1) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: void setMetaInfo(java.lang.String,com.j256.ormlite.field.FieldType)>
INTERFACE edge: interfaceinvoke $r15.<com.j256.ormlite.stmt.ArgumentHolder: void setValue(java.lang.Object)>(r0) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.SelectArg: void setValue(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r13 = virtualinvoke r28.<com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>(r0) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.Object extractJavaFieldValue(java.lang.Object)>
VIRTUAL edge: virtualinvoke r11.<com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r6, r28, r2, r12, $r13) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
VIRTUAL edge: virtualinvoke r11.<com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>(r6, r28, r2, r12, $r13) in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.sql.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.sql.Date: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.In: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.sql.Time: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.Not: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.stmt.query.BaseComparison: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: r17 = virtualinvoke r16.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>($r2) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>
VIRTUAL edge: $r5 = virtualinvoke r17.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r3) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
SPECIAL edge: specialinvoke $r8.<com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)>(r4) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<com.j256.ormlite.logger.Log: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>($r10, $r15, $r7) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <com.j256.ormlite.logger.LocalLog: void log(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to call constructor with single String argument for class ") in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", so had to use local log") in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LoggerFactory$LogType: com.j256.ormlite.logger.Log createLogFromClassName(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.j256.ormlite.stmt.query.SetExpression: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.query.SetExpression: void appendArgOrValue(com.j256.ormlite.db.DatabaseType,com.j256.ormlite.field.FieldType,java.lang.StringBuilder,java.util.List,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig$1: void <init>(com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig)> ==> <java.lang.ThreadLocal: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.logger.LocalLog: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>(r1) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <com.j256.ormlite.logger.LocalLog: boolean isLevelEnabled(com.j256.ormlite.logger.Log$Level)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
SPECIAL edge: specialinvoke $r7.<java.util.Date: void <init>()>() in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.util.Date: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke r6.<java.text.DateFormat: java.lang.String format(java.util.Date)>($r7) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
VIRTUAL edge: $r11 = virtualinvoke r1.<com.j256.ormlite.logger.Log$Level: java.lang.String name()>() in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.Enum: java.lang.String name()>
VIRTUAL edge: $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("] ") in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r19.<java.io.PrintStream: void println(java.lang.String)>($r20) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: virtualinvoke r21.<java.lang.Throwable: void printStackTrace(java.io.PrintStream)>($r22) in <com.j256.ormlite.logger.LocalLog: void printMessage(com.j256.ormlite.logger.Log$Level,java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void printStackTrace(java.io.PrintStream)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) in <com.j256.ormlite.dao.LruObjectCache: java.util.Map getMapForClass(java.lang.Class)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String)>($r2, r0, r1) in <com.j256.ormlite.dao.RuntimeExceptionDao: void logMessage(java.lang.Exception,java.lang.String)> ==> <com.j256.ormlite.logger.Logger: void log(com.j256.ormlite.logger.Log$Level,java.lang.Throwable,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("INTEGER") in <com.j256.ormlite.db.BaseDatabaseType: void appendIntegerType(java.lang.StringBuilder,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FLOAT") in <com.j256.ormlite.db.BaseDatabaseType: void appendFloatType(java.lang.StringBuilder,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DOUBLE PRECISION") in <com.j256.ormlite.db.BaseDatabaseType: void appendDoubleType(java.lang.StringBuilder,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.j256.ormlite.field.FieldType: boolean isEscapedDefaultValue()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: boolean isEscapedDefaultValue()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.BaseArgumentHolder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.IsNull: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.math.MathContext: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.IsNotNull: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.Between: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetExpression: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Date: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SetValue: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.InSubQuery: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.math.BigDecimal: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.In: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.Where: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.sql.Time: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.field.FieldType: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <com.j256.ormlite.stmt.query.Not: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r2.<java.lang.Object: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.j256.ormlite.db.BaseDatabaseType: void appendDefaultValue(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" UNIQUE (") in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
INTERFACE edge: interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.j256.ormlite.db.BaseDatabaseType: void addSingleUnique(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.j256.ormlite.stmt.StatementBuilder$StatementType: void <init>(java.lang.String,int,boolean,boolean,boolean,boolean)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.field.FieldType$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.j256.ormlite.field.DataType: void <init>(java.lang.String,int,com.j256.ormlite.field.DataPersister)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2) in <com.j256.ormlite.dao.BaseDaoImpl$5: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>(r1, r2) in <com.j256.ormlite.dao.BaseDaoImpl$4: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.j256.ormlite.field.SqlType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.j256.ormlite.logger.Log$Level: void <init>(java.lang.String,int,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BooleanObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.BooleanType: void <init>()> ==> <com.j256.ormlite.field.types.BooleanObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.BooleanObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.StringBytesType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.DoubleObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.FloatObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.UuidType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.DateTimeType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.DateStringType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.IntegerObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.IntType: void <init>()> ==> <com.j256.ormlite.field.types.IntegerObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.IntegerObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.BigIntegerType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.LongObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.DateType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.DateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.SqlDateType: void <init>()> ==> <com.j256.ormlite.field.types.DateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.DateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.TimeStampType: void <init>()> ==> <com.j256.ormlite.field.types.DateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.ByteObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.ByteType: void <init>()> ==> <com.j256.ormlite.field.types.ByteObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.ByteObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.DoubleObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.DoubleType: void <init>()> ==> <com.j256.ormlite.field.types.DoubleObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.StringType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.LongStringType: void <init>()> ==> <com.j256.ormlite.field.types.StringType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.StringType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.ShortObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.ShortType: void <init>()> ==> <com.j256.ormlite.field.types.ShortObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.ShortObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.LongObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.LongType: void <init>()> ==> <com.j256.ormlite.field.types.LongObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.BigDecimalStringType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.ByteArrayType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.DateLongType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.CharacterObjectType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.SerializableType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseEnumType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.EnumIntegerType: void <init>()> ==> <com.j256.ormlite.field.types.BaseEnumType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.CharacterObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.CharType: void <init>()> ==> <com.j256.ormlite.field.types.CharacterObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseEnumType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.EnumStringType: void <init>()> ==> <com.j256.ormlite.field.types.BaseEnumType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.FloatObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r3, $r1) in <com.j256.ormlite.field.types.FloatType: void <init>()> ==> <com.j256.ormlite.field.types.FloatObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>($r2, $r1) in <com.j256.ormlite.field.types.BigDecimalNumericType: void <init>()> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>(r1, r2, r3) in <com.j256.ormlite.stmt.mapped.MappedDeleteCollection: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,com.j256.ormlite.logger.LoggerFactory$1)>(r1, i0, r2, r3, null) in <com.j256.ormlite.logger.LoggerFactory$LogType$1: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,com.j256.ormlite.logger.LoggerFactory$1)>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <com.j256.ormlite.logger.LocalLog$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.BaseFieldConverter: void <init>()>() in <com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter: void <init>()> ==> <com.j256.ormlite.field.BaseFieldConverter: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.stmt.QueryBuilder: int getSelectColumnCount()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(128) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: i0 = virtualinvoke r2.<java.lang.String: int indexOf(java.lang.String,int)>("{}", i3) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.String: int indexOf(java.lang.String,int)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int,int)>(i3, i0) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r11 = virtualinvoke r2.<java.lang.String: java.lang.String substring(int)>(i3) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>($r0, r10) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>($r0, r9) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>($r0, r8) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>
SPECIAL edge: specialinvoke r6.<com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>($r0, $r7) in <com.j256.ormlite.logger.Logger: java.lang.String buildFullMessage(java.lang.String,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object[])> ==> <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)>
CLINIT edge: $r1 = <com.j256.ormlite.logger.Logger: java.lang.Object UNKNOWN_ARG> in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <com.j256.ormlite.logger.Logger: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.util.Arrays: java.lang.String toString(java.lang.Object[])>($r6) in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.util.Arrays: java.lang.String toString(java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.table.TableInfo: java.lang.Class getDataClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>() in <com.j256.ormlite.stmt.mapped.BaseMappedStatement: void <init>(com.j256.ormlite.table.TableInfo,java.lang.String,com.j256.ormlite.field.FieldType[])> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getIdField()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DELETE FROM ") in <com.j256.ormlite.stmt.DeleteBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.DeleteBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.DeleteBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("SELECT ") in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("DISTINCT ") in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("COUNT(*) ") in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FROM ") in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.QueryBuilder: void appendLimit(java.lang.StringBuilder)>(r0) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendLimit(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)>(r0) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r2.<com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)>(r0) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)>
INTERFACE edge: $z3 = interfaceinvoke $r8.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
CLINIT edge: $r20 = newarray (com.j256.ormlite.field.FieldType)[$i2] in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.field.FieldType: void <clinit>()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: boolean isEmpty()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("UPDATE statements must have at least one SET column") in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("UPDATE ") in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" SET ") in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.table.TableInfo: java.lang.String getTableName()>
INTERFACE edge: r11 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Not: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Exists: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.In: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.InSubQuery: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetExpression: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.ManyClause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SetValue: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.SimpleComparison: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Between: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.Raw: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
INTERFACE edge: interfaceinvoke r13.<com.j256.ormlite.stmt.query.Clause: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>($r16, r4, r15) in <com.j256.ormlite.stmt.UpdateBuilder: void appendStatementStart(java.lang.StringBuilder,java.util.List)> ==> <com.j256.ormlite.stmt.query.IsNotNull: void appendSql(com.j256.ormlite.db.DatabaseType,java.lang.StringBuilder,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendHaving(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendHaving(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendLimit(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendLimit(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendOffset(java.lang.StringBuilder)>(r1) in <com.j256.ormlite.stmt.QueryBuilder: void appendStatementEnd(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendOffset(java.lang.StringBuilder)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>() in <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.table.DatabaseTableConfig: java.lang.Class getDataClass()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)>(r1, $r3, r2) in <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)>(r1, r2, null) in <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.BooleanObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.IntegerObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.DateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDateType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.ByteObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.DoubleObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.StringType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.ShortObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.LongObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.BaseEnumType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.CharacterObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>(r1, r2) in <com.j256.ormlite.field.types.FloatObjectType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])> ==> <com.j256.ormlite.field.types.BaseDataType: void <init>(com.j256.ormlite.field.SqlType,java.lang.Class[])>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>(r1, i0, r2, r3) in <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String,com.j256.ormlite.logger.LoggerFactory$1)> ==> <com.j256.ormlite.logger.LoggerFactory$LogType: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("null") in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.Class: boolean isArray()>() in <com.j256.ormlite.logger.Logger: void appendArg(java.lang.StringBuilder,java.lang.Object)> ==> <java.lang.Class: boolean isArray()>
VIRTUAL edge: $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendLimit(java.lang.StringBuilder)> ==> <java.lang.Long: long longValue()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendRawColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("* ") in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType[] getFieldTypes()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r14) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r21 = interfaceinvoke $r2.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r20) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: java.lang.Object[] toArray(java.lang.Object[])>
INTERFACE edge: r6 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z6 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z6 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: r14 = virtualinvoke $r13.<com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>(r12) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.table.TableInfo: com.j256.ormlite.field.FieldType getFieldTypeByColumnName(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r14.<com.j256.ormlite.field.FieldType: boolean isForeignCollection()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.field.FieldType: boolean isForeignCollection()>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r7, r14, $r2) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
SPECIAL edge: specialinvoke r0.<com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>(r7, $r9, $r2) in <com.j256.ormlite.stmt.QueryBuilder: void appendColumns(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)>
INTERFACE edge: $z1 = interfaceinvoke $r15.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("GROUP BY ") in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendGroupBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
INTERFACE edge: $z2 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ORDER BY ") in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(44) in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" DESC") in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
INTERFACE edge: r7 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.SelectIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.dao.EagerForeignCollection$1: java.lang.Object next()>
VIRTUAL edge: r12 = virtualinvoke r10.<com.j256.ormlite.stmt.query.OrderBy: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.query.OrderBy: java.lang.String getColumnName()>
VIRTUAL edge: $z1 = virtualinvoke r10.<com.j256.ormlite.stmt.query.OrderBy: boolean isAscending()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOrderBys(java.lang.StringBuilder)> ==> <com.j256.ormlite.stmt.query.OrderBy: boolean isAscending()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("HAVING ") in <com.j256.ormlite.stmt.QueryBuilder: void appendHaving(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.j256.ormlite.stmt.QueryBuilder: void appendHaving(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(32) in <com.j256.ormlite.stmt.QueryBuilder: void appendHaving(java.lang.StringBuilder)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
SPECIAL edge: specialinvoke $r7.<java.sql.SQLException: void <init>(java.lang.String)>("If the offset is specified, limit must also be specified with this database") in <com.j256.ormlite.stmt.QueryBuilder: void appendOffset(java.lang.StringBuilder)> ==> <java.sql.SQLException: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r4.<java.lang.Long: long longValue()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendOffset(java.lang.StringBuilder)> ==> <java.lang.Long: long longValue()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.j256.ormlite.dao.BaseDaoImpl: void initialize()>() in <com.j256.ormlite.dao.BaseDaoImpl: void <init>(com.j256.ormlite.support.ConnectionSource,java.lang.Class,com.j256.ormlite.table.DatabaseTableConfig)> ==> <com.j256.ormlite.dao.BaseDaoImpl: void initialize()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>() in <com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)> ==> <com.j256.ormlite.field.FieldType: java.lang.String getColumnName()>
INTERFACE edge: interfaceinvoke r5.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.j256.ormlite.stmt.QueryBuilder: void appendFieldColumnName(java.lang.StringBuilder,com.j256.ormlite.field.FieldType,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
