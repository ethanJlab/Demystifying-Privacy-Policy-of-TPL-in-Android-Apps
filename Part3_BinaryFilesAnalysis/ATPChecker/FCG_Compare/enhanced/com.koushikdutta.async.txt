FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
STATIC edge: $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, i0) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i0) in <com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, $i0) in <com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r1) in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r6) in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $i3 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>($r4) in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r1) in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
CLINIT edge: $z0 = staticinvoke <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>($r1, $i1) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $i7 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>($r4) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $z0 = staticinvoke <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>($r1, $i1) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r1) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $i8 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>($r6) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r3) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r1) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
CLINIT edge: $z0 = staticinvoke <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>($r1, $i1) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $i7 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>($r4) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] access$400(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $z0 = staticinvoke <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>($r1, $i1) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()> ==> <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $z1 = <com.koushikdutta.async.AsyncNetworkSocket: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $z1 = <com.koushikdutta.async.AsyncNetworkSocket: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncNetworkSocket: void pause()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: r5 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r4) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
STATIC edge: r5 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r4) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>
CLINIT edge: $r0 = <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer mInstance> in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: $r2 = <com.koushikdutta.async.AsyncServer$Scheduler: com.koushikdutta.async.AsyncServer$Scheduler INSTANCE> in <com.koushikdutta.async.AsyncServer: void <init>(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()>
CLINIT edge: $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)>($r9) in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)>
STATIC edge: $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)>($r9) in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>(r1, $r9) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "run", $r10) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>(r1, $r9) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r3 = <com.koushikdutta.async.AsyncServer: java.util.WeakHashMap mServers> in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)>(r2) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)>
CLINIT edge: $r14 = <com.koushikdutta.async.AsyncServer$Scheduler: com.koushikdutta.async.AsyncServer$Scheduler INSTANCE> in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.lang.String,int,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)>
CLINIT edge: $r5 = <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService synchronousWorkers> in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.lang.String,int)> ==> <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
STATIC edge: r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)> ==> <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
STATIC edge: r0 = staticinvoke <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)> ==> <java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()>
CLINIT edge: $r0 = <com.koushikdutta.async.AsyncServer: java.util.WeakHashMap mServers> in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getCurrentThreadServer()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getCurrentThreadServer()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: boolean isAffinityThreadOrStopped()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r1 = new com.koushikdutta.async.ArrayDeque in <com.koushikdutta.async.ByteBufferList: void <init>()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
CLINIT edge: $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.ByteBufferList: void <init>()> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ArrayDeque in <com.koushikdutta.async.ByteBufferList: void <init>(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
CLINIT edge: $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.ByteBufferList: void <init>(java.nio.ByteBuffer[])> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ArrayDeque in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r3) in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
CLINIT edge: $r2 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ByteBufferList: boolean $assertionsDisabled> in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r3) in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i8) in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r3) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: r5 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i4) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r3) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: r5 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i4) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r3 = <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer EMPTY_BYTEBUFFER> in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r6) in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r6) in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: $z0 = <com.koushikdutta.async.ByteBufferList: boolean $assertionsDisabled> in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream out> in <com.koushikdutta.async.ByteBufferList: void spewString()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r11 = <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset US_ASCII> in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
CLINIT edge: $r8 = new java.lang.String in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.ByteBufferList: int MAX_SIZE> = i0 in <com.koushikdutta.async.ByteBufferList: void setMaxPoolSize(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.ByteBufferList: int MAX_ITEM_SIZE> = i0 in <com.koushikdutta.async.ByteBufferList: void setMaxItemSize(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $i5 = <com.koushikdutta.async.ByteBufferList: int MAX_ITEM_SIZE> in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $i14 = staticinvoke <java.lang.Math: int max(int,int)>($i12, $i13) in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $z4 = staticinvoke <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)>
STATIC edge: r2 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>
CLINIT edge: $i1 = <com.koushikdutta.async.ByteBufferList: int maxItem> in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: r8 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i13) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
STATIC edge: $i13 = staticinvoke <java.lang.Math: int max(int,int)>(8192, i0) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r7 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>
CLINIT edge: r0 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>($i2) in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>(8192, $i1) in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: i12 = staticinvoke <java.lang.Math: int min(int,int)>($i10, $i11) in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: r0 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()>
CLINIT edge: $i0 = <com.koushikdutta.async.ByteBufferList: int MAX_ITEM_SIZE> in <com.koushikdutta.async.util.Allocator: void <init>()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i4) in <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i4) in <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: $i4 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i3) in <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>($i1, $i0) in <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: $r17 = <java.lang.System: java.io.PrintStream out> in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $z1 = <com.koushikdutta.async.Util: boolean $assertionsDisabled> in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r3 = <java.lang.System: java.io.PrintStream out> in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $z3 = <com.koushikdutta.async.Util: boolean $assertionsDisabled> in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r0, 2147483647L, r1, r2) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r0, 2147483647L, r1, r2) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r0, r1, r2) in <com.koushikdutta.async.Util: void stream(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r1, r0, r2) in <com.koushikdutta.async.Util: void stream(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r0, r1, r2) in <com.koushikdutta.async.Util: void stream(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r2, $r4) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r2, $r4) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: r1 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i0) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r6, $r4, r7) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: r1 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i0) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r6, $r4, r7) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r6 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <com.koushikdutta.async.SelectorWrapper: void wakeupOnce()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>(16384) in <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)>
STATIC edge: r1 = staticinvoke <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>(r0) in <com.koushikdutta.async.util.StreamUtility: void copyStream(java.io.InputStream,java.io.OutputStream)> ==> <java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)>(r1, r3) in <com.koushikdutta.async.util.StreamUtility: void copyStream(java.io.InputStream,java.io.OutputStream)> ==> <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)>
STATIC edge: r3 = staticinvoke <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>(r2) in <com.koushikdutta.async.util.StreamUtility: void copyStream(java.io.InputStream,java.io.OutputStream)> ==> <java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)>
CLINIT edge: $r0 = new java.lang.String in <com.koushikdutta.async.util.StreamUtility: java.lang.String readToEnd(java.io.InputStream)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)>(r1) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readToEnd(java.io.InputStream)> ==> <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)>
CLINIT edge: $r0 = new java.io.File in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)>($r0) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.lang.String)> ==> <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)>
CLINIT edge: $r12 = new java.lang.String in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r14) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r13) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: $r0 = new java.io.File in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.lang.String,java.lang.String)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)>($r0, r2) in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$700(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>($r3, $r2, $r1) in <com.koushikdutta.async.AsyncServer$13: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$700(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>($r3, $r2, $r1) in <com.koushikdutta.async.AsyncServer$13: void run()> ==> <com.koushikdutta.async.AsyncServer: void access$700(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r1) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", $r19) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
STATIC edge: $r11 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r10) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", $r9) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
STATIC edge: $r6 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r5) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", "Server dump not possible. No selector?") in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r1) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r5, $r4) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r12) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "Datagram error", $r8) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r5, $r4) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r2, $r1) in <com.koushikdutta.async.AsyncServer$12: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r10) in <com.koushikdutta.async.AsyncServer$12: void run()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r2, $r1) in <com.koushikdutta.async.AsyncServer$12: void run()> ==> <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", "Selector Exception? L Preview?") in <com.koushikdutta.async.AsyncServer$1: void run()> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
CLINIT edge: $r25 = new com.koushikdutta.async.ServerSocketChannelWrapper in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r29) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r7) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>
STATIC edge: r20 = staticinvoke <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>() in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()>
CLINIT edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r7) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r4, $r3) in <com.koushikdutta.async.AsyncServer$10: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r13) in <com.koushikdutta.async.AsyncServer$10: void run()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "Datagram error", $r7) in <com.koushikdutta.async.AsyncServer$10: void run()> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>($r4, $r3) in <com.koushikdutta.async.AsyncServer$10: void run()> ==> <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$100(com.koushikdutta.async.SelectorWrapper)>($r1) in <com.koushikdutta.async.AsyncServer$4: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void access$100(com.koushikdutta.async.SelectorWrapper)>($r1) in <com.koushikdutta.async.AsyncServer$4: void run()> ==> <com.koushikdutta.async.AsyncServer: void access$100(com.koushikdutta.async.SelectorWrapper)>
CLINIT edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture access$500(com.koushikdutta.async.AsyncServer,java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>($r6, $r2, $r7) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture access$500(com.koushikdutta.async.AsyncServer,java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>($r6, $r2, $r7) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture access$500(com.koushikdutta.async.AsyncServer,java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>
CLINIT edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r7) in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r19) in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r8 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>($r7) in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.SelectorWrapper access$300(com.koushikdutta.async.AsyncServer)>
STATIC edge: $r5 = staticinvoke <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>() in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()>
STATIC edge: r10 = staticinvoke <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>($r1) in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r2) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: l20 = staticinvoke <java.lang.Math: long min(long,long)>($l7, $l9) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.lang.Math: long min(long,long)>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i3) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i1 = staticinvoke <java.lang.Math: int max(int,int)>($i0, 4096) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r2) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: int read(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: boolean isConnected()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[],int,int)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r6) in <com.koushikdutta.async.AsyncServer$5$1: void stop()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: r1 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r0) in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
STATIC edge: i1 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i0) in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r1 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r0) in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: $r1 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: i7 = staticinvoke <java.lang.Math: int max(int,int)>(1, $i2) in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: l6 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: r3 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r2) in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: l6 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)>($r2) in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)>(r0) in <com.koushikdutta.async.AsyncSemaphore: void release()> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)>(r0) in <com.koushikdutta.async.AsyncSemaphore: void release()> ==> <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)>
CLINIT edge: $z2 = <com.koushikdutta.async.future.SimpleCancellable: boolean $assertionsDisabled> in <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()> ==> <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()>
FINALIZE edge: null in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <android.os.ParcelFileDescriptor: void finalize()>
CLINIT edge: $r0 = <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext defaultSSLContext> in <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext getDefaultSSLContext()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
CLINIT edge: $r14 = new com.koushikdutta.async.AsyncSSLSocketWrapper in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
CLINIT edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i7) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <javax.net.ssl.SSLEngineResult$HandshakeStatus: void <clinit>()>
CLINIT edge: $r5 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <javax.net.ssl.SSLEngineResult$Status: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i5) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i8) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: r12 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r9 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_WRAP> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult$HandshakeStatus: void <clinit>()>
CLINIT edge: $r5 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult$Status: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: $z0 = <com.koushikdutta.async.BufferedDataSink: boolean $assertionsDisabled> in <com.koushikdutta.async.BufferedDataSink: void setMaxBuffer(int)> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: r23 = <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer EMPTY_BYTEBUFFER> in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$100(com.koushikdutta.async.AsyncSSLSocketWrapper,java.lang.Exception)>($r19, $r39) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$100(com.koushikdutta.async.AsyncSSLSocketWrapper,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r10, $r9) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$000(com.koushikdutta.async.AsyncSSLSocketWrapper,javax.net.ssl.SSLEngineResult$HandshakeStatus)>($r35, $r36) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$000(com.koushikdutta.async.AsyncSSLSocketWrapper,javax.net.ssl.SSLEngineResult$HandshakeStatus)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$100(com.koushikdutta.async.AsyncSSLSocketWrapper,java.lang.Exception)>($r19, $r39) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r10, $r9) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$000(com.koushikdutta.async.AsyncSSLSocketWrapper,javax.net.ssl.SSLEngineResult$HandshakeStatus)>($r35, $r36) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
CLINIT edge: $r33 = <javax.net.ssl.SSLEngineResult$Status: javax.net.ssl.SSLEngineResult$Status BUFFER_OVERFLOW> in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult$Status: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.BufferedDataSink: void access$000(com.koushikdutta.async.BufferedDataSink)>($r1) in <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.BufferedDataSink: void access$000(com.koushikdutta.async.BufferedDataSink)>($r1) in <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink: void access$000(com.koushikdutta.async.BufferedDataSink)>
CLINIT edge: $z0 = <com.koushikdutta.async.DataEmitterReader: boolean $assertionsDisabled> in <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.DataEmitterReader: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.DataEmitterReader: void <init>()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.DataEmitterReader: boolean $assertionsDisabled> in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterReader: void <clinit>()>
STATIC edge: i0 = staticinvoke <java.lang.Math: int min(int,int)>($i3, $i6) in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r17, $r16) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r10, $r9) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: r27 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(8192) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r17, $r16) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r10, $r9) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: r27 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(8192) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r4) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
CLINIT edge: $z1 = <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: $z1 = <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void <clinit>()>
CLINIT edge: $z1 = <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataSink: void <clinit>()>
CLINIT edge: $z1 = <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.LineEmitter: boolean $assertionsDisabled> in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$1: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$1: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r11 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r12 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)>($r1) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r8) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("PushParser", "Error while invoking tap callback", $r10) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: $r5 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r3) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
STATIC edge: r2 = staticinvoke <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)>($r1) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)>
CLINIT edge: $r9 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r8) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$8: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$8: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r3 = new java.lang.String in <com.koushikdutta.async.PushParser$8: void parsed(byte[])> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r4 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$7: void parsed(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$7: void parsed(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$6: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$6: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0) in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Byte: java.lang.Byte valueOf(byte)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>($r1) in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: java.util.ArrayList access$000(com.koushikdutta.async.PushParser)>
CLINIT edge: $r4 = staticinvoke <java.lang.Byte: java.lang.Byte valueOf(byte)>($b0) in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: $r5 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)>($r6, r10) in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r10) in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)>($r6, r10) in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)>
CLINIT edge: $r14 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z1 = <com.koushikdutta.async.future.Continuation$2: boolean $assertionsDisabled> in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.future.Continuation: void access$100(com.koushikdutta.async.future.Continuation)>($r4) in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation: void access$100(com.koushikdutta.async.future.Continuation)>
STATIC edge: staticinvoke <com.koushikdutta.async.future.Continuation: boolean access$002(com.koushikdutta.async.future.Continuation,boolean)>($r1, 0) in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation: boolean access$002(com.koushikdutta.async.future.Continuation,boolean)>
STATIC edge: $z3 = staticinvoke <com.koushikdutta.async.future.Continuation: boolean access$000(com.koushikdutta.async.future.Continuation)>($r5) in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation: boolean access$000(com.koushikdutta.async.future.Continuation)>
CLINIT edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>($r0, r1, 0, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(java.lang.String)> ==> <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
STATIC edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>(r0, r1, 0, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String)> ==> <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>(r0, r1, 1, r2) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)>
CLINIT edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(java.lang.String,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.FutureCallback)>($r0, r1, r2) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(java.lang.String,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.FutureCallback)>
STATIC edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Cancellable multicastLookup(java.lang.String,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
CLINIT edge: $r0 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(1024) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r23 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>("224.0.0.251") in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>
STATIC edge: $r14 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)>(r2, r10) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)>(r2, r10) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)>
STATIC edge: $i3 = staticinvoke <com.koushikdutta.async.dns.Dns: int setRecursion(int)>(s4) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: int setRecursion(int)>
STATIC edge: $i2 = staticinvoke <com.koushikdutta.async.dns.Dns: int setQuery(int)>(0) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns: int setQuery(int)>
STATIC edge: $r0 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(1024) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: $r14 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: r9 = staticinvoke <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)>(r0) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)>
CLINIT edge: $r3 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>(r0, r1) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>(r0, r1) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
STATIC edge: $r12 = staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>(r0, r1) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
STATIC edge: $r14 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>(r21) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>(r0, r1) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>(r0, r1) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
CLINIT edge: $r7 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r10 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)>($r2) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)>
CLINIT edge: r8 = staticinvoke <android.net.Uri: java.lang.String decode(java.lang.String)>($r7) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: r10 = staticinvoke <android.net.Uri: java.lang.String decode(java.lang.String)>($r9) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <android.net.Uri: java.lang.String decode(java.lang.String)>
STATIC edge: r8 = staticinvoke <android.net.Uri: java.lang.String decode(java.lang.String)>($r7) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <android.net.Uri: java.lang.String decode(java.lang.String)>
STATIC edge: r8 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String)>($r7) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String)>
STATIC edge: r10 = staticinvoke <java.net.URLDecoder: java.lang.String decode(java.lang.String)>($r9) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <java.net.URLDecoder: java.lang.String decode(java.lang.String)>
CLINIT edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i5 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r7 = <java.lang.System: java.io.PrintStream err> in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r1 = <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Comparator FIELD_NAME_COMPARATOR> in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r8) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
STATIC edge: $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
STATIC edge: $r21 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r17) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: java.util.List unmodifiableList(java.util.List)>
CLINIT edge: $r6 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r0) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r7) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r21 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r17) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r2 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r7) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: $r2 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] $VALUES> in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.text.TextUtils$TruncateAt: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/text/TextUtils$TruncateAt;", r0) in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Paint: void <init>()> ==> <android.graphics.Paint: void finalize()>
FINALIZE edge: null in <android.graphics.Paint: void <init>(int)> ==> <android.graphics.Paint: void finalize()>
FINALIZE edge: null in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <android.graphics.Paint: void finalize()>
CLINIT edge: $r0 = <android.graphics.Paint$Style: android.graphics.Paint$Style[] $VALUES> in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.graphics.Paint$Style: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Style;", r0) in <android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] $VALUES> in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.graphics.Paint$Cap: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Cap;", r0) in <android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Paint$Join: android.graphics.Paint$Join[] $VALUES> in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.graphics.Paint$Join: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Join;", r0) in <android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Path: void <init>()> ==> <android.graphics.Path: void finalize()>
FINALIZE edge: null in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <android.graphics.Path: void finalize()>
FINALIZE edge: null in <android.graphics.Shader: void <init>()> ==> <android.graphics.Shader: void finalize()>
FINALIZE edge: null in <android.graphics.ColorFilter: void <init>()> ==> <android.graphics.ColorFilter: void finalize()>
FINALIZE edge: null in <android.graphics.Xfermode: void <init>()> ==> <android.graphics.Xfermode: void finalize()>
FINALIZE edge: null in <android.graphics.PathEffect: void <init>()> ==> <android.graphics.PathEffect: void finalize()>
FINALIZE edge: null in <android.graphics.MaskFilter: void <init>()> ==> <android.graphics.MaskFilter: void finalize()>
FINALIZE edge: null in <android.graphics.Rasterizer: void <init>()> ==> <android.graphics.Rasterizer: void finalize()>
CLINIT edge: $r0 = <android.graphics.Paint$Align: android.graphics.Paint$Align[] $VALUES> in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.graphics.Paint$Align: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Align;", r0) in <android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Path$FillType: android.graphics.Path$FillType[] $VALUES> in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.graphics.Path$FillType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Path$FillType;", r0) in <android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Path$Direction: android.graphics.Path$Direction[] $VALUES> in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.graphics.Path$Direction: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Path$Direction;", r0) in <android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Matrix: void <init>()> ==> <android.graphics.Matrix: void finalize()>
FINALIZE edge: null in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <android.graphics.Matrix: void finalize()>
CLINIT edge: $r0 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] $VALUES> in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.graphics.Shader$TileMode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Shader$TileMode;", r0) in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] $VALUES> in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Matrix$ScaleToFit;", r0) in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
STATIC edge: $r0 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>() in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <android.os.Looper: android.os.Looper myLooper()>
STATIC edge: r2 = staticinvoke <android.os.Looper: android.os.Looper myLooper()>() in <com.koushikdutta.async.future.HandlerFuture: void <init>()> ==> <android.os.Looper: android.os.Looper myLooper()>
STATIC edge: r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.koushikdutta.async.future.HandlerFuture: void <init>()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$100(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r4, $r3, $i0, $r2, $r1) in <com.koushikdutta.async.http.AsyncHttpClient$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$100(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r4, $r3, $i0, $r2, $r1) in <com.koushikdutta.async.http.AsyncHttpClient$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$100(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
CLINIT edge: $r0 = <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.http.AsyncHttpClient mDefaultInstance> in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.http.AsyncHttpClient getDefaultInstance()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.http.AsyncHttpClient getDefaultInstance()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
CLINIT edge: $r3 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.http.AsyncHttpClient getDefaultInstance()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: $r20 = new java.io.File in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.File: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>(r0, r1) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>
CLINIT edge: $r7 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()>
CLINIT edge: $r1 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)>($r10, r5) in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.AsyncHttpRequest: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.AsyncHttpRequest in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r3) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
CLINIT edge: $r4 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r3) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <android.net.Uri: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper in <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.HttpRequest asHttpRequest()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int v(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)> ==> <android.util.Log: int v(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void logw(java.lang.String)> ==> <android.util.Log: int w(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)> ==> <android.util.Log: int d(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <android.util.Log: int d(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r7, r5) in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String)> ==> <android.util.Log: int e(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <android.util.Log: int e(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>($r6, $r7, r5) in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext getDefaultSSLContext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLContext getSSLContext()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext getDefaultSSLContext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLContext getSSLContext()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext getDefaultSSLContext()>
CLINIT edge: $r52 = new com.koushikdutta.async.future.SimpleCancellable in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()>
STATIC edge: $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r50 = new com.koushikdutta.async.future.SimpleCancellable in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()>
CLINIT edge: $l10 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r19 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z3 = staticinvoke <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>($r25) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>
STATIC edge: $z2 = staticinvoke <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>($r19) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>
STATIC edge: $r9 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
STATIC edge: $r2 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: r3 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>($r2, "Content-Type") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>
STATIC edge: $z0 = staticinvoke <java.nio.charset.Charset: boolean isSupported(java.lang.String)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()> ==> <java.nio.charset.Charset: boolean isSupported(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r9, $r10, $r11, null, $r12, $r13) in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r9, $r10, $r11, null, $r12, $r13) in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r19, $r18, r13, null, $r17, $r16) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r19, $r18, r13, null, $r17, $r16) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
CLINIT edge: $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)>(r6, $r3) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: r3 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)>(r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)>(r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)> ==> <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r13, $r12, $r11, r2, r0, null) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>($r4, $r3, r2) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r13, $r12, $r11, r2, r0, null) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>($r4, $r3, r2) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r14, $r13, $r12, r2, r0, null) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>($r4, $r3, r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r14, $r13, $r12, r2, r0, null) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>($r4, $r3, r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$700(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r6, $r5, $r4, $r3, $r2, $r1) in <com.koushikdutta.async.http.AsyncHttpClient$4: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$700(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r6, $r5, $r4, $r3, $r2, $r1) in <com.koushikdutta.async.http.AsyncHttpClient$4: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$700(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
STATIC edge: r6 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)>($r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)>
CLINIT edge: $r2 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r23) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r23) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: r10 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>(r9) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r8) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: r5 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>($r4, 2) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: byte[] toByteArray(java.util.UUID)>($r3) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: byte[] toByteArray(java.util.UUID)>
STATIC edge: $r3 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <java.util.UUID: java.util.UUID randomUUID()>
CLINIT edge: $r2 = new com.koushikdutta.async.BufferedDataSink in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
STATIC edge: $r16 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>(r15) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)>
STATIC edge: $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r4) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r4) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[],int,int)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r4) in <com.koushikdutta.async.http.WebSocketImpl: void send(java.lang.String)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r4) in <com.koushikdutta.async.http.WebSocketImpl: void ping(java.lang.String)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
CLINIT edge: $r0 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r0, r1, r2) in <com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r0, r1, r2) in <com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r1) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String getMethod()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r1) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String getMethod()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: $r13 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r12) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %s HTTP/1.1", $r11) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r13 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r12) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: $r14 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %s HTTP/1.1", $r11) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.HeaderIterator headerIterator()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.HeaderIterator headerIterator(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r1) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String getMethod()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r1) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String getMethod()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: $r3 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r2) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %s HTTP/1.1", $r0) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>($r2) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String access$000(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%s %s HTTP/1.1", $r0) in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r12, $r13) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CONNECT %s:%s HTTP/1.1", $r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r12, $r13) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("CONNECT %s:%s HTTP/1.1", $r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $i5 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
STATIC edge: $r30 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>
STATIC edge: $r31 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>
STATIC edge: $r32 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)>(r7, $r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)>
STATIC edge: $r1 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.Collections: java.util.Set emptySet()>
CLINIT edge: $l1 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r29 = <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r30 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r31 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r32 = staticinvoke <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l1) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)> ==> <java.lang.Long: java.lang.String toString(long)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)> ==> <java.lang.Long: java.lang.String toString(long)>
STATIC edge: $z1 = staticinvoke <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)>($r6, $r8) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)>
CLINIT edge: $r14 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource NETWORK> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
STATIC edge: l18 = staticinvoke <java.lang.Math: long min(long,long)>(l18, $l17) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.lang.Math: long min(long,long)>
CLINIT edge: $r16 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource NETWORK> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: $r16 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource CONDITIONAL_CACHE> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: $r15 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource CACHE> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r12 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r13 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r2 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource NETWORK> in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)>(r17) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)>
STATIC edge: $z2 = staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)>(r16) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: r28 = staticinvoke <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)>($r17, $r18, 0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)>
STATIC edge: $r17 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r16) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: r28 = staticinvoke <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>($r21, null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>
STATIC edge: $r14 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r12) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: $r11 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r10) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: $r6 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $r6 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r3) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r3) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody access$000(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()>
STATIC edge: $r7 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r6) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.AsyncHttpRequest access$100(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: $r5 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody access$000(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody access$000(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody access$000(com.koushikdutta.async.http.AsyncHttpResponseImpl)>($r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody access$000(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i0, 16) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r10 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r9) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $r7 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r6) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.String toString(int,int)>($i0, 16) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Integer: java.lang.String toString(int,int)>
CLINIT edge: r93 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r92) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r33, $r32, null, r0, $r31, $r30) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$600(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r64, $r38, $i4, $r63, $r62) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$600(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>($r55, $r38, "Range") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>($r53, $r38, "User-Agent") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$400(com.koushikdutta.async.http.AsyncHttpRequest)>($r38) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$400(com.koushikdutta.async.http.AsyncHttpRequest)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r83, $r82, $r75, r0, $r81, $r80) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
STATIC edge: r93 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r71) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
STATIC edge: r93 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r92) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r33, $r32, null, r0, $r31, $r30) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$400(com.koushikdutta.async.http.AsyncHttpRequest)>($r38) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: $r38 = new com.koushikdutta.async.http.AsyncHttpRequest in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r83, $r82, $r75, r0, $r81, $r80) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.http.libcore.HttpDate: java.lang.ThreadLocal STANDARD_DATE_FORMAT> in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r9 = <java.util.Locale: java.util.Locale US> in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <java.util.Locale: void <clinit>()>
CLINIT edge: r13 = <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String[] BROWSER_COMPATIBLE_DATE_FORMATS> in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.http.libcore.HttpDate: java.lang.ThreadLocal STANDARD_DATE_FORMAT> in <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
STATIC edge: i7 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r0, i5, "=,") in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>
STATIC edge: i5 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r0, i9, ",") in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>
STATIC edge: i12 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>(r0, i10, "\"") in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)>
STATIC edge: i9 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int skipWhitespace(java.lang.String,int)>(r0, i8) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int skipWhitespace(java.lang.String,int)>
CLINIT edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) in <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.RequestHeaders: boolean access$002(com.koushikdutta.async.http.libcore.RequestHeaders,boolean)>($r7, 1) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean access$002(com.koushikdutta.async.http.libcore.RequestHeaders,boolean)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.RequestHeaders: boolean access$402(com.koushikdutta.async.http.libcore.RequestHeaders,boolean)>($r2, 1) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean access$402(com.koushikdutta.async.http.libcore.RequestHeaders,boolean)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.RequestHeaders: int access$302(com.koushikdutta.async.http.libcore.RequestHeaders,int)>($r4, $i0) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int access$302(com.koushikdutta.async.http.libcore.RequestHeaders,int)>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r3) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.RequestHeaders: int access$202(com.koushikdutta.async.http.libcore.RequestHeaders,int)>($r5, $i2) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int access$202(com.koushikdutta.async.http.libcore.RequestHeaders,int)>
STATIC edge: $i2 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r3) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.RequestHeaders: int access$102(com.koushikdutta.async.http.libcore.RequestHeaders,int)>($r6, $i4) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int access$102(com.koushikdutta.async.http.libcore.RequestHeaders,int)>
STATIC edge: $i4 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r3) in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r20, $r19, $r18, $r17, $r24, null) in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r11, $r10, $r9, $r8, null, $r7) in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r20, $r19, $r18, $r17, $r24, null) in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r11, $r10, $r9, $r8, null, $r7) in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$1000(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)>($r9, $r8, $r7, $l5, $l4) in <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$1000(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)>($r9, $r8, $r7, $l5, $l4) in <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$1000(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r9, $r8, $r7, $r6, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>($r9, $r8, $r7, $r6, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
CLINIT edge: $r10 = new com.koushikdutta.async.http.HybiParser$5 in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$5: void <clinit>()>
CLINIT edge: $r11 = new com.koushikdutta.async.DataEmitterReader in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterReader: void <clinit>()>
CLINIT edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.Long: void <clinit>()>
STATIC edge: r26 = staticinvoke <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>($r10, null) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>
STATIC edge: r22 = staticinvoke <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>($r14, null) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>
STATIC edge: r20 = staticinvoke <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>($r15, $r16) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)>
STATIC edge: l3 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r1) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.Long: long parseLong(java.lang.String)>
CLINIT edge: $r8 = new com.koushikdutta.async.http.filter.InflaterInputFilter in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <clinit>()>
CLINIT edge: $r12 = new com.koushikdutta.async.http.filter.ChunkedInputFilter in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()>
CLINIT edge: $r13 = new com.koushikdutta.async.http.filter.ContentLengthFilter in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$200(com.koushikdutta.async.http.AsyncSocketMiddleware,java.lang.String)>($r7, $r6) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$200(com.koushikdutta.async.http.AsyncSocketMiddleware,java.lang.String)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r1 = new com.koushikdutta.async.LineEmitter in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] $VALUES> in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/koushikdutta/async/http/libcore/ResponseSource;", r0) in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r1 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource CONDITIONAL_CACHE> in <com.koushikdutta.async.http.libcore.ResponseSource: boolean requiresConnection()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$002(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>($r8, 1) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$002(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$502(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>($r2, 1) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$502(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$402(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>($r3, 1) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$402(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: int access$302(com.koushikdutta.async.http.libcore.ResponseHeaders,int)>($r5, $i0) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: int access$302(com.koushikdutta.async.http.libcore.ResponseHeaders,int)>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: int access$202(com.koushikdutta.async.http.libcore.ResponseHeaders,int)>($r6, $i2) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: int access$202(com.koushikdutta.async.http.libcore.ResponseHeaders,int)>
STATIC edge: $i2 = staticinvoke <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.HeaderParser: int parseSeconds(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$102(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>($r7, 1) in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean access$102(com.koushikdutta.async.http.libcore.ResponseHeaders,boolean)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r8) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r8) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$000(com.koushikdutta.async.http.HybiParser,byte)>($r2, $b0) in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$000(com.koushikdutta.async.http.HybiParser,byte)>($r2, $b0) in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void access$000(com.koushikdutta.async.http.HybiParser,byte)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.HybiParser$5: boolean $assertionsDisabled> in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$5: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: int access$502(com.koushikdutta.async.http.HybiParser,int)>($r9, 0) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: int access$502(com.koushikdutta.async.http.HybiParser,int)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$800(com.koushikdutta.async.http.HybiParser)>($r8) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void access$800(com.koushikdutta.async.http.HybiParser)>
STATIC edge: $r7 = staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] access$700(com.koushikdutta.async.http.HybiParser)>($r6) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: byte[] access$700(com.koushikdutta.async.http.HybiParser)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] access$702(com.koushikdutta.async.http.HybiParser,byte[])>($r2, $r3) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: byte[] access$702(com.koushikdutta.async.http.HybiParser,byte[])>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>($r1) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>
STATIC edge: $i3 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>($r11) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.HybiParser: int access$502(com.koushikdutta.async.http.HybiParser,int)>($r9, 0) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>($r1) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
CLINIT edge: $i3 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$600(com.koushikdutta.async.http.HybiParser)>($r11) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] access$402(com.koushikdutta.async.http.HybiParser,byte[])>($r2, $r1) in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: int access$502(com.koushikdutta.async.http.HybiParser,int)>($r7, 4) in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: int access$502(com.koushikdutta.async.http.HybiParser,int)>
STATIC edge: $r6 = staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] access$400(com.koushikdutta.async.http.HybiParser)>($r5) in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: byte[] access$400(com.koushikdutta.async.http.HybiParser)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] access$402(com.koushikdutta.async.http.HybiParser,byte[])>($r2, $r1) in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: byte[] access$402(com.koushikdutta.async.http.HybiParser,byte[])>
CLINIT edge: $i0 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$200(com.koushikdutta.async.http.HybiParser)>($r1) in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$300(com.koushikdutta.async.http.HybiParser,byte[])>($r4, r2) in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void access$300(com.koushikdutta.async.http.HybiParser,byte[])>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.http.HybiParser: int access$200(com.koushikdutta.async.http.HybiParser)>($r1) in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: int access$200(com.koushikdutta.async.http.HybiParser)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$100(com.koushikdutta.async.http.HybiParser,byte)>($r2, $b0) in <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: void access$100(com.koushikdutta.async.http.HybiParser,byte)>($r2, $b0) in <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void access$100(com.koushikdutta.async.http.HybiParser,byte)>
CLINIT edge: r17 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i1) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r2, $r4) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r5) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: r17 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i15) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: r17 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i1) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r2, $r4) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $z3 = <com.koushikdutta.async.http.filter.InflaterInputFilter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r3, r2) in <com.koushikdutta.async.http.body.JSONObjectBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r3, r2) in <com.koushikdutta.async.http.body.JSONObjectBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r4, r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r4, r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r0 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r8 = new com.koushikdutta.async.http.body.MultipartFormDataBody$6 in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.util.UUID: java.util.UUID randomUUID()>
STATIC edge: $r16 = staticinvoke <java.util.UUID: java.util.UUID randomUUID()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.util.UUID: java.util.UUID randomUUID()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r4, r3) in <com.koushikdutta.async.http.body.StringBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r2, $r4, r3) in <com.koushikdutta.async.http.body.StringBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r1 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_LEN> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <init>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r3 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r8) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: i8 = staticinvoke <java.lang.Math: int min(int,int)>($i7, i6) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()>
CLINIT edge: $r5 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State COMPLETE> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r6 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_LEN> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r7 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_CRLF> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r8) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $z3 = <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()>
CLINIT edge: $r12 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_CR> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r13 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r19 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_LEN_CR> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r3 = new com.koushikdutta.async.PushParser in <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.filter.ContentLengthFilter: void <init>(long)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.filter.ContentLengthFilter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void <clinit>()>
STATIC edge: l5 = staticinvoke <java.lang.Math: long min(long,long)>($l4, $l3) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Math: long min(long,long)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HttpUtil$EndEmitter: void access$000(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)>($r2, $r1) in <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: void access$000(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)>
STATIC edge: $r5 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)>($r4) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.body.UrlEncodedFormBody: com.koushikdutta.async.http.Multimap access$002(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.http.Multimap)>($r3, $r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: com.koushikdutta.async.http.Multimap access$002(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.http.Multimap)>
CLINIT edge: $r2 = new java.lang.String in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundary()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.BoundaryEmitter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()>
CLINIT edge: $r0 = new java.lang.String in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.BoundaryEmitter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()>
CLINIT edge: r29 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i39) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i6) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: i45 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 0) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $r11 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i20) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: $r18 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i44) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: r29 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i39) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
CLINIT edge: $r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i6) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.BoundaryEmitter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()>
CLINIT edge: $r11 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i20) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i44) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>($r2, "Content-Disposition") in <com.koushikdutta.async.http.body.Part: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>
CLINIT edge: $r1 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: $r11 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>($r10, "Content-Disposition") in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("; %s=\"%s\"", $r15) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("form-data; name=\"%s\"", $r3) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("form-data; name=\"%s\"", $r3) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = new java.io.File in <com.koushikdutta.async.http.body.Part: java.lang.String getFilename()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.body.Part: boolean $assertionsDisabled> in <com.koushikdutta.async.http.body.Part: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.Part: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r5, r3, r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r5, r3, r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.body.MultipartFormDataBody$6: boolean $assertionsDisabled> in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r10, r8, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r10, r8, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r6 = new com.koushikdutta.async.http.body.Part in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.Part: void <clinit>()>
CLINIT edge: $r15 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r4, r1, r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r4, r1, r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r0 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] $VALUES> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/koushikdutta/async/http/filter/ChunkedInputFilter$State;", r0) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN> in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown format (magic number %x)", $r10) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r12 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.lang.Short: java.lang.Short valueOf(short)>
STATIC edge: s0 = staticinvoke <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r0, 0, $r1) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>
CLINIT edge: $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("unknown format (magic number %x)", $r10) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <java.lang.Short: java.lang.Short valueOf(short)>(s0) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.lang.Short: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$000(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>($r13, r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$000(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$100(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>($r20, r12, $r19) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$100(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r4, r1, r2) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r4, r1, r2) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r3 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN> in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: $s0 = staticinvoke <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r2, 0, $r3) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: int peekInt(byte[],int,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: long peekLong(byte[],int,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: void pokeInt(byte[],int,int,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: void pokeLong(byte[],int,long,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.http.libcore.Memory: void pokeShort(byte[],int,short,java.nio.ByteOrder)> ==> <java.nio.ByteOrder: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$100(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>($r3) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$100(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder LITTLE_ENDIAN> in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: s0 = staticinvoke <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>(r0, 0, $r1) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <com.koushikdutta.async.http.libcore.Memory: short peekShort(byte[],int,java.nio.ByteOrder)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$000(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>($r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$000(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>
CLINIT edge: $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: $r2 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
CLINIT edge: $r4 = new com.koushikdutta.async.util.FileCache in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
CLINIT edge: r8 = staticinvoke <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>($r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>(r54) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r44 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>($r43) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
STATIC edge: $z3 = staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean access$000(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry)>($r62) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean access$000(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry)>
STATIC edge: l6 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: $r30 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: r58 = staticinvoke <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)>(r24) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>(r54) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>(r54) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>(r54) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>(r54) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: r8 = staticinvoke <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>($r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>
CLINIT edge: $r68 = new com.koushikdutta.async.future.SimpleCancellable in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()>
CLINIT edge: $r34 = <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource CACHE> in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: $l4 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r30 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: r58 = staticinvoke <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)>(r24) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>($r1, class "Lcom/koushikdutta/async/http/ResponseCacheMiddleware$CachedSocket;") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: r63 = staticinvoke <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>($r14) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r41) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>($r1, class "Lcom/koushikdutta/async/http/ResponseCacheMiddleware$CachedSocket;") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>
CLINIT edge: r63 = staticinvoke <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])>($r14) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
CLINIT edge: $r55 = new com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <clinit>()>
CLINIT edge: $r16 = staticinvoke <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>($r15, class "Lcom/koushikdutta/async/http/ResponseCacheMiddleware$CachedSocket;") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r17) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r16 = staticinvoke <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>($r15, class "Lcom/koushikdutta/async/http/ResponseCacheMiddleware$CachedSocket;") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r13) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.AsyncServer access$300(com.koushikdutta.async.http.ResponseCacheMiddleware)>($r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.AsyncServer access$300(com.koushikdutta.async.http.ResponseCacheMiddleware)>
CLINIT edge: $r0 = <com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: r11 = staticinvoke <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()>
STATIC edge: r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r0) in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
CLINIT edge: $r2 = new java.math.BigInteger in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
CLINIT edge: $r0 = new java.io.File in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.io.File: void <clinit>()>
CLINIT edge: $r2 = new java.math.BigInteger in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.math.BigInteger: void <clinit>()>
CLINIT edge: r0 = newarray (java.io.File)[i0] in <com.koushikdutta.async.util.FileCache: java.io.File[] getTempFiles(int)> ==> <java.io.File: void <clinit>()>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r12) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>(r2) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>(r2) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>
CLINIT edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>($r2) in <com.koushikdutta.async.util.FileCache: void clear()> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>($r2) in <com.koushikdutta.async.util.FileCache: void clear()> ==> <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>
CLINIT edge: $r3 = <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset US_ASCII> in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r23) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r22) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: $r20 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r4 = <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset UTF_8> in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
STATIC edge: $r32 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $r19 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r2 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)>(r19, r11) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)>
CLINIT edge: $r8 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.util.FileCache access$400(com.koushikdutta.async.http.ResponseCacheMiddleware)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,java.lang.String)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.util.FileCache access$400(com.koushikdutta.async.http.ResponseCacheMiddleware)>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: com.koushikdutta.async.http.libcore.RawHeaders access$200(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry)>($r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.util.Map getHeaders()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: com.koushikdutta.async.http.libcore.RawHeaders access$200(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry)>
CLINIT edge: $r2 = <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset US_ASCII> in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int)> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
CLINIT edge: $r3 = <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset US_ASCII> in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
CLINIT edge: $r15 = new java.lang.String in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(r1) in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.Integer: int parseInt(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r1) in <com.koushikdutta.async.util.FileCache$Snapshot: void close()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: $r2 = new java.lang.String in <com.koushikdutta.async.http.libcore.StrictLineReader$1: java.lang.String toString()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Long: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", $r1) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i9) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Long: java.lang.Long valueOf(long)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("LruCache[maxSize=%d,hits=%d,misses=%d,hitRate=%d%%]", $r1) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i5) in <com.koushikdutta.async.util.LruCache: java.lang.String toString()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r3, r2, r4) in <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r3, r2, r4) in <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, $i2) in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r1, r2) in <com.koushikdutta.async.http.body.FileBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r1, r2) in <com.koushikdutta.async.http.body.FileBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r3, r2) in <com.koushikdutta.async.http.body.JSONArrayBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r3, r2) in <com.koushikdutta.async.http.body.JSONArrayBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, $l2, r1, r2) in <com.koushikdutta.async.http.body.StreamBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, $l2, r1, r2) in <com.koushikdutta.async.http.body.StreamBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$000(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,java.lang.Exception)>($r5, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$000(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,java.lang.Exception)>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)>($r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.Multimap getQuery()> ==> <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: void access$200(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.Exception)>($r2, r1) in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: void access$200(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.Exception)>($r2, r1) in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void access$200(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.Exception)>
CLINIT edge: $r1 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r8 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setContentType(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r8, $r9) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $z1 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r0, $r8, $r9) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r19) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r5, $l6, r0, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $r35 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("bytes %d-%d/%d", $r31) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r34 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r33 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l11) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: l11 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r20) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r22) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: long parseLong(java.lang.String)>
STATIC edge: $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r19) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r5, $l6, r0, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r7 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r35 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("bytes %d-%d/%d", $r31) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r32 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: l11 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r21) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: l10 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r22) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>
CLINIT edge: r0 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HTTP/1.1 %d %s", $r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r0 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)>
CLINIT edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("HTTP/1.1 %d %s", $r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r4 = <com.koushikdutta.async.http.server.AsyncHttpServer: java.util.Hashtable mContentTypes> in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(int)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(int)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
CLINIT edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void listenSecure(int,javax.net.ssl.SSLContext)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void listenSecure(int,javax.net.ssl.SSLContext)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getDefault()>
STATIC edge: $r7 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>($r6) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: r1 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)>
CLINIT edge: $r2 = <com.koushikdutta.async.http.server.AsyncHttpServer: java.util.Hashtable mContentTypes> in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServer: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.http.server.AsyncHttpServer: java.util.Hashtable mCodes> in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders access$202(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl,com.koushikdutta.async.http.libcore.RequestHeaders)>($r48, $r49) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders access$202(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl,com.koushikdutta.async.http.libcore.RequestHeaders)>
STATIC edge: $r51 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r50) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r47 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.CompletedCallback access$100(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r46) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.CompletedCallback access$100(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r29 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r27) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r22 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r19) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r15 = staticinvoke <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)>(r43, $r12, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)>
STATIC edge: $r14 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r13) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r12 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.CompletedCallback access$100(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r10) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.CompletedCallback access$100(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: r43 = staticinvoke <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)>($r8, $r9, 1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)>
STATIC edge: $r9 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r32 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r31) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r36 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r35) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
STATIC edge: $r34 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>($r33) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders access$000(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r1, r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r1, r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r13, r14, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: $r26 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>($r25) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: r11 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)>($r6, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)>
STATIC edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r13, r14, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r17) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r8, r20) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r8, r20) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>(r0, null, $i0, $r3, null, null, 0, $r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>(r0, null, $i0, $r3, null, null, 0, $r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>
CLINIT edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r8, r9, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r12, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r11, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void pump(java.io.InputStream,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r8, r9, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r11, $r14) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r5 = new java.io.File in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: $r27 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>($r26) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getContentType(java.lang.String)>
STATIC edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: java.lang.String valueOf(java.lang.Object)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r30) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: r11 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)>($r6, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)>
STATIC edge: r4 = staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>($r2, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)>
CLINIT edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(java.lang.Object)>($r18) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: $r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] $VALUES> in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.graphics.PorterDuff$Mode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/PorterDuff$Mode;", r0) in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Region: void <init>()> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(int,int,int,int)> ==> <android.graphics.Region: void finalize()>
CLINIT edge: $r0 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] $VALUES> in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.graphics.Bitmap$Config: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Bitmap$Config;", r0) in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] $VALUES> in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.graphics.Bitmap$CompressFormat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Bitmap$CompressFormat;", r0) in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Region$Op: android.graphics.Region$Op[] $VALUES> in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.graphics.Region$Op: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Region$Op;", r0) in <android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.DrawFilter: void <init>()> ==> <android.graphics.DrawFilter: void finalize()>
CLINIT edge: $r0 = <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] $VALUES> in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.graphics.Canvas$EdgeType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Canvas$EdgeType;", r0) in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] $VALUES> in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.graphics.Canvas$VertexMode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Canvas$VertexMode;", r0) in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Picture: void <init>()> ==> <android.graphics.Picture: void finalize()>
FINALIZE edge: null in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <android.graphics.Picture: void finalize()>
CLINIT edge: $r0 = new org.json.JSONObject in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: void <clinit>()>
CLINIT edge: $r0 = new org.json.JSONObject in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)>(r0, $r1, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d:%s:%s:%s", $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r8 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("%d:%s:%s:%s", $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("1::%s", $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("1::%s", $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
CLINIT edge: $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r17, $r16) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0::%s", $r10) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $z3 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r18) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: $z2 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r17, $r16) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
CLINIT edge: $r13 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("0::%s", $r10) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r10 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r9) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: $r10 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r9) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
CLINIT edge: $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r7) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>($r9, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$100(com.koushikdutta.async.http.socketio.SocketIOConnection)>($r8) in <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$100(com.koushikdutta.async.http.socketio.SocketIOConnection)>
CLINIT edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("6:::%s%s", $r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("6:::%s%s", $r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$200(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>($r10, $r11, $r9) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$200(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
CLINIT edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>($r49, $r43) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$800(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>($r5, $r4, $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$800(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$700(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>($r18, $r19, r55, r14, $r20) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$700(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
STATIC edge: $r20 = staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>($r17, $r16, $r15) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$600(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>($r25, $r26, $r21, $r27) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$600(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>
STATIC edge: $r27 = staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>($r24, $r23, $r22) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$500(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>($r31, $r32, $r33, $r34) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$500(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
STATIC edge: $r34 = staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>($r30, $r29, $r28) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$300(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)>($r38, $r37) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$300(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>($r41, null) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>
STATIC edge: i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r13 = new org.json.JSONObject in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: void <clinit>()>
CLINIT edge: $r21 = new org.json.JSONObject in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>($r3, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)> ==> <android.net.Uri: void <clinit>()>
STATIC edge: $r3 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$000(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.Exception)>($r5, r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$000(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$200(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>($r4) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$200(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$100(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.String)>($r3, r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$100(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$000(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.Exception)>($r4, r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$000(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$100(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.String)>($r3, r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$100(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r7) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r7) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.stream.InputStreamDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.InputStream)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: r22 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i5) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.stream.InputStreamDataEmitter: void access$000(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>($r20, $r19) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void access$000(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.stream.InputStreamDataEmitter: void access$000(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>($r13, null) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void access$000(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>
STATIC edge: r22 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>($i5) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, 262144) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i4 = staticinvoke <java.lang.Math: int max(int,int)>($i3, 4096) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r5, $r4) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r5, $r4) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r5, $r4) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r5, $r4) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)>($r4) in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)>
CLINIT edge: <com.koushikdutta.async.ArrayDeque: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.ArrayDeque: void <clinit>()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.AsyncNetworkSocket: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.ThreadQueue: java.util.WeakHashMap mThreadQueues> = $r0 in <com.koushikdutta.async.ThreadQueue: void <clinit>()> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.ThreadQueue: java.util.WeakHashMap mThreadQueues> in <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.AsyncServer: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()>() in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()>
STATIC edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.net.preferIPv6Addresses", "false") in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.net.preferIPv4Stack", "true") in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>
CLINIT edge: $r1 = new com.koushikdutta.async.AsyncServer in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: java.lang.String setProperty(java.lang.String,java.lang.String)>("java.net.preferIPv4Stack", "true") in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.AsyncServer$Scheduler in <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()>
CLINIT edge: $r2 = <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService synchronousWorkers> in <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.lang.System: void <clinit>()>
STATIC edge: l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.lang.System: long currentTimeMillis()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r11) in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: <com.koushikdutta.async.ByteBufferList: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>(0) in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>
CLINIT edge: <com.koushikdutta.async.util.Charsets: java.nio.charset.Charset US_ASCII> = $r0 in <com.koushikdutta.async.util.Charsets: void <clinit>()> ==> <com.koushikdutta.async.util.Charsets: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("UTF-8") in <com.koushikdutta.async.util.Charsets: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
STATIC edge: $r0 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>("US-ASCII") in <com.koushikdutta.async.util.Charsets: void <clinit>()> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue reclaimed> in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r3 = <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue reclaimed> in <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
STATIC edge: $r0 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
CLINIT edge: <com.koushikdutta.async.Util: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.Util: void <clinit>()> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r1, r2) in <com.koushikdutta.async.AsyncServer: void access$700(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r1, r2) in <com.koushikdutta.async.AsyncServer: void access$700(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
CLINIT edge: <com.koushikdutta.async.ServerSocketChannelWrapper: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>(r0) in <com.koushikdutta.async.AsyncServer: void access$100(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>(r0) in <com.koushikdutta.async.AsyncServer: void access$100(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>
CLINIT edge: $r0 = <com.koushikdutta.async.ThreadQueue: java.util.WeakHashMap mThreadQueues> in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ThreadQueue: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.future.SimpleCancellable: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()> ==> <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
STATIC edge: $r6 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("TLS") in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
STATIC edge: $r1 = staticinvoke <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>("Default") in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLContext getInstance(java.lang.String)>
CLINIT edge: <com.koushikdutta.async.AsyncSSLSocketWrapper: javax.net.ssl.SSLContext defaultSSLContext> = $r6 in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.BufferedDataSink: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.BufferedDataSink: void <clinit>()> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.DataEmitterReader: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.DataEmitterReader: void <clinit>()> ==> <com.koushikdutta.async.DataEmitterReader: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.FilteredDataSink: void <clinit>()> ==> <com.koushikdutta.async.FilteredDataSink: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.FilteredDataSink: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.FilteredDataSink: void <clinit>()> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.LineEmitter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.LineEmitter: void <clinit>()> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.PushParser: java.util.Hashtable mTable> = $r0 in <com.koushikdutta.async.PushParser: void <clinit>()> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
CLINIT edge: $r1 = <com.koushikdutta.async.PushParser: java.util.Hashtable mTable> in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <java.lang.Long: java.lang.Class TYPE> = null in <java.lang.Long: void <clinit>()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: <java.lang.Byte: java.lang.Class TYPE> = null in <java.lang.Byte: void <clinit>()> ==> <java.lang.Byte: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.future.Continuation$2: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.future.Continuation$2: void <clinit>()> ==> <com.koushikdutta.async.future.Continuation$2: void <clinit>()>
STATIC edge: $i1 = staticinvoke <com.koushikdutta.async.dns.Dns: int setFlag(int,int,int)>(i0, 1, 8) in <com.koushikdutta.async.dns.Dns: int setRecursion(int)> ==> <com.koushikdutta.async.dns.Dns: int setFlag(int,int,int)>
STATIC edge: $i1 = staticinvoke <com.koushikdutta.async.dns.Dns: int setFlag(int,int,int)>(i0, 0, 0) in <com.koushikdutta.async.dns.Dns: int setQuery(int)> ==> <com.koushikdutta.async.dns.Dns: int setFlag(int,int,int)>
CLINIT edge: $r1 = <java.nio.ByteOrder: java.nio.ByteOrder BIG_ENDIAN> in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.nio.ByteOrder: void <clinit>()>
STATIC edge: $r18 = staticinvoke <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>($r10, r12) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
CLINIT edge: $r5 = new java.lang.String in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r10 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: <android.net.Uri: android.net.Uri EMPTY> = null in <android.net.Uri: void <clinit>()> ==> <android.net.Uri: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Comparator FIELD_NAME_COMPARATOR> = $r0 in <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR> = null in <android.text.TextUtils: void <clinit>()> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: $r0 = new android.text.TextUtils$TruncateAt in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Style in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Cap in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Join in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Align in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Path$FillType in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Path$Direction in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Shader$TileMode in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Matrix$ScaleToFit in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.AsyncHttpClient: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.AsyncHttpRequest: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()>
CLINIT edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.agent") in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.version") in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
STATIC edge: r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("http.agent") in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.libcore.HttpDate: java.lang.ThreadLocal STANDARD_DATE_FORMAT> = $r0 in <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()>
CLINIT edge: $r1 = newarray (java.lang.String)[14] in <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("SHA-1") in <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
STATIC edge: $r3 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r2, 0) in <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
STATIC edge: r1 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r0) in <com.koushikdutta.async.http.WebSocketImpl: byte[] toByteArray(java.util.UUID)> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
CLINIT edge: $r0 = new com.koushikdutta.async.http.libcore.ResponseSource in <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>(r0, r1, r2) in <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>(r0, r1, r2) in <com.koushikdutta.async.http.AsyncHttpClient: void access$500(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void access$400(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void access$400(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: <com.koushikdutta.async.http.HybiParser$5: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.HybiParser$5: void <clinit>()> ==> <com.koushikdutta.async.http.HybiParser$5: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.filter.InflaterInputFilter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <clinit>()> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.filter.ContentLengthFilter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.filter.ContentLengthFilter: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void <clinit>()>
CLINIT edge: $r0 = newarray (java.lang.Integer)[6] in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r8) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r9 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r7 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r0) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(10) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(9) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(8) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(2) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(1) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: <com.koushikdutta.async.http.HybiParser: java.util.List OPCODES> = $r7 in <com.koushikdutta.async.http.HybiParser: void <clinit>()> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.body.MultipartFormDataBody$6: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <clinit>()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <clinit>()>
CLINIT edge: $r0 = new com.koushikdutta.async.http.filter.ChunkedInputFilter$State in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()>
CLINIT edge: $r12 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State COMPLETE> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r13 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: $r10 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_CRLF> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r11 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: $r8 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_CR> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r9 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: $r6 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r7 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: $r4 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State CHUNK_LEN_CR> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: $r5 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: int[] $SwitchMap$com$koushikdutta$async$http$filter$ChunkedInputFilter$State> = $r1 in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.server.BoundaryEmitter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.body.Part: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.body.Part: void <clinit>()> ==> <com.koushikdutta.async.http.body.Part: void <clinit>()>
CLINIT edge: <java.lang.Short: java.lang.Class TYPE> = null in <java.lang.Short: void <clinit>()> ==> <java.lang.Short: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> = "MD5" in <com.koushikdutta.async.util.FileCache: void <clinit>()> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <clinit>()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <clinit>()>
CLINIT edge: $r0 = <com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: r11 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>($r9) in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>
STATIC edge: r2 = staticinvoke <java.security.Security: java.security.Provider[] getProviders()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.security.Security: java.security.Provider[] getProviders()>
CLINIT edge: <com.koushikdutta.async.util.FileCache: java.lang.String hashAlgorithm> = $r8 in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.server.AsyncHttpServer: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()>
STATIC edge: $r19 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r16 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(302) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r13 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(301) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r10 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(101) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(206) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> = $z1 in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.PorterDuff$Mode in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Bitmap$Config in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Bitmap$CompressFormat in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Region$Op in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Canvas$EdgeType in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Canvas$VertexMode in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <clinit>()>
CLINIT edge: <org.json.JSONObject: java.lang.Object NULL> = null in <org.json.JSONObject: void <clinit>()> ==> <org.json.JSONObject: void <clinit>()>
CLINIT edge: $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: <android.os.Build$VERSION: java.lang.String INCREMENTAL> = null in <android.os.Build$VERSION: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r1, r2) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>(r1) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "Selector exception", $r17) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r1, r2) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
CLINIT edge: $r9 = <com.koushikdutta.async.AsyncServer$Scheduler: com.koushikdutta.async.AsyncServer$Scheduler INSTANCE> in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)>(r1) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)>(r0) in <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)>(r0) in <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4) in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r4) in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $r9 = <java.net.Proxy$Type: java.net.Proxy$Type HTTP> in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.Proxy$Type: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.net.URI: java.net.URI create(java.lang.String)>($r4) in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.URI: java.net.URI create(java.lang.String)>
STATIC edge: $r2 = staticinvoke <java.net.ProxySelector: java.net.ProxySelector getDefault()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.ProxySelector: java.net.ProxySelector getDefault()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: l0 = staticinvoke <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>(r0, r1) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", "wtf") in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r64) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r63) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: l0 = staticinvoke <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>(r0, r1) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)>
CLINIT edge: $r60 = new com.koushikdutta.async.AsyncNetworkSocket in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
CLINIT edge: $r59 = new com.koushikdutta.async.AsyncNetworkSocket in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void <init>()> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void <init>(int)> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque: void allocateElements(int)>(i0) in <com.koushikdutta.async.ArrayDeque: void <init>(int)> ==> <com.koushikdutta.async.ArrayDeque: void allocateElements(int)>
SPECIAL edge: specialinvoke r0.<java.util.AbstractCollection: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.AbstractCollection: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque: void allocateElements(int)>($i0) in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <com.koushikdutta.async.ArrayDeque: void allocateElements(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: boolean addAll(java.util.Collection)>(r1) in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.concurrent.LinkedBlockingQueue: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <com.koushikdutta.async.ArrayDeque: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.PriorityQueue: int size()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.koushikdutta.async.ArrayDeque: void <init>(java.util.Collection)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("e == null") in <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ArrayDeque: void doubleCapacity()>() in <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void doubleCapacity()>
CLINIT edge: $z0 = <com.koushikdutta.async.ArrayDeque: boolean $assertionsDisabled> in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r2, i2, i0) in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, r2, 0, i2) in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, i0, r2, 0, i2) in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <java.lang.System: void <clinit>()>
SPECIAL edge: specialinvoke $r4.<java.lang.NullPointerException: void <init>(java.lang.String)>("e == null") in <com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ArrayDeque: void doubleCapacity()>() in <com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void doubleCapacity()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: boolean offerFirst(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: boolean offerLast(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object pollFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object pollFirst()>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object pollLast()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object removeLast()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object pollLast()>
SPECIAL edge: specialinvoke $r2.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object removeLast()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object getFirst()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object getLast()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.accounts.Account: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.ComponentName: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.IntentSender: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.pm.Signature: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.os.Messenger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.ContentValues: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.graphics.Region: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.graphics.Matrix: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.res.Configuration: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.content.SyncAdapterType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <org.json.JSONArray: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <android.util.Pair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.net.InetSocketAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ArrayDeque: boolean delete(int)>(i3) in <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: boolean delete(int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i21, i6) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 1, r1, 0, i3) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i12, r1, i4, $i11) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i15, r1, i4, i8) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i18, $i17) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, 1, i4) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i2, r1, $i21, i6) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i12, r1, i4, $i11) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, $i15, r1, i4, i8) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, r1, 1, i4) in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.accounts.Account: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.ComponentName: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.pm.Signature: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.graphics.Region: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.graphics.Matrix: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.InetSocketAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.SyncAdapterType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.ContentValues: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <org.json.JSONArray: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.IntentSender: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.content.res.Configuration: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.util.Pair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <android.os.Messenger: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ArrayDeque: boolean delete(int)>(i5) in <com.koushikdutta.async.ArrayDeque: boolean removeLastOccurrence(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: boolean delete(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: boolean add(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void addLast(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: boolean offerLast(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: boolean offer(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: boolean offerLast(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object pollFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object poll()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object pollFirst()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object getFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object element()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object getFirst()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object peekFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object peek()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peekFirst()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: void push(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object pop()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object removeFirst()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)>(r1, null) in <com.koushikdutta.async.ArrayDeque: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)>(r1, null) in <com.koushikdutta.async.ArrayDeque: java.util.Iterator descendingIterator()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.accounts.Account: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.ComponentName: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.pm.Signature: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.graphics.Region: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.graphics.Matrix: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.InetSocketAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.SyncAdapterType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.ContentValues: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <org.json.JSONArray: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.IntentSender: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.content.res.Configuration: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.util.Pair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.ArrayDeque: boolean contains(java.lang.Object)> ==> <android.os.Messenger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>(r1) in <com.koushikdutta.async.ArrayDeque: boolean remove(java.lang.Object)> ==> <com.koushikdutta.async.ArrayDeque: boolean removeFirstOccurrence(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>($r1) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i9, r1, 0, $i10) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r1, i6, $i8) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i7, r1, 0, i6) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, $i9, r1, 0, $i10) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r3, $i7, r1, 0, i6) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.koushikdutta.async.ArrayDeque: int size()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>(r6) in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Class: java.lang.Class getComponentType()>
SPECIAL edge: $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()> ==> <com.koushikdutta.async.ArrayDeque: com.koushikdutta.async.ArrayDeque clone()>
SPECIAL edge: specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.util.ConcurrentModificationException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()> ==> <java.lang.IllegalStateException: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.util.NoSuchElementException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.ConcurrentModificationException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()> ==> <java.util.ConcurrentModificationException: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()> ==> <java.lang.IllegalStateException: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)>($r2, $i0, $r1) in <com.koushikdutta.async.AsyncDatagramSocket$1: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void <init>()>() in <com.koushikdutta.async.AsyncDatagramSocket: void <init>()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <init>()>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.AsyncNetworkSocket: void <init>()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncDatagramSocket: void disconnect()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.DatagramChannelWrapper: void disconnect()>() in <com.koushikdutta.async.AsyncDatagramSocket: void disconnect()> ==> <com.koushikdutta.async.DatagramChannelWrapper: void disconnect()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: java.net.InetSocketAddress getRemoteAddress()>() in <com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.net.InetSocketAddress getRemoteAddress()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.DatagramChannelWrapper: java.net.InetSocketAddress getRemoteAddress()>() in <com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()> ==> <com.koushikdutta.async.DatagramChannelWrapper: java.net.InetSocketAddress getRemoteAddress()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncDatagramSocket: void connect(java.net.InetSocketAddress)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.AsyncDatagramSocket$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.lang.String,int,java.nio.ByteBuffer)>(r0, r8, i0, r6) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.lang.String,int,java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r11) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>(r8, i0) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.lang.String,int,java.nio.ByteBuffer)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.AsyncDatagramSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.AsyncDatagramSocket$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.net.InetSocketAddress,java.nio.ByteBuffer)>(r0, r8, r6) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.net.InetSocketAddress,java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r12) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $r10 = virtualinvoke r8.<java.net.InetSocketAddress: java.lang.String getHostName()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <java.net.InetSocketAddress: java.lang.String getHostName()>
VIRTUAL edge: $i0 = virtualinvoke r8.<java.net.InetSocketAddress: int getPort()>() in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <java.net.InetSocketAddress: int getPort()>
SPECIAL edge: specialinvoke $r7.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r10, $i0) in <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: void shutdownOutput()>() in <com.koushikdutta.async.AsyncNetworkSocket: void end()> ==> <com.koushikdutta.async.DatagramChannelWrapper: void shutdownOutput()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: void shutdownOutput()>() in <com.koushikdutta.async.AsyncNetworkSocket: void end()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void shutdownOutput()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: void shutdownOutput()>() in <com.koushikdutta.async.AsyncNetworkSocket: void end()> ==> <com.koushikdutta.async.SocketChannelWrapper: void shutdownOutput()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: boolean isChunked()> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isChunked()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: boolean isChunked()> ==> <com.koushikdutta.async.ChannelWrapper: boolean isChunked()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()> ==> <com.koushikdutta.async.Util$4: void onWriteable()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()> ==> <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r15.<com.koushikdutta.async.AsyncNetworkSocket$1: void <init>(com.koushikdutta.async.AsyncNetworkSocket,com.koushikdutta.async.ByteBufferList)>(r0, r5) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void <init>(com.koushikdutta.async.AsyncNetworkSocket,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r12.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r15) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.SocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isChunked()>
VIRTUAL edge: $z2 = virtualinvoke $r9.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ChannelWrapper: boolean isChunked()>
SPECIAL edge: specialinvoke $r16.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: i4 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: r6 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>(r6) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>
VIRTUAL edge: $i1 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer[])>(r6) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DatagramChannelWrapper: int write(java.nio.ByteBuffer[])>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer[])>(r6) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.SocketChannelWrapper: int write(java.nio.ByteBuffer[])>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer[])>(r6) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)>($i1) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>($r17) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>($r18) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.AsyncServer: void onDataSent(int)>($i3) in <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncServer: void onDataSent(int)>
CLINIT edge: $z0 = <com.koushikdutta.async.AsyncNetworkSocket: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.AsyncNetworkSocket$2: void <init>(com.koushikdutta.async.AsyncNetworkSocket,java.nio.ByteBuffer)>(r0, r5) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void <init>(com.koushikdutta.async.AsyncNetworkSocket,java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r14) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.SocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z2 = virtualinvoke $r8.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isChunked()>
VIRTUAL edge: $z2 = virtualinvoke $r8.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ChannelWrapper: boolean isChunked()>
SPECIAL edge: specialinvoke $r15.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer)>(r5) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.DatagramChannelWrapper: int write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer)>(r5) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.SocketChannelWrapper: int write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ChannelWrapper: int write(java.nio.ByteBuffer)>(r5) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)>($i1) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>() in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>($r16) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>($r17) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.AsyncServer: void onDataSent(int)>($i3) in <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncServer: void onDataSent(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>() in <com.koushikdutta.async.AsyncNetworkSocket: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>(null) in <com.koushikdutta.async.AsyncNetworkSocket: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ChannelWrapper: void close()>() in <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()> ==> <com.koushikdutta.async.ChannelWrapper: void close()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()> ==> <com.koushikdutta.async.SocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: boolean isConnected()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncNetworkSocket: void pause()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.AsyncNetworkSocket$3: void <init>(com.koushikdutta.async.AsyncNetworkSocket)>(r0) in <com.koushikdutta.async.AsyncNetworkSocket: void pause()> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void <init>(com.koushikdutta.async.AsyncNetworkSocket)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r7) in <com.koushikdutta.async.AsyncNetworkSocket: void pause()> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>() in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Thread getAffinity()>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.AsyncNetworkSocket$4: void <init>(com.koushikdutta.async.AsyncNetworkSocket)>(r0) in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void <init>(com.koushikdutta.async.AsyncNetworkSocket)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r8) in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void spitPending()>() in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void spitPending()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>($r7) in <com.koushikdutta.async.AsyncNetworkSocket: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r2) in <com.koushikdutta.async.AsyncNetworkSocket: void spitPending()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r2) in <com.koushikdutta.async.AsyncNetworkSocket: void spitPending()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: int getLocalPort()>() in <com.koushikdutta.async.AsyncNetworkSocket: int getLocalPort()> ==> <com.koushikdutta.async.DatagramChannelWrapper: int getLocalPort()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: int getLocalPort()>() in <com.koushikdutta.async.AsyncNetworkSocket: int getLocalPort()> ==> <com.koushikdutta.async.SocketChannelWrapper: int getLocalPort()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: int getLocalPort()>() in <com.koushikdutta.async.AsyncNetworkSocket: int getLocalPort()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: int getLocalPort()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: java.lang.Object getSocket()>() in <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()> ==> <com.koushikdutta.async.DatagramChannelWrapper: java.lang.Object getSocket()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: java.lang.Object getSocket()>() in <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()> ==> <com.koushikdutta.async.SocketChannelWrapper: java.lang.Object getSocket()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ChannelWrapper: java.lang.Object getSocket()>() in <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: java.lang.Object getSocket()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>(com.koushikdutta.async.AsyncServer$1)>(null) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>(com.koushikdutta.async.AsyncServer$1)>
EXECUTOR edge: virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r0) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.os.Handler: android.os.Looper getLooper()>() in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <android.os.Handler: android.os.Looper getLooper()>
VIRTUAL edge: virtualinvoke r2.<android.os.Handler: boolean post(java.lang.Runnable)>($r0) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.os.Looper: java.lang.Thread getThread()>() in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <android.os.Looper: java.lang.Thread getThread()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Runnable)>($r0) in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r7.<java.util.concurrent.Semaphore: void release()>() in <com.koushikdutta.async.AsyncServer: void post(android.os.Handler,java.lang.Runnable)> ==> <java.util.concurrent.Semaphore: void release()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer: void <init>(java.lang.String)>(null) in <com.koushikdutta.async.AsyncServer: void <init>()> ==> <com.koushikdutta.async.AsyncServer: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(1, $r2) in <com.koushikdutta.async.AsyncServer: void <init>(java.lang.String)> ==> <java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r4.<java.util.PriorityQueue: boolean remove(java.lang.Object)>(r3) in <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)> ==> <java.util.PriorityQueue: boolean remove(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r3.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <java.util.PriorityQueue: int size()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.AsyncServer$Scheduled: void <init>(java.lang.Runnable,long)>(r5, l4) in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <com.koushikdutta.async.AsyncServer$Scheduled: void <init>(java.lang.Runnable,long)>
VIRTUAL edge: virtualinvoke $r6.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r4) in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <java.util.PriorityQueue: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer: void run(boolean)>(1) in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <com.koushikdutta.async.AsyncServer: void run(boolean)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>() in <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)> ==> <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>
CLINIT edge: $z2 = <com.koushikdutta.async.AsyncServer: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r22, r23) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "Selector closed", $r15) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r22, r23) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
STATIC edge: $r6 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: $r4 = staticinvoke <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()>
STATIC edge: $r11 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("NIO", "Reentrant call") in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <android.util.Log: int i(java.lang.String,java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r22, r23) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, r22, r23) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>(r1, 0L) in <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncServer$2: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.CompletedCallback,java.lang.Exception)>(r0, r2, r3) in <com.koushikdutta.async.AsyncServer: java.lang.Object post(com.koushikdutta.async.callback.CompletedCallback,java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer$2: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.CompletedCallback,java.lang.Exception)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r1) in <com.koushikdutta.async.AsyncServer: java.lang.Object post(com.koushikdutta.async.callback.CompletedCallback,java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>(r6) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r5) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.Semaphore: void <init>(int)>(0) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <java.util.concurrent.Semaphore: void <init>(int)>
VIRTUAL edge: virtualinvoke $r3.<java.util.concurrent.Semaphore: void acquire()>() in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <java.util.concurrent.Semaphore: void acquire()>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.AsyncServer$3: void <init>(com.koushikdutta.async.AsyncServer,java.lang.Runnable,java.util.concurrent.Semaphore)>(r1, r6, $r3) in <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)> ==> <com.koushikdutta.async.AsyncServer$3: void <init>(com.koushikdutta.async.AsyncServer,java.lang.Runnable,java.util.concurrent.Semaphore)>
VIRTUAL edge: z0 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>() in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>
VIRTUAL edge: virtualinvoke $r6.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r5) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.util.concurrent.Semaphore: void <init>(int)>(0) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <java.util.concurrent.Semaphore: void <init>(int)>
VIRTUAL edge: virtualinvoke $r8.<java.util.concurrent.Semaphore: void acquire()>() in <com.koushikdutta.async.AsyncServer: void stop()> ==> <java.util.concurrent.Semaphore: void acquire()>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.AsyncServer$4: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.concurrent.Semaphore)>(r0, r2, $r8) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer$4: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.concurrent.Semaphore)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.AsyncServer$Scheduled: void <init>(java.lang.Runnable,long)>($r11, 0L) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.AsyncServer$Scheduled: void <init>(java.lang.Runnable,long)>
VIRTUAL edge: virtualinvoke $r12.<java.util.PriorityQueue: boolean add(java.lang.Object)>($r10) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <java.util.PriorityQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.SelectorWrapper: void wakeupOnce()>() in <com.koushikdutta.async.AsyncServer: void stop()> ==> <com.koushikdutta.async.SelectorWrapper: void wakeupOnce()>
SPECIAL edge: specialinvoke $r13.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(1, $r14) in <com.koushikdutta.async.AsyncServer: void stop()> ==> <java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>(com.koushikdutta.async.AsyncServer$1)>(null) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)> ==> <com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>(com.koushikdutta.async.AsyncServer$1)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.AsyncServer$5: void <init>(com.koushikdutta.async.AsyncServer,java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback,com.koushikdutta.async.AsyncServer$ObjectHolder)>(r2, r4, i0, r5, $r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)> ==> <com.koushikdutta.async.AsyncServer$5: void <init>(com.koushikdutta.async.AsyncServer,java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback,com.koushikdutta.async.AsyncServer$ObjectHolder)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r3) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.net.InetSocketAddress: boolean isUnresolved()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.net.InetSocketAddress: boolean isUnresolved()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.net.InetSocketAddress: java.lang.String getHostName()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.net.InetSocketAddress: java.lang.String getHostName()>
SPECIAL edge: $r10 = specialinvoke r3.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>(r0, r8) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>
VIRTUAL edge: r5 = virtualinvoke r3.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getByName(java.lang.String)>($r4) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getByName(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r5) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.AsyncServer$7: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,java.net.InetSocketAddress)>(r3, r8, $r1, r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer$7: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,java.net.InetSocketAddress)>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r7) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r7) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
CLINIT edge: $z0 = <com.koushikdutta.async.AsyncServer: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>($r2, r3) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.lang.String,int,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.AsyncServer$8: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.SimpleFuture)>(r3, r4, $r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer$8: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.SimpleFuture)>
EXECUTOR edge: interfaceinvoke $r5.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r2) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke $r5.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r2) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)> ==> <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)>(r1) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getByName(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.AsyncServer$9: void <init>(com.koushikdutta.async.AsyncServer)>(r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getByName(java.lang.String)> ==> <com.koushikdutta.async.AsyncServer$9: void <init>(com.koushikdutta.async.AsyncServer)>
INTERFACE edge: $r4 = interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getByName(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.lang.String,int)> ==> <com.koushikdutta.async.AsyncDatagramSocket: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void attach(java.nio.channels.DatagramChannel)>(r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.lang.String,int)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.DatagramChannel)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.AsyncServer$10: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,int,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel)>(r3, r5, i0, $r1, r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.lang.String,int)> ==> <com.koushikdutta.async.AsyncServer$10: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,int,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r4) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.lang.String,int)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)>(null, 0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram()> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)> ==> <com.koushikdutta.async.AsyncDatagramSocket: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void attach(java.nio.channels.DatagramChannel)>(r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.DatagramChannel)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.AsyncServer$11: void <init>(com.koushikdutta.async.AsyncServer,boolean,java.nio.channels.DatagramChannel,java.net.SocketAddress,com.koushikdutta.async.AsyncDatagramSocket)>(r3, z0, r0, r5, $r1) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)> ==> <com.koushikdutta.async.AsyncServer$11: void <init>(com.koushikdutta.async.AsyncServer,boolean,java.nio.channels.DatagramChannel,java.net.SocketAddress,com.koushikdutta.async.AsyncDatagramSocket)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r4) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)> ==> <com.koushikdutta.async.AsyncDatagramSocket: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void attach(java.nio.channels.DatagramChannel)>(r0) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.DatagramChannel)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.AsyncServer$12: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel,java.net.SocketAddress)>(r3, $r1, r0, r5) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)> ==> <com.koushikdutta.async.AsyncServer$12: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel,java.net.SocketAddress)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r4) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r1) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer getCurrentThreadServer()> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncServer$14: void <init>(com.koushikdutta.async.AsyncServer)>(r0) in <com.koushikdutta.async.AsyncServer: void dump()> ==> <com.koushikdutta.async.AsyncServer$14: void <init>(com.koushikdutta.async.AsyncServer)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r1) in <com.koushikdutta.async.AsyncServer: void dump()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)>($r2, $r1) in <com.koushikdutta.async.AsyncDatagramSocket$2: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.net.DatagramSocket: int getLocalPort()>() in <com.koushikdutta.async.DatagramChannelWrapper: int getLocalPort()> ==> <java.net.DatagramSocket: int getLocalPort()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.DatagramChannelWrapper: boolean isConnected()>() in <com.koushikdutta.async.DatagramChannelWrapper: int read(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isConnected()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.DatagramChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r1, 1) in <com.koushikdutta.async.DatagramChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)> ==> <com.koushikdutta.async.DatagramChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ArrayDeque: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>()> ==> <com.koushikdutta.async.ArrayDeque: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>(java.nio.ByteBuffer[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>(r3) in <com.koushikdutta.async.ByteBufferList: void <init>(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ArrayDeque: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ArrayDeque: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r4) in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ArrayDeque: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <init>(byte[])> ==> <com.koushikdutta.async.ArrayDeque: void <init>()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>() in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r9) in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>(r5) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object[] toArray(java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: void clear()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()> ==> <com.koushikdutta.async.ArrayDeque: void clear()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(2) in <com.koushikdutta.async.ByteBufferList: short peekShort()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r15) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r26) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: i6 = staticinvoke <java.lang.Math: int min(int,int)>($i4, $i5) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i1) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r15) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
CLINIT edge: r3 = staticinvoke <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)>(i1) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r12 = <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer EMPTY_BYTEBUFFER> in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(4) in <com.koushikdutta.async.ByteBufferList: int peekInt()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(8) in <com.koushikdutta.async.ByteBufferList: long peekLong()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r2 = specialinvoke r1.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(i0) in <com.koushikdutta.async.ByteBufferList: byte[] peekBytes(int)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(4) in <com.koushikdutta.async.ByteBufferList: int getInt()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(1) in <com.koushikdutta.async.ByteBufferList: char getByteChar()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(2) in <com.koushikdutta.async.ByteBufferList: int getShort()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(1) in <com.koushikdutta.async.ByteBufferList: byte get()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(8) in <com.koushikdutta.async.ByteBufferList: long getLong()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)>(r1, 0, $i0) in <com.koushikdutta.async.ByteBufferList: void get(byte[])> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length") in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>() in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
SPECIAL edge: specialinvoke $r9.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length") in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r5) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r3) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r3) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r10.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>(r1, $i0) in <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r0.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>($r3) in <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r0, i0) in <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>($i1) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>(0) in <com.koushikdutta.async.ByteBufferList: void trim()> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ByteBufferList: void addRemaining(int)>($i1) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void addRemaining(int)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void trim()>() in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void trim()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void trim()>() in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void trim()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: java.lang.Object getLast()>() in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object getLast()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.ArrayDeque: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.ByteBufferList: void addRemaining(int)>($i1) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void addRemaining(int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: java.lang.Object getFirst()>() in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object getFirst()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r0) in <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void recycle()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ByteBufferList: int size()> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.lang.String peekString()>() in <com.koushikdutta.async.ByteBufferList: void spewString()> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String peekString()>
VIRTUAL edge: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r2) in <com.koushikdutta.async.ByteBufferList: void spewString()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)>(null) in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString()> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.koushikdutta.async.ArrayDeque: java.util.Iterator iterator()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r8.<java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>(r12, i3, i4, r11) in <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)> ==> <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)>(null) in <com.koushikdutta.async.ByteBufferList: java.lang.String readString()> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)>(r1) in <com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String peekString(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: $i17 = virtualinvoke r2.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: int size()>
VIRTUAL edge: $r9 = virtualinvoke r2.<java.util.PriorityQueue: java.lang.Object peek()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: java.lang.Object peek()>
VIRTUAL edge: $r11 = virtualinvoke r2.<java.util.PriorityQueue: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: java.lang.Object remove()>
VIRTUAL edge: virtualinvoke r2.<java.util.PriorityQueue: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: boolean add(java.lang.Object)>
VIRTUAL edge: $i15 = virtualinvoke r2.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: int size()>
SPECIAL edge: specialinvoke $r8.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke r7.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.util.PriorityQueue: int size()>
VIRTUAL edge: $r2 = virtualinvoke r7.<java.util.PriorityQueue: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.util.PriorityQueue: java.lang.Object remove()>
VIRTUAL edge: $i3 = virtualinvoke r7.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.util.PriorityQueue: int size()>
VIRTUAL edge: $i8 = virtualinvoke r7.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.util.PriorityQueue: int size()>
SPECIAL edge: specialinvoke $r4.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer obtain(int)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $i4 = virtualinvoke r0.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.util.PriorityQueue: int size()>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.util.PriorityQueue: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.util.PriorityQueue: java.lang.Object remove()>
VIRTUAL edge: $i14 = virtualinvoke r0.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.util.PriorityQueue: int size()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void obtainArray(java.nio.ByteBuffer[],int)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.ObjectOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.DataOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.BufferedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <java.util.zip.ZipOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r3, i3, i4) in <com.koushikdutta.async.ByteBufferList: void writeOutputStream(java.io.OutputStream,java.nio.ByteBuffer)> ==> <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.Allocator: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.Allocator: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.net.Socket: int getLocalPort()>() in <com.koushikdutta.async.SocketChannelWrapper: int getLocalPort()> ==> <java.net.Socket: int getLocalPort()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.SocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>(r1, 8) in <com.koushikdutta.async.SocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)> ==> <com.koushikdutta.async.ChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector,int)>
VIRTUAL edge: virtualinvoke $r2.<java.net.Socket: void shutdownOutput()>() in <com.koushikdutta.async.SocketChannelWrapper: void shutdownOutput()> ==> <java.net.Socket: void shutdownOutput()>
VIRTUAL edge: virtualinvoke $r2.<java.net.Socket: void shutdownInput()>() in <com.koushikdutta.async.SocketChannelWrapper: void shutdownInput()> ==> <java.net.Socket: void shutdownInput()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncNetworkSocket: void resume()>() in <com.koushikdutta.async.AsyncNetworkSocket$4: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
INTERFACE edge: $z4 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r14 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i3 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r1) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handler: ") in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r14) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r17.<java.io.PrintStream: void println(java.lang.String)>($r20) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r22.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>("mDataHandler failed to consume data, yet remains the mDataHandler.") in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("handler: ") in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r23) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<java.io.PrintStream: void println(java.lang.String)>($r6) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("emitter: ") in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<java.io.PrintStream: void println(java.lang.String)>($r11) in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Not all data was consumed by Util.emitAllData") in <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.Util$1: void <init>(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$1: void <init>(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.Util$2: void <init>(com.koushikdutta.async.DataSink,java.io.InputStream,long,com.koushikdutta.async.callback.CompletedCallback)>(r4, r5, l0, $r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$2: void <init>(com.koushikdutta.async.DataSink,java.io.InputStream,long,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r3) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r0) in <com.koushikdutta.async.Util: void pump(java.io.InputStream,long,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.Util$3: void <init>(com.koushikdutta.async.DataSink)>(r1) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$3: void <init>(com.koushikdutta.async.DataSink)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r0) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.Util$4: void <init>(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.DataEmitter)>($r0, r3) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$4: void <init>(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.DataEmitter)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r4) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.Util$5: void <init>(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(r3, r1, r6) in <com.koushikdutta.async.Util: void pump(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$5: void <init>(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r5) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.Util$6: void <init>(java.io.InputStream,com.koushikdutta.async.callback.CompletedCallback)>($r3, r1) in <com.koushikdutta.async.Util: void pump(java.io.File,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$6: void <init>(java.io.InputStream,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.Util$7: void <init>(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r0, r2, r3) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$7: void <init>(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2) in <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2) in <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.koushikdutta.async.wrapper.AsyncSocketWrapper: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.Util: com.koushikdutta.async.AsyncSocket getWrappedSocket(com.koushikdutta.async.AsyncSocket,java.lang.Class)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncSocket getSocket()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2) in <com.koushikdutta.async.Util: com.koushikdutta.async.DataEmitter getWrappedDataEmitter(com.koushikdutta.async.DataEmitter,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.Class: boolean isInstance(java.lang.Object)>(r2) in <com.koushikdutta.async.Util: com.koushikdutta.async.DataEmitter getWrappedDataEmitter(com.koushikdutta.async.DataEmitter,java.lang.Class)> ==> <java.lang.Class: boolean isInstance(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.koushikdutta.async.wrapper.AsyncSocketWrapper: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.Util: com.koushikdutta.async.DataEmitter getWrappedDataEmitter(com.koushikdutta.async.DataEmitter,java.lang.Class)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncSocket getSocket()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int v(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int d(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int i(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int e(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int println(int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>($r1) in <com.koushikdutta.async.AsyncNetworkSocket$2: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncNetworkSocket: void pause()>() in <com.koushikdutta.async.AsyncNetworkSocket$3: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.AsyncNetworkSocket$1: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>(java.lang.Throwable)>(r1) in <com.koushikdutta.async.AsyncServer$AsyncSelectorException: void <init>(java.lang.Exception)> ==> <java.io.IOException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.SelectorWrapper: void <init>(java.nio.channels.Selector)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(0) in <com.koushikdutta.async.SelectorWrapper: void <init>(java.nio.channels.Selector)> ==> <java.util.concurrent.Semaphore: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.SelectorWrapper: void select(long)>(0L) in <com.koushikdutta.async.SelectorWrapper: void select()> ==> <com.koushikdutta.async.SelectorWrapper: void select(long)>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.Semaphore: int drainPermits()>() in <com.koushikdutta.async.SelectorWrapper: void select(long)> ==> <java.util.concurrent.Semaphore: int drainPermits()>
VIRTUAL edge: virtualinvoke $r3.<java.util.concurrent.Semaphore: void release(int)>(2147483647) in <com.koushikdutta.async.SelectorWrapper: void select(long)> ==> <java.util.concurrent.Semaphore: void release(int)>
VIRTUAL edge: virtualinvoke $r6.<java.util.concurrent.Semaphore: void release(int)>(2147483647) in <com.koushikdutta.async.SelectorWrapper: void select(long)> ==> <java.util.concurrent.Semaphore: void release(int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.util.concurrent.Semaphore: boolean tryAcquire()>() in <com.koushikdutta.async.SelectorWrapper: void wakeupOnce()> ==> <java.util.concurrent.Semaphore: boolean tryAcquire()>
VIRTUAL edge: $z3 = virtualinvoke $r7.<java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(10L, $r6) in <com.koushikdutta.async.SelectorWrapper: void wakeupOnce()> ==> <java.util.concurrent.Semaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Handler$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Handler$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Looper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Looper)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void handleMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void dispatchMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: java.lang.String getMessageName(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean post(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacks(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessage(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeMessages(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeMessages(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean hasMessages(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean hasMessages(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Looper getLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build$VERSION: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build$VERSION: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void prepare()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void prepareMainLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.Looper getMainLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void loop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.Looper myLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void setMessageLogging(android.util.Printer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.MessageQueue myQueue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void quit()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: java.lang.Thread getThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.StreamUtility: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)> ==> <com.koushikdutta.async.DatagramChannelWrapper: int read(java.nio.ByteBuffer)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: int read(java.nio.ByteBuffer)>
INTERFACE edge: $i0 = interfaceinvoke r1.<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.util.StreamUtility: void fastChannelCopy(java.nio.channels.ReadableByteChannel,java.nio.channels.WritableByteChannel)> ==> <com.koushikdutta.async.SocketChannelWrapper: int read(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r0.<java.io.DataInputStream: void <init>(java.io.InputStream)>(r1) in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.DataInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.io.DataInputStream: int read(byte[])>(r3) in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.DataInputStream: int read(byte[])>
VIRTUAL edge: virtualinvoke $r0.<java.io.DataInputStream: void close()>() in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.FilterInputStream: void close()>
SPECIAL edge: specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r3, 0, $i0) in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.koushikdutta.async.util.StreamUtility: byte[] readToEndAsArray(java.io.InputStream)> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[])>($r2) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readToEnd(java.io.InputStream)> ==> <java.lang.String: void <init>(byte[])>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke r0.<java.io.File: long length()>() in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r10.<java.io.FileInputStream: void <init>(java.io.File)>(r0) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r11.<java.io.DataInputStream: void <init>(java.io.InputStream)>($r10) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.io.DataInputStream: void <init>(java.io.InputStream)>
VIRTUAL edge: virtualinvoke $r11.<java.io.DataInputStream: void readFully(byte[])>(r1) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.io.DataInputStream: void readFully(byte[])>
SPECIAL edge: specialinvoke $r12.<java.lang.String: void <init>(byte[])>(r1) in <com.koushikdutta.async.util.StreamUtility: java.lang.String readFile(java.io.File)> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.io.File: java.io.File getParentFile()>() in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: virtualinvoke $r1.<java.io.File: boolean mkdirs()>() in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r0) in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r2.<java.io.DataOutputStream: void <init>(java.io.OutputStream)>($r3) in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.DataOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r2.<java.io.DataOutputStream: void write(byte[])>($r6) in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.io.DataOutputStream: void close()>() in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: $r6 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.io.File,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.util.StreamUtility: void writeFile(java.lang.String,java.lang.String)> ==> <java.io.File: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.FileInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.PrintStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.FileOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <com.koushikdutta.async.ChannelWrapper: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.FilterOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.ByteArrayOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.ObjectOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.BufferedWriter: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.OutputStreamWriter: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.PrintWriter: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.ByteArrayInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.ObjectInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.InputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.FilterInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.util.zip.DeflaterOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.BufferedOutputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.io.BufferedInputStream: void close()>
INTERFACE edge: interfaceinvoke r2.<java.io.Closeable: void close()>() in <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <com.koushikdutta.async.util.StreamUtility: void eat(java.io.InputStream)> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <com.koushikdutta.async.util.StreamUtility: void eat(java.io.InputStream)> ==> <android.content.res.AssetManager$AssetInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <com.koushikdutta.async.util.StreamUtility: void eat(java.io.InputStream)> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <com.koushikdutta.async.util.StreamUtility: void eat(java.io.InputStream)> ==> <java.io.DataInputStream: int read(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r0) in <com.koushikdutta.async.util.StreamUtility: void eat(java.io.InputStream)> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$Scheduled: void <init>(java.lang.Runnable,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r7.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>($r4, r2, $r9, 0L) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Thread: boolean isDaemon()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: boolean isDaemon()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setDaemon(boolean)>(0) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void setDaemon(boolean)>
VIRTUAL edge: $i1 = virtualinvoke $r0.<java.lang.Thread: int getPriority()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: int getPriority()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void setPriority(int)>(5) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: java.lang.Thread newThread(java.lang.Runnable)> ==> <java.lang.Thread: void setPriority(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key Count: ") in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.util.TreeSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r7.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.util.HashSet: int size()>
VIRTUAL edge: $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>
INTERFACE edge: r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r13 = interfaceinvoke $r12.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r13.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r13.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Key: ") in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r15) in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.AsyncServer$14: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r7.<java.net.DatagramSocket: void setReuseAddress(boolean)>($z1) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <java.net.DatagramSocket: void setReuseAddress(boolean)>
VIRTUAL edge: virtualinvoke $r2.<java.net.DatagramSocket: void bind(java.net.SocketAddress)>($r3) in <com.koushikdutta.async.AsyncServer$11: void run()> ==> <java.net.DatagramSocket: void bind(java.net.SocketAddress)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.SelectorWrapper: void wakeupOnce()>() in <com.koushikdutta.async.AsyncServer$1: void run()> ==> <com.koushikdutta.async.SelectorWrapper: void wakeupOnce()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke $r1.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.Semaphore: void release()>() in <com.koushikdutta.async.AsyncServer$3: void run()> ==> <java.util.concurrent.Semaphore: void release()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r1) in <com.koushikdutta.async.AsyncServer$2: void run()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke $r25.<com.koushikdutta.async.ServerSocketChannelWrapper: void <init>(java.nio.channels.ServerSocketChannel)>(r20) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: void <init>(java.nio.channels.ServerSocketChannel)>
VIRTUAL edge: r10 = virtualinvoke $r25.<com.koushikdutta.async.ServerSocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>($r9) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>
SPECIAL edge: specialinvoke $r26.<java.net.InetSocketAddress: void <init>(int)>($i1) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <java.net.InetSocketAddress: void <init>(int)>
SPECIAL edge: specialinvoke $r27.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r5, $i0) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
VIRTUAL edge: virtualinvoke $r6.<java.net.ServerSocket: void bind(java.net.SocketAddress)>(r23) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <java.net.ServerSocket: void bind(java.net.SocketAddress)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
SPECIAL edge: specialinvoke $r28.<com.koushikdutta.async.AsyncServer$5$1: void <init>(com.koushikdutta.async.AsyncServer$5,java.nio.channels.ServerSocketChannel,com.koushikdutta.async.ServerSocketChannelWrapper,java.nio.channels.SelectionKey)>(r2, r22, $r25, r10) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.AsyncServer$5$1: void <init>(com.koushikdutta.async.AsyncServer$5,java.nio.channels.ServerSocketChannel,com.koushikdutta.async.ServerSocketChannelWrapper,java.nio.channels.SelectionKey)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.ListenCallback: void onListening(com.koushikdutta.async.AsyncServerSocket)>($r28) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onListening(com.koushikdutta.async.AsyncServerSocket)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.ListenCallback: void onListening(com.koushikdutta.async.AsyncServerSocket)>($r28) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onListening(com.koushikdutta.async.AsyncServerSocket)>
INTERFACE edge: interfaceinvoke $r19.<com.koushikdutta.async.callback.ListenCallback: void onCompleted(java.lang.Exception)>($r30) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r19.<com.koushikdutta.async.callback.ListenCallback: void onCompleted(java.lang.Exception)>($r30) in <com.koushikdutta.async.AsyncServer$5: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke $r12.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>($r2, $i0) in <com.koushikdutta.async.AsyncServer$10: void run()> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.Semaphore: void release()>() in <com.koushikdutta.async.AsyncServer$4: void run()> ==> <java.util.concurrent.Semaphore: void release()>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, null) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, null) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, null) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r0) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: $i0 = virtualinvoke $r4.<java.net.InetSocketAddress: int getPort()>() in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <java.net.InetSocketAddress: int getPort()>
SPECIAL edge: specialinvoke $r2.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>(r3, $i0) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)>($r8) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)>(r1, $r3) in <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.net.InetAddress)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer$ConnectFuture: boolean isCancelled()>() in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
VIRTUAL edge: virtualinvoke $r16.<com.koushikdutta.async.AsyncServer$ConnectFuture: boolean setComplete(java.lang.Exception)>($r20) in <com.koushikdutta.async.AsyncServer$6: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.HostnameResolutionException: void <init>(java.lang.String)>("no addresses for host") in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <com.koushikdutta.async.HostnameResolutionException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.AsyncServer$8$1: void <init>(com.koushikdutta.async.AsyncServer$8,java.net.InetAddress[])>(r0, r10) in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <com.koushikdutta.async.AsyncServer$8$1: void <init>(com.koushikdutta.async.AsyncServer$8,java.net.InetAddress[])>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r3) in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.AsyncServer$8$2: void <init>(com.koushikdutta.async.AsyncServer$8,java.lang.Exception)>(r0, $r6) in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <com.koushikdutta.async.AsyncServer$8$2: void <init>(com.koushikdutta.async.AsyncServer$8,java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r7) in <com.koushikdutta.async.AsyncServer$8: void run()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.util.LinkedList: void <init>()>() in <com.koushikdutta.async.ThreadQueue: void <init>()> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(0) in <com.koushikdutta.async.ThreadQueue: void <init>()> ==> <java.util.concurrent.Semaphore: void <init>(int)>
SPECIAL edge: $z0 = specialinvoke r0.<java.util.LinkedList: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Runnable)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<java.util.LinkedList: boolean remove(java.lang.Object)>(r3) in <com.koushikdutta.async.ThreadQueue: boolean remove(java.lang.Object)> ==> <java.util.LinkedList: boolean remove(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.ThreadQueue: boolean isEmpty()>() in <com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()> ==> <java.util.LinkedList: boolean isEmpty()>
SPECIAL edge: $r3 = specialinvoke r0.<java.util.LinkedList: java.lang.Object remove()>() in <com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()> ==> <java.util.LinkedList: java.lang.Object remove()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>() in <com.koushikdutta.async.ThreadQueue: java.lang.Object remove()> ==> <com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Runnable)>($r2) in <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Runnable)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer$Scheduler: int compare(com.koushikdutta.async.AsyncServer$Scheduled,com.koushikdutta.async.AsyncServer$Scheduled)>($r4, $r3) in <com.koushikdutta.async.AsyncServer$Scheduler: int compare(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer$Scheduler: int compare(com.koushikdutta.async.AsyncServer$Scheduled,com.koushikdutta.async.AsyncServer$Scheduled)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: void <init>()> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: void <init>(java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>(r1) in <com.koushikdutta.async.future.SimpleFuture: void <init>(java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: void <init>(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r1) in <com.koushikdutta.async.future.SimpleFuture: void <init>(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean cancel()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancel(boolean)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean cancel()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancel(boolean)> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)>(1) in <com.koushikdutta.async.future.SimpleFuture: boolean cancelSilently()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)>
SPECIAL edge: $z1 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)>($z0) in <com.koushikdutta.async.future.SimpleFuture: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isCancelled()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isDone()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.AsyncSemaphore ensureWaiterLocked()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.AsyncSemaphore ensureWaiterLocked()>
SPECIAL edge: $r5 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.AsyncSemaphore: void acquire()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()> ==> <com.koushikdutta.async.AsyncSemaphore: void acquire()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isCancelled()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isDone()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.AsyncSemaphore ensureWaiterLocked()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.AsyncSemaphore ensureWaiterLocked()>
SPECIAL edge: $r6 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()>
VIRTUAL edge: $z2 = virtualinvoke r4.<com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>(l0, r5) in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)>
SPECIAL edge: specialinvoke $r7.<java.util.concurrent.TimeoutException: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeoutException: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>($r1) in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(r1, null) in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(null, r1) in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>() in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void releaseWaiterLocked()>() in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: void releaseWaiterLocked()>
SPECIAL edge: r5 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>() in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>(r5) in <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.SimpleFuture$1: void <init>(com.koushikdutta.async.future.SimpleFuture)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback getCompletionCallback()> ==> <com.koushikdutta.async.future.SimpleFuture$1: void <init>(com.koushikdutta.async.future.SimpleFuture)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback getCompletionCallback()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback getCompletionCallback()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r0) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r2) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r2) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isDone()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean isCancelled()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
SPECIAL edge: r6 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>(r6) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable$1: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>(r0) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>(r0) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture reset()> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture reset()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Cancellable reset()> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture reset()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>(r1) in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke $r3.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.ThreadQueue: boolean remove(java.lang.Object)>(r0) in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.ThreadQueue: boolean remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r5.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r0) in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <android.os.Handler: void removeCallbacks(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.ThreadQueue: boolean remove(java.lang.Object)>(r0) in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <com.koushikdutta.async.ThreadQueue: boolean remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>(r0) in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()> ==> <android.os.Handler: void removeCallbacks(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FileDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.FileDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.Util$4: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <java.io.FileInputStream: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r7) in <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.DataInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.FilterInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.BufferedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.ByteArrayInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.ObjectInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r6.<java.io.InputStream: int read(byte[],int,int)>($r7, 0, $i10) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.Util$2: void cleanup()>() in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$2: void cleanup()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.Util$2: void cleanup()>() in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$2: void cleanup()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>($r13) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r18.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r17) in <com.koushikdutta.async.Util$2: void onWriteable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r3) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>($r3) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.Util$7: void onWriteable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList$Reclaimer: int compare(java.nio.ByteBuffer,java.nio.ByteBuffer)>($r4, $r3) in <com.koushikdutta.async.ByteBufferList$Reclaimer: int compare(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.ByteBufferList$Reclaimer: int compare(java.nio.ByteBuffer,java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.Charsets: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build: java.lang.String getRadioVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Message: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void copyFrom(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: long getWhen()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void setTarget(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Handler getTarget()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: java.lang.Runnable getCallback()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Bundle getData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Bundle peekData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void setData(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void sendToTarget()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.net.ServerSocket: int getLocalPort()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: int getLocalPort()> ==> <java.net.ServerSocket: int getLocalPort()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: int read(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Can\'t read ServerSocketChannel") in <com.koushikdutta.async.ServerSocketChannelWrapper: int read(java.nio.ByteBuffer)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: boolean isConnected()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Can\'t write ServerSocketChannel") in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer[])> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Can\'t write ServerSocketChannel") in <com.koushikdutta.async.ServerSocketChannelWrapper: int write(java.nio.ByteBuffer[])> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[])> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Can\'t read ServerSocketChannel") in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[])> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[],int,int)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.io.IOException: void <init>(java.lang.String)>("Can\'t read ServerSocketChannel") in <com.koushikdutta.async.ServerSocketChannelWrapper: long read(java.nio.ByteBuffer[],int,int)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.net.ServerSocket: int getLocalPort()>() in <com.koushikdutta.async.AsyncServer$5$1: int getLocalPort()> ==> <java.net.ServerSocket: int getLocalPort()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.future.TransformFuture: void <init>()> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: boolean isCancelled()>() in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>(r1) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>(r1) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.parser.DocumentParser$1: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.parser.StringParser$1: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer$9: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void transform(java.lang.Object)>(r2) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>($r3) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>($r3) in <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.HostnameResolutionException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(null, $r2) in <com.koushikdutta.async.AsyncServer$8$1: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>($r2, null) in <com.koushikdutta.async.AsyncServer$8$2: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSemaphore: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.Semaphore: void <init>(int)>(0) in <com.koushikdutta.async.AsyncSemaphore: void <init>()> ==> <java.util.concurrent.Semaphore: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.util.concurrent.Semaphore: boolean tryAcquire()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.util.concurrent.Semaphore: boolean tryAcquire()>
VIRTUAL edge: r9 = virtualinvoke r1.<com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke r9.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
VIRTUAL edge: $i0 = virtualinvoke r4.<java.util.concurrent.Semaphore: int availablePermits()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.util.concurrent.Semaphore: int availablePermits()>
VIRTUAL edge: virtualinvoke r4.<java.util.concurrent.Semaphore: void acquire(int)>(i1) in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.util.concurrent.Semaphore: void acquire(int)>
VIRTUAL edge: $z1 = virtualinvoke $r6.<java.util.concurrent.Semaphore: boolean tryAcquire()>() in <com.koushikdutta.async.AsyncSemaphore: void acquire()> ==> <java.util.concurrent.Semaphore: boolean tryAcquire()>
VIRTUAL edge: l1 = virtualinvoke $r1.<java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>(l0, r0) in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.TimeUnit: long convert(long,java.util.concurrent.TimeUnit)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.util.concurrent.Semaphore: boolean tryAcquire()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.Semaphore: boolean tryAcquire()>
VIRTUAL edge: r12 = virtualinvoke r3.<com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.ThreadQueue: java.lang.Runnable remove()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke r12.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
VIRTUAL edge: $i2 = virtualinvoke r6.<java.util.concurrent.Semaphore: int availablePermits()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.Semaphore: int availablePermits()>
VIRTUAL edge: $z1 = virtualinvoke r6.<java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>(i7, l1, $r8) in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.Semaphore: boolean tryAcquire(int,long,java.util.concurrent.TimeUnit)>
VIRTUAL edge: $z2 = virtualinvoke $r9.<java.util.concurrent.Semaphore: boolean tryAcquire()>() in <com.koushikdutta.async.AsyncSemaphore: boolean tryAcquire(long,java.util.concurrent.TimeUnit)> ==> <java.util.concurrent.Semaphore: boolean tryAcquire()>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.Semaphore: void release()>() in <com.koushikdutta.async.AsyncSemaphore: void release()> ==> <java.util.concurrent.Semaphore: void release()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.SimpleCancellable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void completeCleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()> ==> <com.koushikdutta.async.future.SimpleCancellable: void completeCleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()> ==> <com.koushikdutta.async.future.SimpleCancellable: void cleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()> ==> <com.koushikdutta.async.dns.Dns$1: void cleanup()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.future.Continuation: boolean cancel()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$ConnectFuture: void cancelCleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleCancellable: void cleanup()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void cleanup()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()> ==> <com.koushikdutta.async.dns.Dns$1: void cleanup()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>() in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
INTERFACE edge: $z1 = interfaceinvoke $r4.<com.koushikdutta.async.future.Cancellable: boolean isCancelled()>() in <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()> ==> <com.koushikdutta.async.future.Continuation: boolean cancel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.Cancellable reset()> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(r1, r2) in <com.koushikdutta.async.future.SimpleFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build$VERSION_CODES: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build$VERSION_CODES: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Messenger: void <init>(android.os.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void <init>(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Messenger: void <init>(android.os.IBinder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void <init>(android.os.IBinder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void send(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: android.os.IBinder getBinder()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(android.os.Bundle)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean containsKey(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Object get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void remove(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putAll(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.Set keySet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean hasFileDescriptors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBoolean(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putByte(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putChar(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putShort(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putFloat(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putDouble(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putString(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putByteArray(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putShortArray(java.lang.String,short[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharArray(java.lang.String,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putIntArray(java.lang.String,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putLongArray(java.lang.String,long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putFloatArray(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putDoubleArray(java.lang.String,double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: byte getByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char getChar(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char getChar(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short getShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short getShort(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int getInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int getInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float getFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float getFloat(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double getDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double getDouble(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String getString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: byte[] getByteArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short[] getShortArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char[] getCharArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int[] getIntArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long[] getLongArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float[] getFloatArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double[] getDoubleArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcel obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByteArray(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByteArray(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStrongInterface(android.os.IInterface)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByte(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeMap(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBundle(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeArray(java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSparseArray(android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBooleanArray(boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: boolean[] createBooleanArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBooleanArray(boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeCharArray(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: char[] createCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readCharArray(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeIntArray(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: int[] createIntArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readIntArray(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeLongArray(long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: long[] createLongArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readLongArray(long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeFloatArray(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: float[] createFloatArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readFloatArray(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeDoubleArray(double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: double[] createDoubleArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readDoubleArray(double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStringArray(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.String[] createStringArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readStringArray(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBinderArray(android.os.IBinder[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.IBinder[] createBinderArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBinderArray(android.os.IBinder[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeTypedList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStringList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBinderList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeValue(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSerializable(java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeException(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeNoException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readException(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: byte readByte()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Bundle readBundle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readByteArray(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createStringArrayList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createBinderArrayList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readStringList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBinderList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.io.Serializable readSerializable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.SimpleCancellable$1: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseArray: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: android.util.SparseArray clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object get(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void delete(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void remove(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void removeAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void put(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int keyAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object valueAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void setValueAt(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int indexOfKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int indexOfValue(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void append(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.util.SparseArray: android.util.SparseArray clone()>() in <android.util.SparseArray: java.lang.Object clone()> ==> <android.util.SparseArray: android.util.SparseArray clone()>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.os.RemoteException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.RemoteException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.os.RemoteException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.RemoteException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseBooleanArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseBooleanArray: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean get(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean get(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void delete(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void put(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int keyAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean valueAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int indexOfKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int indexOfValue(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void append(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>() in <android.util.SparseBooleanArray: java.lang.Object clone()> ==> <android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int getFd()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int detachFd()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.Exception)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r1) in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r1) in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>("Peer not trusted by any of the system trust managers.", r1) in <com.koushikdutta.async.AsyncSSLException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>("2.5.29.15") in <com.koushikdutta.async.AsyncSSLSocketWrapper$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)> ==> <java.util.HashSet: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: boolean remove(java.lang.Object)>("2.5.29.15") in <com.koushikdutta.async.AsyncSSLSocketWrapper$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)> ==> <java.util.TreeSet: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)>(r1, r2, i0, r3, r4, r5, z0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>($r11) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r16) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r15.<com.koushikdutta.async.AsyncSSLSocketWrapper$2: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>(r7) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r7 = new com.koushikdutta.async.BufferedDataSink in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.BufferedDataSink: void <clinit>()>
CLINIT edge: $r14 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $r1 = <javax.net.ssl.SSLEngineResult$HandshakeStatus: javax.net.ssl.SSLEngineResult$HandshakeStatus NEED_TASK> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <javax.net.ssl.SSLEngineResult$HandshakeStatus: void <clinit>()>
STATIC edge: $r34 = staticinvoke <org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>($r33) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)>
STATIC edge: $r31 = staticinvoke <org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>($r29) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)>
STATIC edge: r51 = staticinvoke <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>($r35) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManagerFactory getInstance(java.lang.String)>
STATIC edge: $r35 = staticinvoke <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <javax.net.ssl.TrustManagerFactory: java.lang.String getDefaultAlgorithm()>
CLINIT edge: $r41 = <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer EMPTY_BYTEBUFFER> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>($i1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)>
VIRTUAL edge: $i4 = virtualinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>($i3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>($r6) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r14) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
VIRTUAL edge: $r4 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>
VIRTUAL edge: $r6 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>
VIRTUAL edge: $r8 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>
VIRTUAL edge: $i6 = virtualinvoke $r7.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
CLINIT edge: $z0 = <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean $assertionsDisabled> in <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
VIRTUAL edge: $i1 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i9 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: i10 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: r13 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer[] getAllArray()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>(r13) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addAll(java.nio.ByteBuffer[])>
VIRTUAL edge: $i4 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i6 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>($i1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)>(r12) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)>
VIRTUAL edge: $i5 = virtualinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>($i4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: int calculateAlloc(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>($r6) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r15) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
VIRTUAL edge: $r4 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>
VIRTUAL edge: $r6 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>
VIRTUAL edge: $r8 = virtualinvoke r11.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>
VIRTUAL edge: $i7 = virtualinvoke $r7.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()> ==> <com.koushikdutta.async.http.WebSocketImpl: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()> ==> <com.koushikdutta.async.FilteredDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.BufferedDataEmitter$1: void <init>(com.koushikdutta.async.BufferedDataEmitter)>(r0) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void <init>(com.koushikdutta.async.BufferedDataEmitter)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.BufferedDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.BufferedDataEmitter: void close()> ==> <com.koushikdutta.async.FileDataEmitter: void close()>
VIRTUAL edge: $i1 = virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>() in <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>() in <com.koushikdutta.async.BufferedDataEmitter: void resume()> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.http.WebSocketImpl: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.DataEmitterBase: java.lang.String charset()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)>(r2) in <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: boolean isBuffering()> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.BufferedDataSink$1: void <init>(com.koushikdutta.async.BufferedDataSink)>(r0) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.BufferedDataSink$1: void <init>(com.koushikdutta.async.BufferedDataSink)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r2) in <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.koushikdutta.async.BufferedDataSink: int getMaxBuffer()>() in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: int getMaxBuffer()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r3) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>(r1, 0) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>
STATIC edge: i3 = staticinvoke <java.lang.Math: int min(int,int)>($i1, $i2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <java.lang.Math: int min(int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: int remaining()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r1.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.BufferedDataSink: void setMaxBuffer(int)> ==> <java.lang.AssertionError: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.BufferedDataSink: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.BufferedDataSink: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.BufferedDataSink: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void close()>() in <com.koushikdutta.async.BufferedDataSink: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.BufferedDataSink: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void end()> ==> <com.koushikdutta.async.ZipDataSink: void end()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke r0.<org.apache.http.conn.ssl.AbstractVerifier: void <init>()>() in <org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()> ==> <org.apache.http.conn.ssl.AbstractVerifier: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.NullDataCallback: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
SPECIAL edge: specialinvoke $r1.<javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>(r2) in <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)> ==> <javax.net.ssl.SSLException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>($r1, null) in <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>($r1, null) in <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
VIRTUAL edge: $z1 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
VIRTUAL edge: r22 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r22) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i5 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r23 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>(r23) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r34 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>(r34) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>(r23) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: i0 = virtualinvoke $r24.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: r4 = virtualinvoke $r25.<com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>
VIRTUAL edge: virtualinvoke $r28.<com.koushikdutta.async.AsyncSSLSocketWrapper: void addToPending(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>($r29, r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void addToPending(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)>
VIRTUAL edge: $i8 = virtualinvoke $r31.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r30.<com.koushikdutta.async.util.Allocator: void track(long)>($l10) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.util.Allocator: void track(long)>
VIRTUAL edge: $r32 = virtualinvoke r5.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>
VIRTUAL edge: $r6 = virtualinvoke r5.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$Status getStatus()>
VIRTUAL edge: $r36 = virtualinvoke r5.<javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLEngineResult: javax.net.ssl.SSLEngineResult$HandshakeStatus getHandshakeStatus()>
VIRTUAL edge: $i3 = virtualinvoke $r12.<com.koushikdutta.async.util.Allocator: int getMinAlloc()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.util.Allocator: int getMinAlloc()>
VIRTUAL edge: virtualinvoke $r13.<com.koushikdutta.async.util.Allocator: com.koushikdutta.async.util.Allocator setMinAlloc(int)>($i4) in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.util.Allocator: com.koushikdutta.async.util.Allocator setMinAlloc(int)>
VIRTUAL edge: $i1 = virtualinvoke $r8.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r38.<javax.net.ssl.SSLException: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLException: void printStackTrace()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void addToPending(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void addToPending(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()> ==> <com.koushikdutta.async.Util$4: void onWriteable()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()> ==> <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.conn.ssl.AbstractVerifier: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,javax.net.ssl.SSLSocket)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.security.cert.X509Certificate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[],boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: boolean acceptableCountryWildcard(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getCNs(java.security.cert.X509Certificate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: java.lang.String[] getDNSSubjectAlts(java.security.cert.X509Certificate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.conn.ssl.AbstractVerifier: int countDots(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.BuildConfig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.DataEmitterBase: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r3.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
SPECIAL edge: specialinvoke $r4.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: void <init>()> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r7, i0) in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i5 = virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: $z1 = specialinvoke r1.<com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)>
CLINIT edge: $z0 = <com.koushikdutta.async.DataEmitterReader: boolean $assertionsDisabled> in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterReader: void <clinit>()>
SPECIAL edge: specialinvoke $r20.<java.io.FileInputStream: void <init>(java.io.File)>($r22) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: $r24 = virtualinvoke $r20.<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>() in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: $z2 = virtualinvoke $r19.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r27) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke $r12.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $z1 = virtualinvoke $r13.<com.koushikdutta.async.FileDataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
VIRTUAL edge: virtualinvoke $r26.<com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)>($r25) in <com.koushikdutta.async.FileDataEmitter$1: void run()> ==> <com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r4) in <com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.DataEmitterBase: void <init>()>() in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.DataEmitterBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FileDataEmitter: void doResume()>() in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.FileDataEmitter: void doResume()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.FileDataEmitter$1: void <init>(com.koushikdutta.async.FileDataEmitter)>(r0) in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.FileDataEmitter$1: void <init>(com.koushikdutta.async.FileDataEmitter)>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>() in <com.koushikdutta.async.FileDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FileDataEmitter: void doResume()>() in <com.koushikdutta.async.FileDataEmitter: void resume()> ==> <com.koushikdutta.async.FileDataEmitter: void doResume()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
CLINIT edge: $r1 = <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State COMPLETE> in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r18, $r17, r0, null, $r16, $r15) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r18, $r17, r0, null, $r16, $r15) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.DataEmitterBase: void <init>()>() in <com.koushikdutta.async.FilteredDataEmitter: void <init>()> ==> <com.koushikdutta.async.DataEmitterBase: void <init>()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.FilteredDataEmitter$1: void <init>(com.koushikdutta.async.FilteredDataEmitter)>(r0) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void <init>(com.koushikdutta.async.FilteredDataEmitter)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r4) in <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: $i5 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.FileDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isChunked()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isChunked()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.FilteredDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.BufferedDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.http.WebSocketImpl: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.FileDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void pause()>() in <com.koushikdutta.async.FilteredDataEmitter: void pause()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.BufferedDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.FileDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.FilteredDataEmitter: void resume()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.BufferedDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.FilteredDataEmitter: void close()> ==> <com.koushikdutta.async.FileDataEmitter: void close()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.http.WebSocketImpl: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()> ==> <com.koushikdutta.async.DataEmitterBase: java.lang.String charset()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>(r1) in <com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: void setMaxBuffer(int)>(0) in <com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.BufferedDataSink: void setMaxBuffer(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: boolean isBuffering()>() in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: boolean isBuffering()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: int getMaxBuffer()>() in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: int getMaxBuffer()>
VIRTUAL edge: r7 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r7 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r7 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>($r1) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>(r7, 1) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>($r6) in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r8.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: boolean isBuffering()>() in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: boolean isBuffering()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: int getMaxBuffer()>() in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: int getMaxBuffer()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.FilteredDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>(r2, 1) in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)>
VIRTUAL edge: $z2 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.LineEmitter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.LineEmitter: void <init>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: b1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
SPECIAL edge: specialinvoke $r9.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.LineEmitter$StringCallback: void onStringAvailable(java.lang.String)>($r6) in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.LineEmitter$StringCallback: void onStringAvailable(java.lang.String)>($r6) in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.LineEmitter$StringCallback: void onStringAvailable(java.lang.String)>($r6) in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.LineEmitter$StringCallback: void onStringAvailable(java.lang.String)>($r6) in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c2) in <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(null) in <com.koushikdutta.async.PushParser$1: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.PushParser$Waiter: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$1: void <init>(com.koushikdutta.async.PushParser,int)>(r0, 0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$1: void <init>(com.koushikdutta.async.PushParser,int)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.PushParser$2: void <init>(com.koushikdutta.async.PushParser,int)>(r0, 1) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$2: void <init>(com.koushikdutta.async.PushParser,int)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.PushParser$3: void <init>(com.koushikdutta.async.PushParser,int)>(r0, 2) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$3: void <init>(com.koushikdutta.async.PushParser,int)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.PushParser$4: void <init>(com.koushikdutta.async.PushParser,int)>(r0, 4) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$4: void <init>(com.koushikdutta.async.PushParser,int)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.PushParser$5: void <init>(com.koushikdutta.async.PushParser,int)>(r0, 8) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$5: void <init>(com.koushikdutta.async.PushParser,int)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.PushParser$6: void <init>(com.koushikdutta.async.PushParser)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$6: void <init>(com.koushikdutta.async.PushParser)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.PushParser$7: void <init>(com.koushikdutta.async.PushParser)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$7: void <init>(com.koushikdutta.async.PushParser)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.PushParser$8: void <init>(com.koushikdutta.async.PushParser)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser$8: void <init>(com.koushikdutta.async.PushParser)>
SPECIAL edge: specialinvoke $r9.<java.util.LinkedList: void <init>()>() in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke $r10.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r0) in <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$IntWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>(r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readInt(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$IntWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readInt(com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readInt(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$UntilWaiter: void <init>(byte,com.koushikdutta.async.callback.DataCallback)>(b0, r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.PushParser$UntilWaiter: void <init>(byte,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByte()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByte()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readShort()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readShort()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readInt()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readInt()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLong()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLong()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteArray()>() in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int)> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteArray()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, $r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int)> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$LenByteArrayWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>($r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteArray()> ==> <com.koushikdutta.async.PushParser$LenByteArrayWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteArray()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteArray()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList()>() in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int)> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, $r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int)> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteBufferList(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList(com.koushikdutta.async.PushParser$ParseCallback)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList()> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList(com.koushikdutta.async.PushParser$ParseCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$LenByteBufferListWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>(r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$LenByteBufferListWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readLenByteBufferList(com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$LenByteArrayWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>($r2) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readString()> ==> <com.koushikdutta.async.PushParser$LenByteArrayWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readString()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readString()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser noop()> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser noop()> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.LinkedList: int size()>() in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: int size()>
VIRTUAL edge: $i2 = virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.LinkedList: java.lang.Object peek()>() in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: java.lang.Object peek()>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>($r10) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.util.LinkedList: java.lang.Object poll()>() in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: java.lang.Object poll()>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$LenByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$1: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$LenByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r18 = virtualinvoke $r17.<com.koushikdutta.async.PushParser$Waiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r15, $r16) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r19.<java.util.LinkedList: void addFirst(java.lang.Object)>(r18) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: void addFirst(java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.util.LinkedList: int size()>() in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: int size()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>(r0) in <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$TapWaiter: void <init>(com.koushikdutta.async.PushParser,com.koushikdutta.async.TapCallback)>(r0, r2) in <com.koushikdutta.async.PushParser: void tap(com.koushikdutta.async.TapCallback)> ==> <com.koushikdutta.async.PushParser$TapWaiter: void <init>(com.koushikdutta.async.PushParser,com.koushikdutta.async.TapCallback)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: void tap(com.koushikdutta.async.TapCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.LinkedList: boolean add(java.lang.Object)>($r1) in <com.koushikdutta.async.PushParser: void tap(com.koushikdutta.async.TapCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(4) in <com.koushikdutta.async.PushParser$LenByteArrayWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.PushParser$LenByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, $r3) in <com.koushikdutta.async.PushParser$LenByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(0) in <com.koushikdutta.async.PushParser$TapWaiter: void <init>(com.koushikdutta.async.PushParser,com.koushikdutta.async.TapCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
VIRTUAL edge: virtualinvoke r2.<java.lang.reflect.Method: void setAccessible(boolean)>(1) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.reflect.Method: void setAccessible(boolean)>
VIRTUAL edge: virtualinvoke r2.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r4, $r6) in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object[] toArray()>() in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: java.lang.Object[] toArray()>
VIRTUAL edge: virtualinvoke $r9.<java.util.ArrayList: void clear()>() in <com.koushikdutta.async.PushParser$TapWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length should be > 0") in <com.koushikdutta.async.PushParser$ByteArrayWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$6: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$7: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$8: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>(r1) in <com.koushikdutta.async.PushParser$ByteArrayWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(1) in <com.koushikdutta.async.PushParser$UntilWaiter: void <init>(byte,com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r6) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r6 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>(r6) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r0, i5) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.PushParser$UntilWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(4) in <com.koushikdutta.async.PushParser$IntWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$8: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$7: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$6: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$IntWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.String: void <init>(byte[])>(r4) in <com.koushikdutta.async.PushParser$8: void parsed(byte[])> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$8: void parsed(byte[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.PushParser$8: void parsed(byte[])>($r2) in <com.koushikdutta.async.PushParser$8: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.PushParser$8: void parsed(byte[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length should be > 0") in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)>($i0) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$8: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$7: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$6: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.PushParser$ParseCallback: void parsed(java.lang.Object)>($r3) in <com.koushikdutta.async.PushParser$ByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(4) in <com.koushikdutta.async.PushParser$LenByteBufferListWaiter: void <init>(com.koushikdutta.async.PushParser$ParseCallback)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.PushParser$LenByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>(i0, $r3) in <com.koushikdutta.async.PushParser$LenByteBufferListWaiter: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser$ByteBufferListWaiter: void <init>(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: $l0 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: long getLong()>() in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: long getLong()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4) in <com.koushikdutta.async.PushParser$5: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4) in <com.koushikdutta.async.PushParser$4: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.PushParser$7: void parsed(com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.PushParser$7: void parsed(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.PushParser$7: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.PushParser$7: void parsed(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.PushParser$6: void parsed(byte[])> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.PushParser$6: void parsed(byte[])>($r2) in <com.koushikdutta.async.PushParser$6: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.PushParser$6: void parsed(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4) in <com.koushikdutta.async.PushParser$3: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $b0 = virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>($r4) in <com.koushikdutta.async.PushParser$2: com.koushikdutta.async.PushParser$Waiter onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)>(r1) in <com.koushikdutta.async.ZipDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke $r2.<java.io.ByteArrayOutputStream: void <init>()>() in <com.koushikdutta.async.ZipDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <java.io.ByteArrayOutputStream: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>($r4) in <com.koushikdutta.async.ZipDataSink: void <init>(com.koushikdutta.async.DataSink)> ==> <java.util.zip.ZipOutputStream: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r2.<java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>(r1) in <com.koushikdutta.async.ZipDataSink: void putNextEntry(java.util.zip.ZipEntry)> ==> <java.util.zip.ZipOutputStream: void putNextEntry(java.util.zip.ZipEntry)>
VIRTUAL edge: virtualinvoke $r1.<java.util.zip.ZipOutputStream: void closeEntry()>() in <com.koushikdutta.async.ZipDataSink: void closeEntry()> ==> <java.util.zip.ZipOutputStream: void closeEntry()>
VIRTUAL edge: virtualinvoke $r1.<java.util.zip.ZipOutputStream: void close()>() in <com.koushikdutta.async.ZipDataSink: void end()> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)>($r6) in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ZipDataSink: void setMaxBuffer(int)>(2147483647) in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.BufferedDataSink: void setMaxBuffer(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ZipDataSink: void write(com.koushikdutta.async.ByteBufferList)>($r5) in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataSink: void end()>() in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.BufferedDataSink: void end()>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.ZipDataSink: void end()> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r10 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.ByteBufferList: void <init>(byte[])>($r4) in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r5.<java.io.ByteArrayOutputStream: void reset()>() in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.io.ByteArrayOutputStream: void reset()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)>($r15) in <com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.future.Continuation$1: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.Cancellable)>(r1, r0) in <com.koushikdutta.async.future.Continuation: void setCancelCallback(com.koushikdutta.async.future.Cancellable)> ==> <com.koushikdutta.async.future.Continuation$1: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.future.Continuation: void <init>()> ==> <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback,java.lang.Runnable)>(r1, null) in <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback,java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback,java.lang.Runnable)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedList: void <init>()>() in <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback,java.lang.Runnable)> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)>(r1) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r3) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: boolean add(java.lang.Object)>($r3) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)>(r1) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation insert(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)>
VIRTUAL edge: virtualinvoke $r2.<java.util.LinkedList: void add(int,java.lang.Object)>(0, $r3) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation insert(com.koushikdutta.async.callback.ContinuationCallback)> ==> <java.util.LinkedList: void add(int,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.DependentFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r1) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.future.DependentFuture)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.future.Continuation$3: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.DependentFuture)>(r1, r0) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.future.DependentFuture)> ==> <com.koushikdutta.async.future.Continuation$3: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.DependentFuture)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r3) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.future.DependentFuture)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.future.Continuation: boolean cancel()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("already started") in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.Continuation: void next()>() in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()> ==> <com.koushikdutta.async.future.Continuation: void next()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.Continuation: void setCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.future.Continuation: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: void setCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>() in <com.koushikdutta.async.future.Continuation: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>() in <com.koushikdutta.async.future.Continuation: void run()> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.Continuation$1: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.Continuation$1: void run()> ==> <com.koushikdutta.async.future.Continuation: boolean cancel()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.Continuation$1: void run()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.future.Continuation$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.future.DependentFuture: java.lang.Object get()>() in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.dns.Dns: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.Random: void <init>()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.util.Random: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<java.util.Random: int nextInt()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.util.Random: int nextInt()>
SPECIAL edge: specialinvoke $r33.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>("8.8.8.8", 53) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
VIRTUAL edge: r40 = virtualinvoke r32.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)>($r33) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket connectDatagram(java.net.SocketAddress)>
SPECIAL edge: specialinvoke $r15.<java.net.InetSocketAddress: void <init>(int)>(5353) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.net.InetSocketAddress: void <init>(int)>
VIRTUAL edge: r40 = virtualinvoke $r14.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)>($r15, 1) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncDatagramSocket openDatagram(java.net.SocketAddress,boolean)>
VIRTUAL edge: r41 = virtualinvoke $r16.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>("impl") in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
VIRTUAL edge: virtualinvoke r41.<java.lang.reflect.Field: void setAccessible(boolean)>(1) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.reflect.Field: void setAccessible(boolean)>
VIRTUAL edge: r18 = virtualinvoke r41.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>($r17) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r17 = virtualinvoke r40.<com.koushikdutta.async.AsyncDatagramSocket: java.lang.Object getSocket()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()>
VIRTUAL edge: $r25 = virtualinvoke r40.<com.koushikdutta.async.AsyncDatagramSocket: java.lang.Object getSocket()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.lang.Object getSocket()>
VIRTUAL edge: virtualinvoke r40.<com.koushikdutta.async.AsyncDatagramSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r28) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke r40.<com.koushikdutta.async.AsyncDatagramSocket: void write(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r40.<com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)>($r30, r2) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncDatagramSocket: void send(java.net.InetSocketAddress,java.nio.ByteBuffer)>
VIRTUAL edge: $r19 = virtualinvoke r18.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r21 = virtualinvoke $r19.<java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>("join", $r20) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])>
VIRTUAL edge: virtualinvoke r21.<java.lang.reflect.Method: void setAccessible(boolean)>(1) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.reflect.Method: void setAccessible(boolean)>
VIRTUAL edge: virtualinvoke r21.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r18, $r22) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
VIRTUAL edge: virtualinvoke $r26.<java.net.DatagramSocket: void setBroadcast(boolean)>(1) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.net.DatagramSocket: void setBroadcast(boolean)>
SPECIAL edge: specialinvoke $r27.<com.koushikdutta.async.dns.Dns$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket)>(r40) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket)>
SPECIAL edge: specialinvoke $r28.<com.koushikdutta.async.dns.Dns$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,boolean,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.future.FutureCallback)>(r40, z0, $r27, r29) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.dns.Dns$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,boolean,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r30.<java.net.InetSocketAddress: void <init>(java.lang.String,int)>("224.0.0.251", 5353) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <java.net.InetSocketAddress: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r39.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r39.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>($r38) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r38, null) in <com.koushikdutta.async.dns.Dns: com.koushikdutta.async.future.Future lookup(com.koushikdutta.async.AsyncServer,java.lang.String,boolean,com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()>() in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncDatagramSocket: java.net.InetSocketAddress getRemoteAddress()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.AsyncDatagramSocket: void close()>() in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>(r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.SimpleFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(null, r9) in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.Multimap: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: void <init>()> ==> <com.koushikdutta.async.http.Multimap: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer getAll()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>($r2) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>($r3) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: i2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: i3 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: i4 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: i5 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: i10 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
VIRTUAL edge: i13 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r21) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r10, i13) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>($r9) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
VIRTUAL edge: i18 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>($r8) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: i20 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getInt()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getInt()>
VIRTUAL edge: i23 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int getShort()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int getShort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r7, i23) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>($r6) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.dns.DnsResponse: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)>($r10) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)>($r7) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r13.<java.util.ArrayList: boolean add(java.lang.Object)>($r14) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>($r12) in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: com.koushikdutta.async.dns.DnsResponse parse(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
CLINIT edge: $r2 = new java.lang.String in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.String: void <clinit>()>
VIRTUAL edge: r18 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r19.<java.net.InetAddress: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r17) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("names:\n") in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r21 = virtualinvoke $r5.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r21.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r21.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.Multimap: void <init>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.http.Multimap: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r3.<java.util.List: int size()>() in <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.List: java.lang.Object get(int)>(0) in <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.http.Multimap: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.Multimap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7) in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: boolean add(java.lang.Object)>(r3) in <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.Multimap: void put(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) in <com.koushikdutta.async.http.Multimap: void put(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.http.Multimap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, $r0) in <com.koushikdutta.async.http.Multimap: void put(java.lang.String,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>() in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.AbstractMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.WeakHashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.HashMap: void putAll(java.util.Map)>
SPECIAL edge: specialinvoke r0.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>($r5, $r6) in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<org.apache.http.NameValuePair: java.lang.String getName()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r4.<org.apache.http.NameValuePair: java.lang.String getValue()>() in <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.Multimap: void <init>()>() in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>(r8, r9) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(";") in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", 2) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
VIRTUAL edge: r8 = virtualinvoke $r7.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z0 = virtualinvoke r9.<java.lang.String: boolean endsWith(java.lang.String)>("\"") in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: boolean endsWith(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r9.<java.lang.String: boolean startsWith(java.lang.String)>("\"") in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r9.<java.lang.String: int length()>() in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: r9 = virtualinvoke r9.<java.lang.String: java.lang.String substring(int,int)>(1, $i3) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r1) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseHeader(com.koushikdutta.async.http.libcore.RawHeaders,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.Multimap: void <init>()>() in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>(r8, r10) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("&") in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", 2) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseQuery(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.Multimap: void <init>()>() in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>(r8, r10) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("&") in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: r6 = virtualinvoke r5.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("=", 2) in <com.koushikdutta.async.http.Multimap: com.koushikdutta.async.http.Multimap parseUrlEncoded(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.ArrayList: boolean add(java.lang.Object)>($r13) in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.koushikdutta.async.http.Multimap: java.util.Set keySet()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.Hashtable: java.util.Set keySet()>
VIRTUAL edge: $r8 = virtualinvoke r2.<com.koushikdutta.async.http.Multimap: java.lang.Object get(java.lang.Object)>(r7) in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke r9.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r13.<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>(r7, r12) in <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()> ==> <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(20) in <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: void copy(com.koushikdutta.async.http.libcore.RawHeaders)>(r2) in <com.koushikdutta.async.http.libcore.RawHeaders: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void copy(com.koushikdutta.async.http.libcore.RawHeaders)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(20) in <com.koushikdutta.async.http.libcore.RawHeaders: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2) in <com.koushikdutta.async.http.libcore.RawHeaders: void copy(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean addAll(java.util.Collection)>($r2) in <com.koushikdutta.async.http.libcore.RawHeaders: void copy(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
VIRTUAL edge: r4 = virtualinvoke r3.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z0 = virtualinvoke r4.<java.lang.String: boolean startsWith(java.lang.String)>("HTTP/") in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke r4.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $i0 = virtualinvoke r5.<java.lang.String: int indexOf(java.lang.String)>(" ") in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $c3 = virtualinvoke r5.<java.lang.String: char charAt(int)>($i2) in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i4 = virtualinvoke r5.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: i9 = virtualinvoke r5.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int,int)>(i1, i9) in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i7 = virtualinvoke r5.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r2 = virtualinvoke r5.<java.lang.String: java.lang.String substring(int)>($i8) in <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int indexOf(java.lang.String)>(":") in <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)> ==> <java.lang.String: int indexOf(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(0, i0) in <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("", r0) in <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>($r2, $r3) in <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("fieldName == null") in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Ignoring HTTP header field \'") in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' because its value is null") in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r7.<java.io.PrintStream: void println(java.lang.String)>($r11) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.io.PrintStream: void println(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object remove(int)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: java.lang.Object remove(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object remove(int)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object remove(int)>
INTERFACE edge: interfaceinvoke $r8.<java.util.List: java.lang.Object remove(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object remove(int)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r5, r3) in <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>(r1) in <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r1, r2) in <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: int length()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: int length()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i2 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i3 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r6, $r10) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>(r6) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Set: boolean contains(java.lang.Object)>(r6) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>(int)>(256) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n") in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n") in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r6.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r6.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r17 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r16) in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n") in <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.TreeMap: void <init>(java.util.Comparator)>($r1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.TreeMap: void <init>(java.util.Comparator)>
INTERFACE edge: $r19 = interfaceinvoke $r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r13) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r13, $r21) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(null, $r9) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r17.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r17.<java.util.List: boolean addAll(java.util.Collection)>(r20) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>(r16) in <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)>(r8, r10) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r12) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.LinkedList: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke r10.<java.util.List: boolean isEmpty()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $i0 = interfaceinvoke r10.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r10.<java.util.List: int size()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r11 = interfaceinvoke r10.<java.util.List: java.lang.Object get(int)>($i1) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders fromMultimap(java.util.Map)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\n") in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>(r7) in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
VIRTUAL edge: r7 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders parse(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: java.lang.String getValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean isOpaque()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean isAbsolute()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: int compareTo(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri parse(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri fromFile(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.util.Set getQueryParameterNames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.util.List getQueryParameters(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String encode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.net.Uri$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri build()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isGraphic(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.AsyncServer$Scheduler: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.util.FileCache$1: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.ByteBufferList$Reclaimer: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r0, r1) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)>($r4, $r3) in <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.http.libcore.RawHeaders$1: int compare(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>()> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>(int)> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>(android.graphics.Paint)> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void set(android.text.TextPaint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.text.TextUtils$SimpleStringSplitter: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: java.lang.String next()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void remove()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>() in <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.text.Spannable$Factory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void set(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isAntiAlias()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isDither()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isLinearText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isSubpixelText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isUnderlineText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isStrikeThruText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isFakeBoldText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isFilterBitmap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Style getStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setARGB(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Shader getShader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Xfermode getXfermode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.PathEffect getPathEffect()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Typeface getTypeface()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setShadowLayer(float,float,float,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void clearShadowLayer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float getFontSpacing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(char[],int,int,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(char[],int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Path: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rewind()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void set(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: android.graphics.Path$FillType getFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void setFillType(android.graphics.Path$FillType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isInverseFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void toggleInverseFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isRect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void incReserve(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void moveTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rMoveTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void lineTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rLineTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void quadTo(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rQuadTo(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void cubicTo(float,float,float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rCubicTo(float,float,float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void arcTo(android.graphics.RectF,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addArc(android.graphics.RectF,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void offset(float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void offset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void setLastPoint(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void transform(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Shader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.ColorFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.ColorFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Xfermode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Xfermode: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.PathEffect: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PathEffect: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.MaskFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.MaskFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: int getStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: boolean isBold()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: boolean isItalic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rasterizer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rasterizer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint$FontMetrics: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetrics: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint$FontMetricsInt: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetricsInt: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetricsInt: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>(int,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String flattenToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int width()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int height()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int centerX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int centerY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: float exactCenterX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: float exactCenterY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void set(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void offset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void offsetTo(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void inset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersect(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersects(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void sort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(float,float,float,float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(android.graphics.RectF)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float width()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float height()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float centerX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float centerY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void offset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void offsetTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void inset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersect(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersects(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void round(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void roundOut(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void sort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Matrix: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean isIdentity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean rectStaysRect()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void set(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSinCos(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSinCos(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean invert(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[],float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[],float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean mapRect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: float mapRadius(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void getValues(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setValues(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getStartOffset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getDeclaredLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int getAssetInt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: boolean markSupported()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int available()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void mark(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: long skip(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r1) in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r1) in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: int getLineNumber()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: int getColumnNumber()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.future.ConvertFuture: void <init>()> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.future.FutureThread: boolean setComplete(java.lang.Object)>($r3) in <com.koushikdutta.async.future.FutureThread$1: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.future.FutureThread: boolean setComplete(java.lang.Exception)>($r4) in <com.koushikdutta.async.future.FutureThread$1: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.future.FutureThread$1: void <init>(com.koushikdutta.async.future.FutureThread,com.koushikdutta.async.future.FutureRunnable)>(r0, r3) in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <com.koushikdutta.async.future.FutureThread$1: void <init>(com.koushikdutta.async.future.FutureThread,com.koushikdutta.async.future.FutureRunnable)>
SPECIAL edge: specialinvoke $r1.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2) in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
THREAD edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
THREAD edge: virtualinvoke $r1.<java.lang.Thread: void start()>() in <com.koushikdutta.async.future.FutureThread: void <init>(com.koushikdutta.async.future.FutureRunnable)> ==> <java.lang.Thread: void run()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>($r2, $r1) in <com.koushikdutta.async.future.HandlerFuture$1$1: void run()> ==> <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.os.Handler: android.os.Looper getLooper()>() in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <android.os.Handler: android.os.Looper getLooper()>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>(r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.future.HandlerFuture$1$1: void <init>(com.koushikdutta.async.future.HandlerFuture$1,java.lang.Exception,java.lang.Object)>(r1, r7, r8) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void <init>(com.koushikdutta.async.future.HandlerFuture$1,java.lang.Exception,java.lang.Object)>
EXECUTOR edge: virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r6) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
VIRTUAL edge: virtualinvoke $r9.<android.os.Handler: boolean post(java.lang.Runnable)>($r6) in <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.future.HandlerFuture: void <init>()> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>(r2) in <com.koushikdutta.async.future.HandlerFuture: void <init>()> ==> <android.os.Handler: void <init>(android.os.Looper)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.HandlerFuture$1: void <init>(com.koushikdutta.async.future.HandlerFuture,com.koushikdutta.async.future.FutureCallback)>(r1, r2) in <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture$1: void <init>(com.koushikdutta.async.future.HandlerFuture,com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: $r4 = specialinvoke r1.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>($r0) in <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>(r1) in <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)>($r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.http.AsyncHttpClient getDefaultInstance()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: void add(int,java.lang.Object)>(0, r1) in <com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)> ==> <java.util.ArrayList: void add(int,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>($r3) in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>($r4) in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>(r0, null) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r1, 0, $r2, r4) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(java.lang.String,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r1, r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(java.lang.String,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeByteBufferList(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$DownloadCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>(r1, $r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeByteBufferList(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$DownloadCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>(r1, $r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.JSONObjectParser: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeJSONObject(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$JSONObjectCallback)> ==> <com.koushikdutta.async.parser.JSONObjectParser: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>(r1, $r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeJSONObject(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$JSONObjectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.JSONArrayParser: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeJSONArray(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$JSONArrayCallback)> ==> <com.koushikdutta.async.parser.JSONArrayParser: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>(r1, $r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeJSONArray(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$JSONArrayCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)>
SPECIAL edge: specialinvoke $r20.<java.io.File: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r20.<java.io.File: java.io.File getParentFile()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.File: java.io.File getParentFile()>
VIRTUAL edge: virtualinvoke $r3.<java.io.File: boolean mkdirs()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.File: boolean mkdirs()>
SPECIAL edge: specialinvoke $r21.<java.io.FileOutputStream: void <init>(java.io.File)>($r20) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r22.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>($r21, 8192) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>
SPECIAL edge: specialinvoke $r23.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>($r27) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke $r24.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>(r8, null) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>
SPECIAL edge: specialinvoke $r25.<com.koushikdutta.async.http.AsyncHttpClient$5: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.io.OutputStream,java.io.File)>(r8, $r24, $r22, $r20) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$5: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.io.OutputStream,java.io.File)>
VIRTUAL edge: virtualinvoke $r25.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>($r24) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r26.<com.koushikdutta.async.http.AsyncHttpClient$6: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.io.OutputStream,java.io.File,com.koushikdutta.async.http.AsyncHttpClient$FileCallback,com.koushikdutta.async.future.SimpleFuture)>(r8, $r22, $r20, r13, $r25) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.io.OutputStream,java.io.File,com.koushikdutta.async.http.AsyncHttpClient$FileCallback,com.koushikdutta.async.future.SimpleFuture)>
SPECIAL edge: specialinvoke r8.<com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r11, 0, $r24, $r26) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeFile(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$FileCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>(r1, null) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>($r0) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.AsyncHttpClient$7: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.parser.AsyncParser)>(r1, r7, $r3, r8) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.parser.AsyncParser)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r5, 0, $r0, $r6) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.SimpleFuture execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.parser.AsyncParser,com.koushikdutta.async.http.callback.RequestCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r7) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.AsyncHttpClient$8: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback,com.koushikdutta.async.http.AsyncHttpRequest)>(r4, $r2, r6, r0) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$8: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback,com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: r7 = virtualinvoke r4.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r0, $r5) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future execute(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
VIRTUAL edge: $r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("ws://", "http://") in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("wss://", "https://") in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>($r3) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r5.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)>($r0, r6, r7) in <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpRequest$1: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>(r1) in <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpRequest$2: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>(r1) in <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getProxyRequestLine()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>
SPECIAL edge: specialinvoke $r6.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("can\'t change method on a subclass of AsyncHttpRequest") in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r5) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setMethod(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)>(r1, r2, null) in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r6) in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Host", r6) in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("User-Agent", $r7) in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Accept-Encoding", "gzip, deflate") in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Connection", "keep-alive") in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Accept", "*/*") in <com.koushikdutta.async.http.AsyncHttpRequest: void setDefaultHeaders(com.koushikdutta.async.http.libcore.RawHeaders,android.net.Uri)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r12.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>(r5, $r6) in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r9) in <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: android.net.Uri getUri()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getRequestString()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
INTERFACE edge: $r2 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()>
INTERFACE edge: $r5 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.RequestLine getRequestLine()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()>
INTERFACE edge: r8 = interfaceinvoke r1.<org.apache.http.HttpRequest: org.apache.http.Header[] getAllHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<org.apache.http.RequestLine: java.lang.String getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String getUri()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<org.apache.http.RequestLine: java.lang.String getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String getUri()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<org.apache.http.RequestLine: java.lang.String getMethod()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String getMethod()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<org.apache.http.RequestLine: java.lang.String getMethod()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String getMethod()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>($r4, $r6) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
INTERFACE edge: $r12 = interfaceinvoke r9.<org.apache.http.Header: java.lang.String getName()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <org.apache.http.message.BasicHeader: java.lang.String getName()>
INTERFACE edge: $r13 = interfaceinvoke r9.<org.apache.http.Header: java.lang.String getValue()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <org.apache.http.message.BasicHeader: java.lang.String getValue()>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>($r12, $r13) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest create(org.apache.http.HttpRequest)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>(r1) in <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.HttpRequest asHttpRequest()> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>(r3, r4) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r3, r4) in <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.AsyncHttpRequest addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
CLINIT edge: $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(%d ms) %s: %s", $r1) in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>
STATIC edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4) in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.Long: java.lang.Long valueOf(long)>
STATIC edge: $l2 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $r5 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("(%d ms) %s: %s", $r1) in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l4) in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <java.lang.Long: void <clinit>()>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void logw(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String,java.lang.Exception)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
SPECIAL edge: $r4 = specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <java.lang.Throwable: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <java.nio.charset.MalformedInputException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <org.xml.sax.SAXException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <java.net.URISyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <java.util.regex.PatternSyntaxException: java.lang.String getMessage()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.Exception: java.lang.String getMessage()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)> ==> <java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: boolean cancel()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>($r4) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()> ==> <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)>(r1, "https", 443) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void addEngineConfigurator(com.koushikdutta.async.http.AsyncSSLEngineConfigurator)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void addEngineConfigurator(com.koushikdutta.async.http.AsyncSSLEngineConfigurator)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void addEngineConfigurator(com.koushikdutta.async.http.AsyncSSLEngineConfigurator)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void clearEngineConfigurators()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: void clear()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void clearEngineConfigurators()> ==> <java.util.ArrayList: void clear()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.SimpleMiddleware: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)> ==> <com.koushikdutta.async.http.SimpleMiddleware: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r4) in <com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)>(r1, "http", 80) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,int)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: i0 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>($r5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>
VIRTUAL edge: r9 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>(r2, i0, $r7, $i1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>
SPECIAL edge: r10 = specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)>(r9) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r68 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>($r67, r2, i0, z5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>
VIRTUAL edge: $r68 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>($r67, r2, i0, z5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: $i1 = virtualinvoke $r8.<com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>
SPECIAL edge: specialinvoke $r52.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke $r53.<com.koushikdutta.async.ArrayDeque: boolean add(java.lang.Object)>(r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.ArrayDeque: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.Class: java.lang.String getCanonicalName()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".owned") in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r13.<com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>($r18, $r19) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r58.<com.koushikdutta.async.ArrayDeque: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $r47 = virtualinvoke $r46.<com.koushikdutta.async.ArrayDeque: java.lang.Object pop()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object pop()>
INTERFACE edge: interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: $z1 = interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke r60.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
VIRTUAL edge: virtualinvoke $r48.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Reusing keep-alive socket") in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
INTERFACE edge: interfaceinvoke $r49.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, r60) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r49.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, r60) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r49.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, r60) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke $r50.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke $r50.<com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete()>
VIRTUAL edge: virtualinvoke $r50.<com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: virtualinvoke $r61.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Connecting socket") in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: $r63 = virtualinvoke $r62.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: r64 = virtualinvoke $r27.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: i12 = virtualinvoke $r28.<com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getProxyRequestLine()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getProxyRequestLine()>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r31.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r34) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getProxyRequestLine()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getProxyRequestLine()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r26) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r66 = virtualinvoke $r65.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r69 = virtualinvoke $r66.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.lang.String,int,com.koushikdutta.async.callback.ConnectCallback)>(r64, i12, $r68) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.lang.String,int,com.koushikdutta.async.callback.ConnectCallback)>
VIRTUAL edge: virtualinvoke $r38.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>("Resolving domain and connecting to all available addresses") in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r42 = virtualinvoke $r40.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)>($r41) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Future getAllByName(java.lang.String)>
SPECIAL edge: specialinvoke $r43.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,int,android.net.Uri)>(r3, r0, i0, r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,int,android.net.Uri)>
INTERFACE edge: $r44 = interfaceinvoke $r42.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r43) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>($r16) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>($r22) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>($r28, $r27) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>($r29) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>($r32) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.String getCanonicalName()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.Class: java.lang.String getCanonicalName()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".owned") in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r10 = virtualinvoke $r2.<com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String,java.lang.Object)>($r8, $r9) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r11.<java.lang.Boolean: boolean booleanValue()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <java.lang.Boolean: boolean booleanValue()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>("closing out socket (exception)") in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>("closing out socket (not keep alive)") in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
INTERFACE edge: interfaceinvoke $r21.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r21.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r21.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r21.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r21.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r26.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Recycling keep-alive socket") in <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
CLINIT edge: $r2 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>
CLINIT edge: $z1 = <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>($r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.BufferedDataSink: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>("charset") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()> ==> <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$DownloadCallback: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$StringCallback: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$JSONObjectCallback: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$JSONArrayCallback: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$FileCallback: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>($r2, "GET") in <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>(r1, "GET") in <com.koushikdutta.async.http.AsyncHttpGet: void <init>(android.net.Uri)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.future.SimpleFuture: boolean cancel()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.future.Continuation: boolean cancel()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.future.Cancellable: boolean cancel()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean cancel()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
SPECIAL edge: specialinvoke $r11.<java.util.concurrent.TimeoutException: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void run()> ==> <java.util.concurrent.TimeoutException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.util.UntypedHashtable: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData: void <init>()> ==> <com.koushikdutta.async.util.UntypedHashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>("socket connected") in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r26.<com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>($r25) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>
VIRTUAL edge: r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r20 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r20 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r20 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r21.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnSocketData)>($r22) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.SimpleMiddleware: void onSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnSocketData)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.AsyncHttpClient$3$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$3,com.koushikdutta.async.http.AsyncHttpRequest)>(r0, $r15) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$3,com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)>(r5) in <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r1, $r36, $r37) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>(r1, $r36, $r37) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r38 = new com.koushikdutta.async.LineEmitter in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.libcore.RequestHeaders$1: void <init>(com.koushikdutta.async.http.libcore.RequestHeaders)>(r0) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders$1: void <init>(com.koushikdutta.async.http.libcore.RequestHeaders)>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: r5 = virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: r6 = virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z13 = virtualinvoke r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no-cache") in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z6 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z7 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z8 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z9 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z10 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z11 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z12 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r5) in <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.RequestHeaders: boolean isChunked()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasConnectionClose()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setChunked()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Transfer-Encoding", "chunked") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setChunked()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Content-Length") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Length", $r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("User-Agent") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setUserAgent(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("User-Agent", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setUserAgent(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Host") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setHost(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Host", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setHost(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Connection") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setConnection(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Connection", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setConnection(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Accept-Encoding") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setAcceptEncoding(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Accept-Encoding", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setAcceptEncoding(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentType(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Type", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentType(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("If-Modified-Since") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("If-Modified-Since", r3) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("If-None-Match") in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfNoneMatch(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("If-None-Match", r2) in <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfNoneMatch(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.TreeMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r1 = interfaceinvoke r0.<java.util.Map: java.util.Set entrySet()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $z1 = virtualinvoke $r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)>(r6, $r11) in <com.koushikdutta.async.http.libcore.RequestHeaders: void addCookies(java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addAll(java.lang.String,java.util.List)>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r10.<java.io.File: boolean delete()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.io.File: boolean delete()>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.http.AsyncHttpResponse: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.http.AsyncHttpResponse: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r8) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: l0 = virtualinvoke $r5.<com.koushikdutta.async.http.libcore.ResponseHeaders: long getContentLength()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: long getContentLength()>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.AsyncHttpClient$6$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,java.io.OutputStream,com.koushikdutta.async.http.AsyncHttpResponse,long)>(r1, $r7, r2, l0) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,java.io.OutputStream,com.koushikdutta.async.http.AsyncHttpResponse,long)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.AsyncHttpClient$6$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,com.koushikdutta.async.http.AsyncHttpResponse)>(r1, r2) in <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,com.koushikdutta.async.http.AsyncHttpResponse)>
INTERFACE edge: $r5 = interfaceinvoke r2.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.libcore.ResponseHeaders: long getContentLength()>() in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: long getContentLength()>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.koushikdutta.async.parser.AsyncParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.koushikdutta.async.parser.AsyncParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.koushikdutta.async.parser.AsyncParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.koushikdutta.async.parser.AsyncParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<com.koushikdutta.async.parser.AsyncParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.AsyncHttpClient$7$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$7,com.koushikdutta.async.http.AsyncHttpResponse)>(r1, r2) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$7,com.koushikdutta.async.http.AsyncHttpResponse)>
INTERFACE edge: r9 = interfaceinvoke $r7.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r8) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: r9 = interfaceinvoke $r7.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r8) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r9) in <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: java.lang.Object get()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.http.AsyncHttpResponse: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: java.lang.Object get()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <com.koushikdutta.async.future.SimpleFuture: java.lang.Object get()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.http.AsyncHttpResponse: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r8.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r9.<java.io.File: boolean delete()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void cancelCleanup()> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $z2 = virtualinvoke $r12.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.WebSocketHandshakeException: void <init>(java.lang.String)>("Unable to complete websocket handshake") in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.WebSocketHandshakeException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r11.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>($r10) in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>(r6) in <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.StringParser: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FilteredDataEmitter: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: java.lang.String charset()>
INTERFACE edge: r1 = interfaceinvoke r0.<com.koushikdutta.async.DataEmitter: java.lang.String charset()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: java.lang.String charset()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>() in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r0) in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.parser.StringParser$1: void <init>(com.koushikdutta.async.parser.StringParser,java.lang.String)>(r5, r1) in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.StringParser$1: void <init>(com.koushikdutta.async.parser.StringParser,java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke $r3.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r4) in <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>() in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r2, r5) in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r4 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.ByteBufferList: void <init>(byte[])>($r4) in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <init>(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r4, r3) in <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.Object,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.RedirectLimitExceededException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.JSONArrayParser: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.parser.JSONArrayParser$1: void <init>(com.koushikdutta.async.parser.JSONArrayParser)>(r4) in <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.JSONArrayParser$1: void <init>(com.koushikdutta.async.parser.JSONArrayParser)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,org.json.JSONArray,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r3, r4) in <com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,org.json.JSONArray,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r3 = virtualinvoke r2.<org.json.JSONArray: java.lang.String toString()>() in <com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,org.json.JSONArray,com.koushikdutta.async.callback.CompletedCallback)> ==> <org.json.JSONArray: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,org.json.JSONArray,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r4, r3) in <com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,java.lang.Object,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONArrayParser: void write(com.koushikdutta.async.DataSink,org.json.JSONArray,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.http.WebSocketImpl: void end()> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.http.WebSocketImpl: void end()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.http.WebSocketImpl: void end()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.http.WebSocketImpl: void end()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.http.WebSocketImpl: void end()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
INTERFACE edge: $r2 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.AsyncSocket getSocket()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $r11 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $r21 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)>($r2) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)>(0, 0) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Key") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("258EAFA5-E914-47DA-95CA-C5AB0DC85B11") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r12.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Origin") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
INTERFACE edge: interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(101) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: $r15 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r17 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r19 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r24 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void writeHead()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r16.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Upgrade", "WebSocket") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r18.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Connection", "Upgrade") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Accept", r10) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r23 = virtualinvoke $r22.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Protocol") in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r25.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Protocol", r23) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Version", "13") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Key", r5) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Extensions", "x-webkit-deflate-frame") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Connection", "Upgrade") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Upgrade", "websocket") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Sec-WebSocket-Protocol", r6) in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Pragma", "no-cache") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Cache-Control", "no-cache") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.koushikdutta.async.http.libcore.RequestHeaders: java.lang.String getUserAgent()>() in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: java.lang.String getUserAgent()>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RequestHeaders: void setUserAgent(java.lang.String)>("Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/27.0.1453.15 Safari/537.36") in <com.koushikdutta.async.http.WebSocketImpl: void addWebSocketUpgradeHeaders(com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setUserAgent(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>($r3) in <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r4 = interfaceinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r7 = interfaceinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $r21 = interfaceinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponse: com.koushikdutta.async.AsyncSocket detachSocket()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Upgrade") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r6) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r9 = virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Accept") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke r10.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Key") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke r10.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Extensions") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r11) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("258EAFA5-E914-47DA-95CA-C5AB0DC85B11") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r17 = virtualinvoke $r16.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z1 = virtualinvoke r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r17) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r18.<java.lang.String: boolean equals(java.lang.Object)>("x-webkit-deflate-frame") in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r20.<com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)>($r21) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke $r20.<com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)>(1, z3) in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket finishHandshake(com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.http.HybiParser: byte[] frame(byte[])>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(byte[])>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.http.HybiParser: byte[] frame(byte[],int,int)>(r1, i0, i1) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[],int,int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[],int,int)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(byte[],int,int)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.http.HybiParser: byte[] frame(java.lang.String)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.http.HybiParser: byte[] pingFrame(java.lang.String)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void ping(java.lang.String)> ==> <com.koushikdutta.async.http.HybiParser: byte[] pingFrame(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void ping(java.lang.String)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r5) in <com.koushikdutta.async.http.WebSocketImpl: void ping(java.lang.String)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.BufferedDataSink: int remaining()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isBuffering()> ==> <com.koushikdutta.async.BufferedDataSink: int remaining()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.http.WebSocketImpl: void send(byte[])>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()>() in <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte[] getAllByteArray()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.WebSocketImpl: void send(byte[])>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void send(byte[])>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.WebSocketImpl: void pause()> ==> <com.koushikdutta.async.http.WebSocketImpl: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.WebSocketImpl: void pause()> ==> <com.koushikdutta.async.FilteredDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.WebSocketImpl: void pause()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.WebSocketImpl: void pause()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void resume()> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void resume()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void resume()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void resume()> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.ByteBufferListParser: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.parser.ByteBufferListParser$1: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.DataEmitter)>(r3, r4) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$1: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.parser.ByteBufferListParser$2: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.ByteBufferList)>(r3, $r0) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r7) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.parser.ByteBufferListParser$3: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.ByteBufferList)>(r3, $r2, $r0) in <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r4, r3) in <com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,java.lang.Object,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.JSONObjectParser: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.parser.JSONObjectParser$1: void <init>(com.koushikdutta.async.parser.JSONObjectParser)>(r4) in <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.JSONObjectParser$1: void <init>(com.koushikdutta.async.parser.JSONObjectParser)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,org.json.JSONObject,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r3, r4) in <com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,org.json.JSONObject,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void write(com.koushikdutta.async.DataSink,java.lang.String,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r3 = virtualinvoke r2.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,org.json.JSONObject,com.koushikdutta.async.callback.CompletedCallback)> ==> <org.json.JSONObject: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,org.json.JSONObject,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r4, r3) in <com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,java.lang.Object,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONObjectParser: void write(com.koushikdutta.async.DataSink,org.json.JSONObject,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String getUri()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r0.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>("HTTP", 1, 1) in <com.koushikdutta.async.http.AsyncHttpRequest$1: org.apache.http.ProtocolVersion getProtocolVersion()> ==> <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $i1 = virtualinvoke r8.<java.lang.String: int length()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $i0 = virtualinvoke r3.<java.lang.String: int length()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r8) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.RequestLine getRequestLine()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: org.apache.http.RequestLine getRequestLine()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
INTERFACE edge: $r5 = interfaceinvoke r4.<org.apache.http.Header: java.lang.String getName()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(org.apache.http.Header)> ==> <org.apache.http.message.BasicHeader: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r4.<org.apache.http.Header: java.lang.String getValue()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(org.apache.http.Header)> ==> <org.apache.http.message.BasicHeader: java.lang.String getValue()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>($r5, $r6) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r4, r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void addHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean containsHeader(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean containsHeader(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r4) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: boolean containsHeader(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i2) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r12 = virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i2) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
SPECIAL edge: specialinvoke $r13.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r8, r12) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getAllHeaders()> ==> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header getFirstHeader(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header getFirstHeader(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r5 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r4) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header getFirstHeader(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r4, r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header getFirstHeader(java.lang.String)> ==> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke r7.<java.util.List: int size()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r7.<java.util.List: int size()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r10 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r10 = interfaceinvoke r7.<java.util.List: java.lang.Object get(int)>(i2) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r9.<org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>(r5, $r11) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)> ==> <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header getLastHeader(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.Header[] getHeaders(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>("HTTP", 1, 1) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.ProtocolVersion getProtocolVersion()> ==> <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.HeaderIterator headerIterator()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: org.apache.http.HeaderIterator headerIterator(java.lang.String)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
INTERFACE edge: $r5 = interfaceinvoke r4.<org.apache.http.Header: java.lang.String getName()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeader(org.apache.http.Header)> ==> <org.apache.http.message.BasicHeader: java.lang.String getName()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>($r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>(r4) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void removeHeaders(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
INTERFACE edge: $r2 = interfaceinvoke r1.<org.apache.http.Header: java.lang.String getName()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(org.apache.http.Header)> ==> <org.apache.http.message.BasicHeader: java.lang.String getName()>
INTERFACE edge: $r3 = interfaceinvoke r1.<org.apache.http.Header: java.lang.String getValue()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(org.apache.http.Header)> ==> <org.apache.http.message.BasicHeader: java.lang.String getValue()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(java.lang.String,java.lang.String)>($r2, $r3) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(org.apache.http.Header)> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>(r4, r5) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(org.apache.http.Header)>(r2) in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeaders(org.apache.http.Header[])> ==> <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void setHeader(org.apache.http.Header)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String getUri()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r0.<org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>("HTTP", 1, 1) in <com.koushikdutta.async.http.AsyncHttpRequest$2: org.apache.http.ProtocolVersion getProtocolVersion()> ==> <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnHeadersReceivedData: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnHeadersReceivedData: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke $r16.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)>($r15, r2, $r14, $i1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r10) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r13.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2,com.koushikdutta.async.AsyncSocket)>(r1, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
CLINIT edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>(r0, $r2, i0, $r5, $r7, $r8, 1, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>(r0, $r2, i0, $r5, $r7, $r8, 1, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handshake(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean,com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnSocketData: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnSocketData: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnHeadersReceivedData: void <init>()> ==> <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnSocketData: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.libcore.ResponseHeaders$1: void <init>(com.koushikdutta.async.http.libcore.ResponseHeaders)>(r0) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void <init>(com.koushikdutta.async.http.libcore.ResponseHeaders)>
VIRTUAL edge: $i0 = virtualinvoke r3.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: r6 = virtualinvoke r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: r7 = virtualinvoke r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
VIRTUAL edge: $z0 = virtualinvoke $r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r9.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r10.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r11.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r12.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z18 = virtualinvoke r7.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no-cache") in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: r34 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z6 = virtualinvoke $r14.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z7 = virtualinvoke $r15.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: $z16 = interfaceinvoke $r24.<java.util.Set: boolean isEmpty()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.HashSet: boolean isEmpty()>
INTERFACE edge: $z16 = interfaceinvoke $r24.<java.util.Set: boolean isEmpty()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.TreeSet: boolean isEmpty()>
SPECIAL edge: specialinvoke $r28.<java.util.TreeSet: void <init>(java.util.Comparator)>($r29) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.TreeSet: void <init>(java.util.Comparator)>
VIRTUAL edge: $r27 = virtualinvoke r25.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: java.lang.String trim()>
INTERFACE edge: interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r27) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r26.<java.util.Set: boolean add(java.lang.Object)>($r27) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.util.TreeSet: boolean add(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z9 = virtualinvoke $r17.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z10 = virtualinvoke $r18.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z11 = virtualinvoke $r19.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z12 = virtualinvoke $r20.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z13 = virtualinvoke $r21.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z14 = virtualinvoke $r22.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z15 = virtualinvoke $r23.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isContentEncodingGzip()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Content-Encoding") in <com.koushikdutta.async.http.libcore.ResponseHeaders: void stripContentEncoding()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isChunked()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r1) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean hasConnectionClose()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("X-Android-Sent-Millis", $r2) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("X-Android-Received-Millis", $r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>
VIRTUAL edge: $z2 = virtualinvoke r2.<com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasAuthorization()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasAuthorization()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("*") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean hasVaryAll()> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Set: boolean contains(java.lang.Object)>("*") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean hasVaryAll()> ==> <java.util.TreeSet: boolean contains(java.lang.Object)>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.TreeMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r8 = interfaceinvoke r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)>(r1) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)>
SPECIAL edge: l1 = specialinvoke r0.<com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)>(l0) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)>
SPECIAL edge: l18 = specialinvoke r0.<com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()>
SPECIAL edge: $z4 = specialinvoke r0.<com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isFreshnessLifetimeHeuristic()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isFreshnessLifetimeHeuristic()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: boolean isNoCache()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean isNoCache()>
VIRTUAL edge: $z2 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasConditions()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasConditions()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxAgeSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxAgeSeconds()>
VIRTUAL edge: $i15 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxAgeSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxAgeSeconds()>
VIRTUAL edge: $i3 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMinFreshSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMinFreshSeconds()>
VIRTUAL edge: $i13 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMinFreshSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMinFreshSeconds()>
VIRTUAL edge: $i10 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxStaleSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxStaleSeconds()>
VIRTUAL edge: $i11 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxStaleSeconds()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getMaxStaleSeconds()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: void setIfNoneMatch(java.lang.String)>($r8) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfNoneMatch(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)>($r7) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)>($r6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setIfModifiedSince(java.util.Date)>
VIRTUAL edge: $z6 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasConditions()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean hasConditions()>
VIRTUAL edge: $l17 = virtualinvoke $r13.<java.util.concurrent.TimeUnit: long toMillis(long)>($l16) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: l19 = virtualinvoke $r12.<java.util.concurrent.TimeUnit: long toMillis(long)>($l14) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: l20 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toMillis(long)>($l12) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Warning", "110 HttpURLConnection \"Response is stale\"") in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Warning", "113 HttpURLConnection \"Heuristic expiration\"") in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
CLINIT edge: $r2 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
STATIC edge: $l18 = staticinvoke <java.lang.Math: long max(long,long)>($l17, $l13) in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)> ==> <java.lang.Math: long max(long,long)>
STATIC edge: $l17 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l16) in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)> ==> <java.lang.Math: long max(long,long)>
CLINIT edge: $r11 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit SECONDS> in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean validate(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>
VIRTUAL edge: $l1 = virtualinvoke $r5.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean validate(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l2 = virtualinvoke $r6.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean validate(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.util.Date: long getTime()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r16, r13) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>(r17, $r10) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: r16 = virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i2) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: r13 = virtualinvoke $r12.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i2) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
VIRTUAL edge: $z1 = virtualinvoke r16.<java.lang.String: boolean equals(java.lang.Object)>("Warning") in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r13.<java.lang.String: boolean startsWith(java.lang.String)>("1") in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r16) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r5.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: r17 = virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i3) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i3) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>($r7, $r0) in <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: r27 = virtualinvoke r26.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>(r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: virtualinvoke $r22.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>(r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>($r7, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void onHeadersReceived()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>
VIRTUAL edge: $z1 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r15) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: virtualinvoke $r19.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r28) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r19.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r28) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r25.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>($r24) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r25.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>($r24) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r46, $r45, $r38, null, $r44, $r43) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>($r46, $r45, $r38, null, $r44, $r43) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl$2)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl$2)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.StreamBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.FileBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r7, $r9, $r8) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.StringBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>
CLINIT edge: $l0 = staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: long access$300(com.koushikdutta.async.http.AsyncHttpRequest)>($r23) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: $l0 = staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: long access$300(com.koushikdutta.async.http.AsyncHttpRequest)>($r23) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient: long access$300(com.koushikdutta.async.http.AsyncHttpRequest)>
CLINIT edge: $l0 = staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: long access$300(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: $l0 = staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: long access$300(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.ConnectionClosedException: void <init>(java.lang.String,java.lang.Throwable)>("connection closed before response completed.", r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ConnectionClosedException: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>($r4) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)>(r1) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: void <init>(com.koushikdutta.async.DataSink)> ==> <com.koushikdutta.async.FilteredDataSink: void <init>(com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>($r7) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>($r10) in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n") in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.filter.ChunkedOutputFilter: com.koushikdutta.async.ByteBufferList filter(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.UntypedHashtable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.util.UntypedHashtable: void <init>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) in <com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1) in <com.koushikdutta.async.util.UntypedHashtable: void remove(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>(r1) in <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String,java.lang.Object)> ==> <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r86 = virtualinvoke $r9.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r86.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r72 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r72 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r72 = interfaceinvoke r86.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r87.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)>($r74) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.SimpleMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)>
INTERFACE edge: interfaceinvoke r87.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)>($r74) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void setDataEmitter(com.koushikdutta.async.DataEmitter)>($r15) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r65) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: r89 = virtualinvoke $r16.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: i5 = virtualinvoke r89.<com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>
VIRTUAL edge: r92 = virtualinvoke r89.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Location") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r91.<com.koushikdutta.async.http.AsyncHttpRequest: boolean getFollowRedirect()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: boolean getFollowRedirect()>
SPECIAL edge: specialinvoke $r67.<java.net.URL: void <init>(java.lang.String)>($r70) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.net.URL: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r66.<java.net.URL: void <init>(java.net.URL,java.lang.String)>($r67, r92) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.net.URL: void <init>(java.net.URL,java.lang.String)>
VIRTUAL edge: $r71 = virtualinvoke $r66.<java.net.URL: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>
VIRTUAL edge: $z1 = virtualinvoke $r37.<java.lang.String: boolean equals(java.lang.Object)>("HEAD") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r38.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>(r93, $r95) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
VIRTUAL edge: virtualinvoke $r38.<com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>("Redirected") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
VIRTUAL edge: virtualinvoke $r57.<com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>("Redirecting") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
SPECIAL edge: specialinvoke $r65.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Final (post cache response) headers:\n") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r24 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r19.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>($r25) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void setDataEmitter(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Detaching socket") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket getSocket()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$3$1: void setSocket(com.koushikdutta.async.AsyncSocket)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket detachSocket()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.HttpDate: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.text.DateFormat: java.util.Date parse(java.lang.String)>(r2) in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>(r7, $r9) in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <java.text.SimpleDateFormat: void <init>(java.lang.String,java.util.Locale)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>(r2) in <com.koushikdutta.async.http.libcore.HttpDate: java.util.Date parse(java.lang.String)> ==> <java.text.SimpleDateFormat: java.util.Date parse(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.ThreadLocal: java.lang.Object get()>() in <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)> ==> <java.lang.ThreadLocal: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.text.DateFormat: java.lang.String format(java.util.Date)>(r2) in <com.koushikdutta.async.http.libcore.HttpDate: java.lang.String format(java.util.Date)> ==> <java.text.DateFormat: java.lang.String format(java.util.Date)>
VIRTUAL edge: $i6 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i5, i7) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c2 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i7) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i3 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c4 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i9) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: r5 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i10, i12) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int,int)>(i9, i5) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: java.lang.String trim()>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler: void handle(java.lang.String,java.lang.String)>(r2, null) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler: void handle(java.lang.String,java.lang.String)>(r2, null) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler: void handle(java.lang.String,java.lang.String)>(r2, r5) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler: void handle(java.lang.String,java.lang.String)>(r2, r5) in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.libcore.HeaderParser: void parseCacheControl(java.lang.String,com.koushikdutta.async.http.libcore.HeaderParser$CacheControlHandler)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no-cache") in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("max-age") in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("max-stale") in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("min-fresh") in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("only-if-cached") in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r13.<java.io.File: boolean delete()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $i1 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, r2) in <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.WebSocketHandshakeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONArray: void <init>(java.util.Collection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: void <init>(java.util.Collection)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONArray: void <init>(org.json.JSONTokener)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: void <init>(org.json.JSONTokener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONArray: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray put(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: boolean isNull(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.Object get(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.Object opt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: boolean getBoolean(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: boolean optBoolean(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: boolean optBoolean(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: double getDouble(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: double optDouble(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: double optDouble(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: int getInt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: int optInt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: int optInt(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: long getLong(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: long optLong(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: long optLong(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String optString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String optString(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray getJSONArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONArray optJSONArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONObject getJSONObject(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONObject optJSONObject(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: org.json.JSONObject toJSONObject(org.json.JSONArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String join(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONArray: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
SPECIAL edge: specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>() in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.io.ByteArrayOutputStream: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.zip.Inflater: void <init>(boolean)>(1) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <java.util.zip.Inflater: void <init>(boolean)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.HybiParser$1: void <init>(com.koushikdutta.async.http.HybiParser)>(r0) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$1: void <init>(com.koushikdutta.async.http.HybiParser)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.http.HybiParser$2: void <init>(com.koushikdutta.async.http.HybiParser)>(r0) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$2: void <init>(com.koushikdutta.async.http.HybiParser)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.HybiParser$3: void <init>(com.koushikdutta.async.http.HybiParser)>(r0) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$3: void <init>(com.koushikdutta.async.http.HybiParser)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.HybiParser$4: void <init>(com.koushikdutta.async.http.HybiParser)>(r0) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$4: void <init>(com.koushikdutta.async.http.HybiParser)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.HybiParser$5: void <init>(com.koushikdutta.async.http.HybiParser)>(r0) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$5: void <init>(com.koushikdutta.async.http.HybiParser)>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.DataEmitterReader: void <init>()>() in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterReader: void <init>()>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r12.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r13) in <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>(1, r1, -1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(java.lang.String)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>(2, r1, -1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(byte[])> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>(2, r1, -1, i0, i1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(byte[],int,int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r3, $i54, $i53) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>(r3, $r4, i7) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, r3, b6, $i63) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $d11 = staticinvoke <java.lang.Math: double floor(double)>($d10) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double floor(double)>
STATIC edge: $d9 = staticinvoke <java.lang.Math: double random()>() in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double random()>
STATIC edge: $d8 = staticinvoke <java.lang.Math: double floor(double)>($d7) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double floor(double)>
STATIC edge: $d6 = staticinvoke <java.lang.Math: double random()>() in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double random()>
STATIC edge: $d5 = staticinvoke <java.lang.Math: double floor(double)>($d4) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double floor(double)>
STATIC edge: $d3 = staticinvoke <java.lang.Math: double random()>() in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double random()>
STATIC edge: $d2 = staticinvoke <java.lang.Math: double floor(double)>($d1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double floor(double)>
STATIC edge: $d0 = staticinvoke <java.lang.Math: double random()>() in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.Math: double random()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i3, r3, $i54, $i53) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
CLINIT edge: staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>(r3, $r4, i7) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>(9, r1, -1) in <com.koushikdutta.async.http.HybiParser: byte[] pingFrame(java.lang.String)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>(8, r1, i0) in <com.koushikdutta.async.http.HybiParser: void close(int,java.lang.String)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void sendFrame(byte[])>($r2) in <com.koushikdutta.async.http.HybiParser: void close(int,java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void sendFrame(byte[])>
STATIC edge: $r4 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r2) in <com.koushikdutta.async.http.WebSocketImpl$1: void sendFrame(byte[])> ==> <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: byte[] decode(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: byte[] decode(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: byte[] decode(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: java.lang.String encodeToString(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: byte[] encode(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Base64: byte[] encode(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.SimpleMiddleware: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r1.<java.lang.String: java.lang.String[] split(java.lang.String)>(";") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.body.JSONObjectBody: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: void <init>()>
VIRTUAL edge: $z2 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.body.StringBody: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.body.StringBody: void <init>()>
VIRTUAL edge: $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])>(r2) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Length") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Connection") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r29 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Encoding") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Encoding") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r15 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r14 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.BufferedDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r10 = interfaceinvoke r18.<com.koushikdutta.async.DataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FileDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.http.BodyDecoderException: void <init>(java.lang.String)>("not using chunked encoding, and no content-length found.") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.BodyDecoderException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r20.<com.koushikdutta.async.http.HttpUtil$EndEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke r22.<com.koushikdutta.async.http.HttpUtil$EndEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r13.<com.koushikdutta.async.http.filter.ContentLengthFilter: void <init>(long)>(l3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void <init>(long)>
VIRTUAL edge: virtualinvoke $r13.<com.koushikdutta.async.http.filter.ContentLengthFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: $z4 = virtualinvoke $r11.<java.lang.String: boolean contains(java.lang.CharSequence)>("HTTP/1.1") in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: $z2 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r5) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke r26.<com.koushikdutta.async.http.HttpUtil$EndEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: $z5 = virtualinvoke $r28.<java.lang.String: boolean equals(java.lang.Object)>($r29) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.filter.GZIPInputFilter: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.filter.GZIPInputFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>($r7) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>()>() in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.filter.InflaterInputFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r18) in <com.koushikdutta.async.http.HttpUtil: com.koushikdutta.async.DataEmitter getBodyDecoder(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.http.libcore.RawHeaders,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Connection") in <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.RawHeaders: int getHttpMinorVersion()>() in <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getHttpMinorVersion()>
VIRTUAL edge: z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r1) in <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.ArrayDeque: boolean remove(java.lang.Object)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.ArrayDeque: boolean remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r0) in <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>($r2) in <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>($r5) in <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONObject: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONObject: void <init>(java.util.Map)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: void <init>(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONObject: void <init>(org.json.JSONTokener)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: void <init>(org.json.JSONTokener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONObject: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: void <init>(org.json.JSONObject,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject put(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject put(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject put(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject put(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject putOpt(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject accumulate(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.Object remove(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: boolean isNull(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: boolean has(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.Object get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.Object opt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: boolean optBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: boolean optBoolean(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: double getDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: double optDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: double optDouble(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: int getInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: int optInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: int optInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: long optLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: long optLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String getString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String optString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String optString(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONArray getJSONArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject getJSONObject(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONObject optJSONObject(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONArray toJSONArray(org.json.JSONArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.util.Iterator keys()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: org.json.JSONArray names()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String numberToString(java.lang.Number)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONObject: java.lang.String quote(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <org.apache.http.ParseException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ParseException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <org.apache.http.ParseException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ParseException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: void <init>(java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.String getProtocol()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int getMajor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int getMinor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: org.apache.http.ProtocolVersion forVersion(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean isComparable(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: int compareToVersion(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean greaterEquals(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: boolean lessEquals(org.apache.http.ProtocolVersion)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.ProtocolVersion: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: java.lang.String getValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: org.apache.http.HeaderElement[] getElements()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.apache.http.message.BasicHeader: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r10.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r0, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.LineEmitter: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.LineEmitter: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>($r3) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)>(r4) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r1) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)>(r4) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.HttpUtil$EndEmitter: void <init>()>() in <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void <init>(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)>($r0, r4) in <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void <init>(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r3) in <com.koushikdutta.async.http.HttpUtil$EndEmitter: com.koushikdutta.async.http.HttpUtil$EndEmitter create(com.koushikdutta.async.AsyncServer,java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void onRequestCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.ConnectionClosedException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <com.koushikdutta.async.http.ConnectionClosedException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.libcore.ResponseSource: com.koushikdutta.async.http.libcore.ResponseSource[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no-cache") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("no-store") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("max-age") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("s-maxage") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("public") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("must-revalidate") in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void handle(java.lang.String,java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.accounts.Account: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.ComponentName: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.pm.Signature: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.graphics.Region: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <org.apache.http.ProtocolVersion: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.graphics.Matrix: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.InetSocketAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.text.ParsePosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.SyncAdapterType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.text.DateFormatSymbols: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.math.BigInteger: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.util.UUID: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.ContentValues: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <org.json.JSONArray: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.text.FieldPosition: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.text.SimpleDateFormat: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.IntentSender: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.content.res.Configuration: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <org.apache.http.message.BasicNameValuePair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.util.Pair: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.koushikdutta.async.http.libcore.Objects: boolean equal(java.lang.Object,java.lang.Object)> ==> <android.os.Messenger: boolean equals(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.accounts.Account: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.text.AttributedCharacterIterator$Attribute: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.ComponentName: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.pm.Signature: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <org.apache.http.ProtocolVersion: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.InetSocketAddress: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.text.ParsePosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.SyncAdapterType: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.text.DateFormatSymbols: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.security.Timestamp: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.math.BigInteger: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.AbstractList: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.Intent$FilterComparison: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.zip.ZipEntry: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.util.UUID: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.ContentValues: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <javax.security.auth.x500.X500Principal: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <org.json.JSONArray: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.text.FieldPosition: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.text.SimpleDateFormat: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.IntentSender: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.content.res.Configuration: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <org.apache.http.message.BasicNameValuePair: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.util.Pair: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Object: int hashCode()>() in <com.koushikdutta.async.http.libcore.Objects: int hashCode(java.lang.Object)> ==> <android.os.Messenger: int hashCode()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void <init>(java.io.OutputStream)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.ZipOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.BufferedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.DataOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.io.ObjectOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>($r6) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>($r4) in <com.koushikdutta.async.stream.OutputStreamDataCallback: void close()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)> ==> <javax.net.ssl.SSLException: void printStackTrace()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)> ==> <javax.xml.transform.TransformerException: void printStackTrace()>
VIRTUAL edge: virtualinvoke r0.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)> ==> <org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.json.JSONException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <org.json.JSONTokener: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.Object nextValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.String nextString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: org.json.JSONException syntaxError(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: boolean more()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: char next()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: char next(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: char nextClean()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.String next(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.String nextTo(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: java.lang.String nextTo(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: void skipPast(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: char skipTo(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: void back()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.json.JSONTokener: int dehexchar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.IOException: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: $b0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.http.HybiParser: void report(java.lang.Exception)>($r4) in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.HybiParser$ProtocolError: void printStackTrace()>() in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
VIRTUAL edge: $i2 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void get(byte[])>($r7) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
SPECIAL edge: specialinvoke $r17.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r15.<com.koushikdutta.async.http.HybiParser: void report(java.lang.Exception)>($r18) in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r19.<java.io.IOException: void printStackTrace()>() in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r19.<java.io.IOException: void printStackTrace()>() in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <javax.net.ssl.SSLException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.ByteBufferList: void get(byte[])>($r6) in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r2) in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.HybiParser: void report(java.lang.Exception)>($r6) in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.http.HybiParser$ProtocolError: void printStackTrace()>() in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
VIRTUAL edge: $b0 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.HybiParser: void parse()>() in <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.HybiParser: void parse()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke $r6.<java.util.zip.Inflater: void setInput(byte[],int,int)>($r7, $i5, $i6) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.Inflater: void setInput(byte[],int,int)>
VIRTUAL edge: i11 = virtualinvoke $r8.<java.util.zip.Inflater: int inflate(byte[],int,int)>($r9, $i9, $i10) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.Inflater: int inflate(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r13.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r17) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r14.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $z5 = virtualinvoke $r18.<java.util.zip.Inflater: boolean needsInput()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.Inflater: boolean needsInput()>
VIRTUAL edge: $z2 = virtualinvoke $r11.<java.util.zip.Inflater: boolean finished()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.Inflater: boolean finished()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r17) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)>($r15) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r1.<java.util.zip.Inflater: void <init>()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>()> ==> <java.util.zip.Inflater: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)>($r1) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>()> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.JSONObjectBody: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.JSONObjectBody: void <init>()>() in <com.koushikdutta.async.http.body.JSONObjectBody: void <init>(org.json.JSONObject)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.JSONObjectParser: void <init>()>() in <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONObjectParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONObjectParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.JSONObjectBody$1: void <init>(com.koushikdutta.async.http.body.JSONObjectBody,com.koushikdutta.async.callback.CompletedCallback)>(r4, r5) in <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void <init>(com.koushikdutta.async.http.body.JSONObjectBody,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.http.body.JSONObjectBody: int length()> ==> <org.json.JSONObject: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.JSONObjectBody: int length()> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.JSONObjectBody: org.json.JSONObject get()>() in <com.koushikdutta.async.http.body.JSONObjectBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.JSONObjectBody: org.json.JSONObject get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>(com.koushikdutta.async.http.Multimap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.Multimap: void <init>(java.util.List)>(r2) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>(java.util.List)> ==> <com.koushikdutta.async.http.Multimap: void <init>(java.util.List)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()>
STATIC edge: $r10 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r9, "UTF-8") in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>
STATIC edge: $r14 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r13, "UTF-8") in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.ByteBufferList)>(r4, $r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r5) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.ByteBufferList)>(r4, r6, $r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: int length()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.UrlEncodedFormBody: com.koushikdutta.async.http.Multimap get()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: com.koushikdutta.async.http.Multimap get()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setDataEmitter(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getField(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setBoundary(java.lang.String)>($r8) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void report(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: r5 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r6) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.Exception: void <init>(java.lang.String)>("No boundary found for multipart/form-data") in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>(java.lang.String[])> ==> <java.lang.Exception: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ZipDataSink: void end()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.MultipartFormDataBody$2: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.callback.CompletedCallback)>(r0, r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>($r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r15 = virtualinvoke $r2.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r14) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r8) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r12 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.body.MultipartFormDataBody$5: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)>(r0, r13, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.http.body.MultipartFormDataBody$4: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)>(r0, r13, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r16) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
SPECIAL edge: specialinvoke $r18.<com.koushikdutta.async.http.body.MultipartFormDataBody$3: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)>(r0, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)>
VIRTUAL edge: virtualinvoke $r17.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r18) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)>(r0, r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundary()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundary()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setBoundary(java.lang.String)>($r13) in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundary()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundary()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----------------------------") in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.util.UUID: java.lang.String toString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-", "") in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r12 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r11) in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("multipart/form-data; boundary=") in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundary()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundary()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setBoundary(java.lang.String)>($r20) in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundaryStart()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundaryEnd()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("----------------------------") in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.util.UUID: java.lang.String toString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("-", "") in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>
VIRTUAL edge: $r19 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $r8 = virtualinvoke r7.<com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>
VIRTUAL edge: $l1 = virtualinvoke r7.<com.koushikdutta.async.http.body.Part: long length()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.body.Part: long length()>
VIRTUAL edge: $l4 = virtualinvoke r7.<com.koushikdutta.async.http.body.Part: long length()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.body.Part: long length()>
VIRTUAL edge: $r10 = virtualinvoke r7.<com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r9) in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $i8 = virtualinvoke $r13.<java.lang.String: int length()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void <init>()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.body.FilePart: void <init>(java.lang.String,java.io.File)>(r2, r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addFilePart(java.lang.String,java.io.File)> ==> <com.koushikdutta.async.http.body.FilePart: void <init>(java.lang.String,java.io.File)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)>($r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addFilePart(java.lang.String,java.io.File)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.body.StringPart: void <init>(java.lang.String,java.lang.String)>(r2, r3) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addStringPart(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.body.StringPart: void <init>(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)>($r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addStringPart(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void addPart(com.koushikdutta.async.http.body.Part)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)>($r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody: com.koushikdutta.async.http.Multimap get()> ==> <com.koushikdutta.async.http.Multimap: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: com.koushikdutta.async.http.Multimap get()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: com.koushikdutta.async.http.Multimap get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.StringBody: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.StringBody: void <init>()>() in <com.koushikdutta.async.http.body.StringBody: void <init>(java.lang.String)> ==> <com.koushikdutta.async.http.body.StringBody: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.StringParser: void <init>()>() in <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.StringParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.StringBody$1: void <init>(com.koushikdutta.async.http.body.StringBody,com.koushikdutta.async.callback.CompletedCallback)>(r4, r5) in <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.StringBody$1: void <init>(com.koushikdutta.async.http.body.StringBody,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.StringBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.StringBody: int length()> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.StringBody: java.lang.String toString()>() in <com.koushikdutta.async.http.body.StringBody: java.lang.String get()> ==> <com.koushikdutta.async.http.body.StringBody: java.lang.String toString()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.StringBody: java.lang.String get()>() in <com.koushikdutta.async.http.body.StringBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.StringBody: java.lang.String get()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <init>()> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: c32 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: char getByteChar()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: char getByteChar()>
VIRTUAL edge: $c18 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: char getByteChar()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: char getByteChar()>
VIRTUAL edge: i6 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: r8 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)>(i8) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList get(int)>
VIRTUAL edge: i12 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i16 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i13 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $c5 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: char getByteChar()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: char getByteChar()>
VIRTUAL edge: $c3 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: char getByteChar()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: char getByteChar()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid chunk length: ") in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c32) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>($r18) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>($r14) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>
SPECIAL edge: $z6 = specialinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkLF(char)>($c18) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkLF(char)>
SPECIAL edge: $z2 = specialinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkCR(char)>($c5) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkCR(char)>
SPECIAL edge: $z1 = specialinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkLF(char)>($c3) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkLF(char)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>($r20) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>
VIRTUAL edge: $i15 = virtualinvoke r8.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i14 = virtualinvoke r8.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r11.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r10.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.BodyDecoderException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.zip.Inflater: void <init>(boolean)>(1) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void <init>()> ==> <java.util.zip.Inflater: void <init>(boolean)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)>($r1) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void <init>()> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void <init>(java.util.zip.Inflater)>
SPECIAL edge: specialinvoke $r2.<java.util.zip.CRC32: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter: void <init>()> ==> <java.util.zip.CRC32: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>(10, $r5) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter,com.koushikdutta.async.DataEmitter,com.koushikdutta.async.PushParser)>(r0, r1, $r3) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter,com.koushikdutta.async.DataEmitter,com.koushikdutta.async.PushParser)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void <init>(long)> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void <init>(long)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r2, $i6) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: i7 = virtualinvoke $r3.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r4, $r5) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.http.filter.ContentLengthFilter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void report(java.lang.Exception)>
VIRTUAL edge: $i9 = virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>(r0) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r5.<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>($r7, $i0) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1$2,com.koushikdutta.async.callback.CompletedCallback)>(r0, r10) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1$2,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r15 = virtualinvoke $r11.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>($r9, $r14, $i1, 0) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>
VIRTUAL edge: $r15 = virtualinvoke $r11.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>($r9, $r14, $i1, 0) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>($r5, $r15) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.future.Cancellable connectSocket(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.ConnectionFailedException: void <init>(java.lang.String)>("Unable to connect to remote address") in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ConnectionFailedException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: boolean setComplete(java.lang.Exception)>($r4) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
SPECIAL edge: specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("socket closed before proxy connect response") in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r11, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r11, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r11, $r9) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: $i1 = virtualinvoke $r27.<java.lang.String: int length()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $z1 = virtualinvoke $r38.<java.lang.String: boolean contains(java.lang.CharSequence)>("200") in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
INTERFACE edge: interfaceinvoke $r29.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r29.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r29.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r29.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r34.<java.io.IOException: void <init>(java.lang.String)>("non 200 status line") in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r34, $r37) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r34, $r37) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r34, $r37) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r7 = virtualinvoke r6.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: virtualinvoke $r26.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)>($r25, $r24, $r23, $i0) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)>
SPECIAL edge: specialinvoke $r10.<java.io.IOException: void <init>(java.lang.String)>("unknown second status line") in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <java.io.IOException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r10, $r13) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r10, $r13) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r10, $r13) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>(r1, r2) in <com.koushikdutta.async.http.filter.DataRemainingException: void <init>(java.lang.String,java.lang.Exception)> ==> <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)>(r1, $r3) in <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,org.json.JSONObject)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: java.lang.String readString()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String readString()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void <init>()> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\r\n--") in <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void setBoundary(java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int)>($r4, 4, $i1) in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundary()> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke $r5.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],int,int)>($r3, 2, $i1) in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("--\r\n") in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>(r29) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void addFirst(java.nio.ByteBuffer)>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r2) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
SPECIAL edge: specialinvoke $r20.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r30) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r20) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryStart()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryStart()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryStart()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void report(java.lang.Exception)>($r16) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void report(java.lang.Exception)>($r15) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r14) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryEnd()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryEnd()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void report(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void report(java.lang.Exception)>($r8) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void report(java.lang.Exception)>($r6) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r5) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>("Invalid multipart/form-data. Expected \r or -") in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r15.<com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>("Invalid multipart/form-data. Expected -") in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r31) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>("Invalid multipart/form-data. Expected \r") in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>("Invalid multipart/form-data. Expected \n") in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>("Invalid multipart/form-data. Unknown state?") in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r33) in <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
CLINIT edge: $r0 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
CLINIT edge: $r3 = new com.koushikdutta.async.LineEmitter in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.Part: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>("name") in <com.koushikdutta.async.http.body.Part: java.lang.String getName()> ==> <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>(java.lang.String)>($r5) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.StringBuilder: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: r12 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r12 = interfaceinvoke r7.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: $r16 = interfaceinvoke r14.<org.apache.http.NameValuePair: java.lang.String getName()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getName()>
INTERFACE edge: $r17 = interfaceinvoke r14.<org.apache.http.NameValuePair: java.lang.String getValue()>() in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Disposition", $r9) in <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.body.Part: java.lang.String getContentType()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Type", r1) in <com.koushikdutta.async.http.body.Part: void setContentType(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>("filename") in <com.koushikdutta.async.http.body.Part: java.lang.String getFilename()> ==> <com.koushikdutta.async.http.Multimap: java.lang.String getString(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r2) in <com.koushikdutta.async.http.body.Part: java.lang.String getFilename()> ==> <java.io.File: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.http.body.Part: java.lang.String getFilename()> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.http.Multimap: boolean containsKey(java.lang.Object)>("filename") in <com.koushikdutta.async.http.body.Part: boolean isFile()> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.body.Part: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.io.File: long length()>() in <com.koushikdutta.async.http.body.FilePart: void <init>(java.lang.String,java.io.File)> ==> <java.io.File: long length()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)>(r2) in <com.koushikdutta.async.http.body.FilePart: void <init>(java.lang.String,java.io.File)> ==> <com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.StreamPart: void <init>(java.lang.String,long,java.util.List)>(r1, $l2, $r3) in <com.koushikdutta.async.http.body.FilePart: void <init>(java.lang.String,java.io.File)> ==> <com.koushikdutta.async.http.body.StreamPart: void <init>(java.lang.String,long,java.util.List)>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.StringPart: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.StreamPart: void <init>(java.lang.String,long,java.util.List)>(r1, $l1, null) in <com.koushikdutta.async.http.body.StringPart: void <init>(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.body.StreamPart: void <init>(java.lang.String,long,java.util.List)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundaryEnd()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryEnd()>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r9.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getBoundaryStart()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: java.lang.String getBoundaryStart()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.Part: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: r8 = virtualinvoke $r7.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.String: byte[] getBytes()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>(r0) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>(r0) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.body.Part: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)>($r7) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.Part: void <init>(com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $z1 = virtualinvoke $r6.<com.koushikdutta.async.http.body.Part: boolean isFile()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.Part: boolean isFile()>
VIRTUAL edge: $r14 = virtualinvoke $r6.<com.koushikdutta.async.http.body.Part: java.lang.String getName()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.Part: java.lang.String getName()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.http.body.MultipartFormDataBody: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.DataCallback getDataCallback()>
SPECIAL edge: specialinvoke $r19.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r19) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r15.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r17.<com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody$1)>(r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody$1)>
VIRTUAL edge: virtualinvoke $r18.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r17) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
CLINIT edge: $r7 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
VIRTUAL edge: l0 = virtualinvoke $r1.<com.koushikdutta.async.http.body.Part: long length()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.Part: long length()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.body.Part: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.body.Part: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>($r3, r2) in <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.Part: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: r1 = virtualinvoke $r0.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.String: byte[] getBytes()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)>(r1, $r3) in <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: com.koushikdutta.async.http.filter.ChunkedInputFilter$State[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.io.IOException: void <init>(java.lang.String)>($r13) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.http.filter.GZIPInputFilter: void report(java.lang.Exception)>($r9) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r15.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r14) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r7.<java.util.zip.CRC32: void update(byte[],int,int)>(r0, 0, $i6) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <java.util.zip.CRC32: void update(byte[],int,int)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>(r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>(2, $r3) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>
SPECIAL edge: specialinvoke r2.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()>
CLINIT edge: $r0 = new com.koushikdutta.async.PushParser in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.PushParser: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void parsed(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.filter.PrematureDataEndException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: boolean isDone()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
SPECIAL edge: specialinvoke $r33.<java.lang.Exception: void <init>(java.lang.String)>("internal error during connect") in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Exception: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r35.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: boolean isDone()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
VIRTUAL edge: $z2 = virtualinvoke $r22.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Recycling extra socket leftover from cancelled operation") in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r24.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: boolean setComplete(java.lang.Exception,java.lang.Object)>(null, r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r3, r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r3, r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r3, r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.ConnectionFailedException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.server.MimeEncodingException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)>(r1, l0, r2) in <com.koushikdutta.async.http.body.StreamPart: void <init>(java.lang.String,long,java.util.List)> ==> <com.koushikdutta.async.http.body.Part: void <init>(java.lang.String,long,java.util.List)>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.http.body.StreamPart: java.io.InputStream getInputStream()>() in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.FilePart: java.io.InputStream getInputStream()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.http.body.StreamPart: java.io.InputStream getInputStream()>() in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.StringPart: java.io.InputStream getInputStream()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.http.body.StreamPart: void write(com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r10.<java.util.zip.CRC32: void update(byte[],int,int)>(r2, 0, 2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])> ==> <java.util.zip.CRC32: void update(byte[],int,int)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1$1)>(r0) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1$1)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>(i1, $r5) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void parsed(byte[])>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r4 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke $r7.<java.util.zip.CRC32: void update(byte[],int,int)>($r8, $i3, $i4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.CRC32: void update(byte[],int,int)>
VIRTUAL edge: $l1 = virtualinvoke $r5.<java.util.zip.CRC32: long getValue()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <java.util.zip.CRC32: long getValue()>
SPECIAL edge: specialinvoke $r16.<java.io.IOException: void <init>(java.lang.String)>("CRC mismatch") in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r17.<com.koushikdutta.async.http.filter.GZIPInputFilter: void report(java.lang.Exception)>($r16) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r8.<java.util.zip.CRC32: void reset()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <java.util.zip.CRC32: void reset()>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.http.filter.GZIPInputFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>($r13) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void parsed(byte[])>
VIRTUAL edge: virtualinvoke $r9.<java.util.zip.CRC32: void update(byte[],int,int)>(r8, 0, $i0) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(byte[])> ==> <java.util.zip.CRC32: void update(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(byte[])>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(java.lang.Object)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void parsed(byte[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>(r1, "HEAD") in <com.koushikdutta.async.http.AsyncHttpHead: void <init>(android.net.Uri)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpPost: void <init>(android.net.Uri)>($r2) in <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpPost: void <init>(android.net.Uri)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>(r1, "POST") in <com.koushikdutta.async.http.AsyncHttpPost: void <init>(android.net.Uri)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void <init>(android.net.Uri,java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void spewInternal()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r15) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r9) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r18) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r15) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r9) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.Util: void <clinit>()>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r18) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean $assertionsDisabled> in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: java.util.ArrayList getMiddleware()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.http.AsyncHttpClient: java.util.ArrayList getMiddleware()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void insertMiddleware(com.koushikdutta.async.http.AsyncHttpClientMiddleware)>
VIRTUAL edge: r9 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Response cache already added to http client") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.ResponseCacheMiddleware: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>(r5, l0, 0) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.http.ResponseCacheMiddleware addCache(com.koushikdutta.async.http.AsyncHttpClient,java.io.File,long)> ==> <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $z1 = virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RequestHeaders: boolean isNoCache()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: boolean isNoCache()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: r54 = virtualinvoke $r9.<com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)>(r8, 2) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)>
VIRTUAL edge: $i0 = virtualinvoke $r10.<java.io.FileInputStream: int available()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke $r10.<java.io.FileInputStream: int available()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.io.FileInputStream: int available()>
SPECIAL edge: specialinvoke $r62.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)>($r12) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)>
VIRTUAL edge: $z2 = virtualinvoke $r62.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)>($r15, $r17, $r21) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>
SPECIAL edge: specialinvoke $r63.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry,java.io.FileInputStream)>($r62, $r23) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry,java.io.FileInputStream)>
VIRTUAL edge: r24 = virtualinvoke $r63.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.util.Map getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.util.Map getHeaders()>
VIRTUAL edge: r25 = virtualinvoke $r63.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r64.<com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>($r28, r58) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: virtualinvoke $r64.<com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)>($l4, $l5) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void setLocalTimestamps(long,long)>
VIRTUAL edge: r33 = virtualinvoke $r64.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)>(l6, $r32) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseSource chooseResponseSource(long,com.koushikdutta.async.http.libcore.RequestHeaders)>
VIRTUAL edge: virtualinvoke r58.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r30) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r58.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Content-Encoding") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: virtualinvoke r58.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: $r42 = virtualinvoke r58.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r32 = virtualinvoke $r31.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r40.<com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>("Response retrieved from cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
SPECIAL edge: specialinvoke $r65.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSSLSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>(r0, $r63, l1) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSSLSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>
SPECIAL edge: specialinvoke $r66.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>(r0, $r63, l1) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke $r41.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>($r44) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r67.<com.koushikdutta.async.http.ResponseCacheMiddleware$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket)>(r0, r2, $r59) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket)>
VIRTUAL edge: virtualinvoke $r46.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r67) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r68.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke $r37.<com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>("Response may be served from conditional cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
SPECIAL edge: specialinvoke $r69.<com.koushikdutta.async.http.ResponseCacheMiddleware$CacheData: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CacheData: void <init>()>
VIRTUAL edge: virtualinvoke $r39.<com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>("cache-data", $r69) in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r36.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Response can not be served from cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: $r59 = virtualinvoke $r58.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r59.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("X-Served-From", "cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>("cache-data") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r39.<com.koushikdutta.async.http.libcore.ResponseHeaders: boolean validate(com.koushikdutta.async.http.libcore.ResponseHeaders)>($r38) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean validate(com.koushikdutta.async.http.libcore.ResponseHeaders)>
VIRTUAL edge: virtualinvoke $r42.<com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>("Serving response from conditional cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
VIRTUAL edge: $r44 = virtualinvoke $r43.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r44.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Content-Length") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)>($r45) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.ResponseHeaders combine(com.koushikdutta.async.http.libcore.ResponseHeaders)>
VIRTUAL edge: $r49 = virtualinvoke $r48.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r51 = virtualinvoke $r50.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r52 = virtualinvoke $r51.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: virtualinvoke $r49.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r52) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r54 = virtualinvoke $r53.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r54.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("X-Served-From", "conditional-cache") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r55.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>($r56, $l6) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>
VIRTUAL edge: virtualinvoke $r55.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>($r57) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r55.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()>
VIRTUAL edge: virtualinvoke $r40.<com.koushikdutta.async.util.UntypedHashtable: void remove(java.lang.String)>("cache-data") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.UntypedHashtable: void remove(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $z1 = virtualinvoke $r9.<com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)>($r10) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isCacheable(com.koushikdutta.async.http.libcore.RequestHeaders)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>
VIRTUAL edge: $z2 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("GET") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Response is not cacheable") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<com.koushikdutta.async.http.libcore.ResponseHeaders: java.util.Set getVaryFields()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: java.util.Set getVaryFields()>
VIRTUAL edge: r22 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)>($r21) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: com.koushikdutta.async.http.libcore.RawHeaders getAll(java.util.Set)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r23.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.libcore.ResponseHeaders)>($r25, r22, $r27, $r26) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.libcore.ResponseHeaders)>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)>($r31) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)>
SPECIAL edge: specialinvoke $r29.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$1)>(null) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$1)>
VIRTUAL edge: virtualinvoke $r29.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void setDataEmitter(com.koushikdutta.async.DataEmitter)>($r34) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r31.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,java.lang.String)>(r7, r63) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,java.lang.String)>
VIRTUAL edge: virtualinvoke $r31.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>(1) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>
VIRTUAL edge: virtualinvoke $r31.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()>
VIRTUAL edge: virtualinvoke $r35.<com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>("body-cacher", $r29) in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.util.UntypedHashtable: void put(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r36.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Caching response") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onBodyDecoder(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnBodyData)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()> ==> <com.koushikdutta.async.util.FileCache: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware: int access$608(com.koushikdutta.async.http.ResponseCacheMiddleware)>($r3) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: int access$608(com.koushikdutta.async.http.ResponseCacheMiddleware)>
STATIC edge: staticinvoke <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()> ==> <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>("cache-data") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>("body-cacher") in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.util.UntypedHashtable: java.lang.Object get(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>
VIRTUAL edge: virtualinvoke r7.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void commit()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void commit()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.util.FileCache: void clear()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void clear()> ==> <com.koushikdutta.async.util.FileCache: void clear()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>(r2, l0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r8) in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Throwable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Enum: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Integer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.res.ColorStateList: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.Proxy: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Thread: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.accounts.Account: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.nio.ByteOrder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.io.ByteArrayOutputStream: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.Currency: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.reflect.Constructor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.AbstractMap: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.text.AttributedCharacterIterator$Attribute: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.StringBuffer: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.ComponentName: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.json.JSONTokener: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.security.Provider$Service: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.AbstractCollection: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.EventObject: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.json.JSONObject: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.concurrent.atomic.AtomicInteger: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.res.AssetFileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.Intent$ShortcutIconResource: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.xml.sax.SAXException: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.nio.charset.CodingErrorAction: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Boolean: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Package: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Class: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Float: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.nio.channels.FileChannel$MapMode: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Character: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.Looper: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.net.Uri$Builder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.graphics.Region: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.Message: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.http.AsyncHttpRequest$1: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.http.AsyncHttpRequest$2: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.String: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.Hashtable: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.apache.http.ProtocolVersion: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.util.TypedValue: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.util.LruCache: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.graphics.Matrix: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.ContentProviderResult: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.InetSocketAddress: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.PatternMatcher: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.regex.Pattern: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.text.ParsePosition: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.SyncAdapterType: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.io.ObjectStreamClass: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.graphics.Paint$FontMetricsInt: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Character$Subset: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.res.TypedArray: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.security.CodeSigner: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ResolveInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.text.DateFormatSymbols: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.http.body.StringBody: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.security.Timestamp: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.Bundle: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.ThreadGroup: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.ServerSocket: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Long: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.Handler: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.math.BigInteger: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.io.ObjectStreamField: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.NetworkInterface: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.FeatureInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.StackTraceElement: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.reflect.Field: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.http.libcore.StrictLineReader$1: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.graphics.Rect: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.Date: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ProviderInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.Locale: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Short: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ActivityInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.InstrumentationInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.zip.ZipEntry: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.graphics.RectF: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.PermissionGroupInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.UUID: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.util.DisplayMetrics: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.ContentValues: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <javax.security.auth.x500.X500Principal: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.PackageInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.concurrent.Semaphore: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.apache.http.message.BasicHeader: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ServiceInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.json.JSONArray: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.PermissionInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.os.ParcelFileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ConfigurationInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.InetAddress: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.text.FieldPosition: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Double: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.IntentSender: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <javax.net.ssl.SSLEngineResult: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.io.File: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.res.Configuration: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.URL: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.apache.http.conn.ssl.StrictHostnameVerifier: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.URI: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.Byte: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.database.sqlite.SQLiteQuery: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.concurrent.LinkedBlockingQueue: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.pm.ApplicationInfo: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.net.Socket: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.util.concurrent.ThreadPoolExecutor: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <android.content.Intent: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.nio.charset.CoderResult: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <com.koushikdutta.async.dns.DnsResponse: java.lang.String toString()>
VIRTUAL edge: $r5 = virtualinvoke r4.<java.lang.Object: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.io.FileDescriptor: java.lang.String toString()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r2.<java.math.BigInteger: void <init>(int,byte[])>(1, r15) in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.math.BigInteger: void <init>(int,byte[])>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.math.BigInteger: java.lang.String toString(int)>(16) in <com.koushikdutta.async.util.FileCache: java.lang.String toKeyString(java.lang.Object[])> ==> <java.math.BigInteger: java.lang.String toString(int)>
SPECIAL edge: specialinvoke $r2.<java.math.BigInteger: void <init>(int,java.util.Random)>(128, $r3) in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.math.BigInteger: void <init>(int,java.util.Random)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.math.BigInteger: java.lang.String toString(int)>(16) in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.math.BigInteger: java.lang.String toString(int)>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r4, $r5) in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.io.File: boolean exists()>() in <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.util.FileCache: java.io.File getTempFile()>() in <com.koushikdutta.async.util.FileCache: java.io.File[] getTempFiles(int)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getTempFile()>
VIRTUAL edge: virtualinvoke r2.<java.io.File: boolean delete()>() in <com.koushikdutta.async.util.FileCache: void removeFiles(java.io.File[])> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)>(r1) in <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.koushikdutta.async.util.FileCache$InternalCache: java.lang.Object remove(java.lang.Object)>($r3) in <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.util.FileCache: boolean exists(java.lang.String,int)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() in <com.koushikdutta.async.util.FileCache: boolean exists(java.lang.String,int)> ==> <java.io.File: boolean exists()>
CLINIT edge: $r0 = new java.io.File in <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)> ==> <java.io.File: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r1, 0) in <com.koushikdutta.async.util.FileCache: boolean exists(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() in <com.koushikdutta.async.util.FileCache: boolean exists(java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: virtualinvoke r1.<java.io.File: boolean setLastModified(long)>($l0) in <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)> ==> <java.io.File: boolean setLastModified(long)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.util.FileCache$InternalCache: java.lang.Object get(java.lang.Object)>($r3) in <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r2, 0) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream get(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>($r3) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream get(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>
SPECIAL edge: specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>($r4) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream get(java.lang.String)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r1, 0) in <com.koushikdutta.async.util.FileCache: java.io.File getFile(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>($r2) in <com.koushikdutta.async.util.FileCache: java.io.File getFile(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r3, i2) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>($r4) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)> ==> <com.koushikdutta.async.util.FileCache: java.io.File touch(java.io.File)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>(r3) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)> ==> <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>
SPECIAL edge: specialinvoke $r11.<java.io.FileInputStream: void <init>(java.io.File)>($r5) in <com.koushikdutta.async.util.FileCache: java.io.FileInputStream[] get(java.lang.String,int)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)>(r1) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r1, i1) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>(r1) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>($r5) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: void remove(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>(r1, i1) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke r3.<java.io.File: boolean renameTo(java.io.File)>(r4) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <java.io.File: boolean renameTo(java.io.File)>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)>(r0, r4) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.util.FileCache$InternalCache: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, $r8) in <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.util.FileCache: void doLoad()>() in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <com.koushikdutta.async.util.FileCache: void doLoad()>
SPECIAL edge: specialinvoke $r1.<java.util.Random: void <init>()>() in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <java.util.Random: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.util.FileCache$1: void <init>(com.koushikdutta.async.util.FileCache)>(r0) in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <com.koushikdutta.async.util.FileCache$1: void <init>(com.koushikdutta.async.util.FileCache)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.util.FileCache$InternalCache: void <init>(com.koushikdutta.async.util.FileCache)>(r0) in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void <init>(com.koushikdutta.async.util.FileCache)>
VIRTUAL edge: virtualinvoke r3.<java.io.File: boolean mkdirs()>() in <com.koushikdutta.async.util.FileCache: void <init>(java.io.File,long,boolean)> ==> <java.io.File: boolean mkdirs()>
VIRTUAL edge: $l0 = virtualinvoke $r1.<com.koushikdutta.async.util.FileCache$InternalCache: long size()>() in <com.koushikdutta.async.util.FileCache: long size()> ==> <com.koushikdutta.async.util.LruCache: long size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>() in <com.koushikdutta.async.util.FileCache: void clear()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.util.FileCache$InternalCache: void evictAll()>() in <com.koushikdutta.async.util.FileCache: void clear()> ==> <com.koushikdutta.async.util.LruCache: void evictAll()>
SPECIAL edge: specialinvoke $r0.<java.util.HashSet: void <init>()>() in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.util.HashSet: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.util.HashSet: boolean add(java.lang.Object)>($r8) in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.io.File: java.io.File[] listFiles()>() in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: r7 = virtualinvoke r6.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: i1 = virtualinvoke r7.<java.lang.String: int lastIndexOf(int)>(46) in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.lang.String: int lastIndexOf(int)>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.lang.String: java.lang.String substring(int,int)>(0, i1) in <com.koushikdutta.async.util.FileCache: java.util.Set keySet()> ==> <java.lang.String: java.lang.String substring(int,int)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.util.FileCache$InternalCache: void setMaxSize(long)>(l0) in <com.koushikdutta.async.util.FileCache: void setMaxSize(long)> ==> <com.koushikdutta.async.util.LruCache: void setMaxSize(long)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.util.FileCache: void doLoad()>() in <com.koushikdutta.async.util.FileCache: void setMaxSize(long)> ==> <com.koushikdutta.async.util.FileCache: void doLoad()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CacheData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>(r2, $r3) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>
VIRTUAL edge: $r4 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
VIRTUAL edge: $r5 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
VIRTUAL edge: i0 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()>
VIRTUAL edge: $r14 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
VIRTUAL edge: $r9 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
VIRTUAL edge: i2 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()>
VIRTUAL edge: $r12 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r20.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r13.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>($r14) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
SPECIAL edge: specialinvoke $r21.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r9) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>($r12) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getMethod()>
VIRTUAL edge: $r7 = virtualinvoke r6.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>(0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>
SPECIAL edge: specialinvoke $r3.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>(r1, $r4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke $r2.<java.io.BufferedWriter: void <init>(java.io.Writer)>($r3) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.BufferedWriter: void <init>(java.io.Writer)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r11) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r16) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r22) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r63) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r29) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r35) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r53) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(int)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.BufferedWriter: void write(int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void write(java.lang.String)>($r41) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.io.Writer: void close()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.io.BufferedWriter: void close()>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r18.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i1 = virtualinvoke $r23.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
SPECIAL edge: specialinvoke $r54.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r57 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r56) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r56 = virtualinvoke $r55.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: $r58 = virtualinvoke $r57.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r60 = virtualinvoke $r59.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
VIRTUAL edge: $r61 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r60) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r62 = virtualinvoke $r61.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r63 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r27 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r26) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r32) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke $r31.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i3 = virtualinvoke $r36.<com.koushikdutta.async.http.libcore.RawHeaders: int length()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int length()>
SPECIAL edge: specialinvoke $r44.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r47 = virtualinvoke $r44.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r46) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r46 = virtualinvoke $r45.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>(i5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getFieldName(int)>
VIRTUAL edge: $r48 = virtualinvoke $r47.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r50 = virtualinvoke $r49.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>(i5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getValue(int)>
VIRTUAL edge: $r51 = virtualinvoke $r48.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r50) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r53 = virtualinvoke $r52.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: $z0 = specialinvoke r7.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean isHttps()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean isHttps()>
SPECIAL edge: specialinvoke r7.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>($r2, $r42) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>
SPECIAL edge: specialinvoke r7.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>($r2, $r43) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])>
SPECIAL edge: specialinvoke $r37.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r39 = virtualinvoke $r37.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r38) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r40 = virtualinvoke $r39.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r41 = virtualinvoke $r40.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeTo(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r9 = staticinvoke <android.util.Base64: java.lang.String encodeToString(byte[],int)>(r8, 0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <android.util.Base64: java.lang.String encodeToString(byte[],int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.Integer: java.lang.String toString(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>(r1, $r7) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $z2 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)>($r9, r10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean varyMatches(java.util.Map,java.util.Map)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean matches(android.net.Uri,java.lang.String,java.util.Map)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r6, $r12) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r6, r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i1 = virtualinvoke $r13.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r11) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r11) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>(r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>(r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>(r5) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: r19 = virtualinvoke $r10.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>(1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)>
VIRTUAL edge: $z0 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: r11 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>($r9) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void close()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void abort()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void commit()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()>
STATIC edge: staticinvoke <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>($r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()> ==> <com.koushikdutta.async.util.StreamUtility: void closeQuietly(java.io.Closeable[])>
STATIC edge: staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware: int access$508(com.koushikdutta.async.http.ResponseCacheMiddleware)>($r6) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: int access$508(com.koushikdutta.async.http.ResponseCacheMiddleware)>
STATIC edge: $r3 = staticinvoke <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.util.FileCache access$400(com.koushikdutta.async.http.ResponseCacheMiddleware)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.util.FileCache access$400(com.koushikdutta.async.http.ResponseCacheMiddleware)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,java.lang.String)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.util.FileCache: java.io.File[] getTempFiles(int)>(2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File[] getTempFiles(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>(r1, r2, l0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSSLSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.util.Allocator: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.util.Allocator: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter)>(r0) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.util.Allocator: void setCurrentAlloc(int)>($i1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse,long)> ==> <com.koushikdutta.async.util.Allocator: void setCurrentAlloc(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()>
SPECIAL edge: specialinvoke r0.<java.net.CacheResponse: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry,java.io.FileInputStream)> ==> <java.net.CacheResponse: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.util.Map getHeaders()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.util.Map toMultimap()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.InputStream getBody()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int)>(r1, 8192) in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)>(r1, i0, $r2) in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)>(r1, 8192, r2) in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,java.nio.charset.Charset)> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.lang.NullPointerException: void <init>(java.lang.String)>("in == null") in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("charset == null") in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("capacity <= 0") in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Unsupported encoding") in <com.koushikdutta.async.http.libcore.StrictLineReader: void <init>(java.io.InputStream,int,java.nio.charset.Charset)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void close()> ==> <java.io.FileInputStream: void close()>
SPECIAL edge: specialinvoke $r12.<java.io.IOException: void <init>(java.lang.String)>("LineReader is closed") in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()>
SPECIAL edge: specialinvoke $r15.<java.lang.String: void <init>(byte[],int,int)>($r16, $i24, $i26) in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.libcore.StrictLineReader$1: void <init>(com.koushikdutta.async.http.libcore.StrictLineReader,int)>(r0, $i5) in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <com.koushikdutta.async.http.libcore.StrictLineReader$1: void <init>(com.koushikdutta.async.http.libcore.StrictLineReader,int)>
VIRTUAL edge: virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r5, $i9, $i8) in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r8, $i15, $i14) in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: java.lang.String toString()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()> ==> <com.koushikdutta.async.http.libcore.StrictLineReader$1: java.lang.String toString()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <com.koushikdutta.async.http.libcore.StrictLineReader: java.lang.String readLine()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("expected an int but was \"") in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\"") in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.io.IOException: void <init>(java.lang.String)>($r9) in <com.koushikdutta.async.http.libcore.StrictLineReader: int readInt()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.util.LruCache: void <init>(long)>($l0) in <com.koushikdutta.async.util.FileCache$InternalCache: void <init>(com.koushikdutta.async.util.FileCache)> ==> <com.koushikdutta.async.util.LruCache: void <init>(long)>
VIRTUAL edge: l0 = virtualinvoke r0.<java.io.File: long lastModified()>() in <com.koushikdutta.async.util.FileCache$1: int compare(java.io.File,java.io.File)> ==> <java.io.File: long lastModified()>
VIRTUAL edge: l1 = virtualinvoke r1.<java.io.File: long lastModified()>() in <com.koushikdutta.async.util.FileCache$1: int compare(java.io.File,java.io.File)> ==> <java.io.File: long lastModified()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache$1: int compare(java.io.File,java.io.File)>($r4, $r3) in <com.koushikdutta.async.util.FileCache$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$1: int compare(java.io.File,java.io.File)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.util.FileCache: void load()>() in <com.koushikdutta.async.util.FileCache$2: void run()> ==> <com.koushikdutta.async.util.FileCache: void load()>
CLINIT edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r2) in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r3, $r5) in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: staticinvoke <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>($r3, r2) in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.util.Collections: boolean addAll(java.util.Collection,java.lang.Object[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke r2.<java.io.File: long length()>() in <com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(byte[],int,int)>($r3, 0, $i6) in <com.koushikdutta.async.http.libcore.StrictLineReader$1: java.lang.String toString()> ==> <java.lang.String: void <init>(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.LruCache: void <init>(long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("maxSize <= 0") in <com.koushikdutta.async.util.LruCache: void <init>(long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedHashMap: void <init>(int,float,boolean)>(0, 0.75F, 1) in <com.koushikdutta.async.util.LruCache: void <init>(long)> ==> <java.util.LinkedHashMap: void <init>(int,float,boolean)>
SPECIAL edge: specialinvoke $r8.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null") in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke $r3.<java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>(r0) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r15 = virtualinvoke r1.<com.koushikdutta.async.util.LruCache: java.lang.Object create(java.lang.Object)>(r0) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object create(java.lang.Object)>
SPECIAL edge: $l5 = specialinvoke r1.<com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>(r0, r15) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r15, r17) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r15, r17) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.util.LruCache: void trimToSize(long)>($l7) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: void trimToSize(long)>
VIRTUAL edge: r17 = virtualinvoke $r5.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r15) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r17) in <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null || value == null") in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
SPECIAL edge: $l3 = specialinvoke r3.<com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>(r0, r2) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>
SPECIAL edge: $l7 = specialinvoke r3.<com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>(r0, r7) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r7, r2) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r7, r2) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r3.<com.koushikdutta.async.util.LruCache: void trimToSize(long)>($l5) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: void trimToSize(long)>
VIRTUAL edge: r7 = virtualinvoke $r6.<java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2) in <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.NullPointerException: void <init>(java.lang.String)>("key == null") in <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)> ==> <java.lang.NullPointerException: void <init>(java.lang.String)>
VIRTUAL edge: r5 = virtualinvoke $r4.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r0) in <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)> ==> <java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: $l1 = specialinvoke r1.<com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>(r0, r5) in <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r5, null) in <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(0, r0, r5, null) in <com.koushikdutta.async.util.LruCache: java.lang.Object remove(java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.util.LruCache: void trimToSize(long)>(-1L) in <com.koushikdutta.async.util.LruCache: void evictAll()> ==> <com.koushikdutta.async.util.LruCache: void trimToSize(long)>
SPECIAL edge: specialinvoke $r0.<java.util.LinkedHashMap: void <init>(java.util.Map)>($r2) in <com.koushikdutta.async.util.LruCache: java.util.Map snapshot()> ==> <java.util.LinkedHashMap: void <init>(java.util.Map)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)>(r1, $r3) in <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,org.w3c.dom.Document)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.DocumentBody: void <init>(org.w3c.dom.Document)>(null) in <com.koushikdutta.async.http.body.DocumentBody: void <init>()> ==> <com.koushikdutta.async.http.body.DocumentBody: void <init>(org.w3c.dom.Document)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.DocumentBody: void <init>(org.w3c.dom.Document)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.DocumentBody: void prepare()>() in <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody: void prepare()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
STATIC edge: r4 = staticinvoke <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>() in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <javax.xml.transform.TransformerFactory: javax.xml.transform.TransformerFactory newInstance()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.DocumentParser: void <init>()>() in <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.DocumentParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.DocumentBody$1: void <init>(com.koushikdutta.async.http.body.DocumentBody,com.koushikdutta.async.callback.CompletedCallback)>(r4, r5) in <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void <init>(com.koushikdutta.async.http.body.DocumentBody,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.DocumentBody: void prepare()>() in <com.koushikdutta.async.http.body.DocumentBody: int length()> ==> <com.koushikdutta.async.http.body.DocumentBody: void prepare()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.io.ByteArrayOutputStream: int size()>() in <com.koushikdutta.async.http.body.DocumentBody: int length()> ==> <java.io.ByteArrayOutputStream: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.DocumentBody: org.w3c.dom.Document get()>() in <com.koushikdutta.async.http.body.DocumentBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.DocumentBody: org.w3c.dom.Document get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.DocumentParser: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>() in <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.parser.DocumentParser$1: void <init>(com.koushikdutta.async.parser.DocumentParser)>(r4) in <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.DocumentParser$1: void <init>(com.koushikdutta.async.parser.DocumentParser)>
INTERFACE edge: $r5 = interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.parser.DocumentParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.body.DocumentBody: void <init>(org.w3c.dom.Document)>(r1) in <com.koushikdutta.async.parser.DocumentParser: void write(com.koushikdutta.async.DataSink,org.w3c.dom.Document,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody: void <init>(org.w3c.dom.Document)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>(null, r2, r3) in <com.koushikdutta.async.parser.DocumentParser: void write(com.koushikdutta.async.DataSink,org.w3c.dom.Document,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.DocumentParser: void write(com.koushikdutta.async.DataSink,org.w3c.dom.Document,com.koushikdutta.async.callback.CompletedCallback)>(r1, $r4, r3) in <com.koushikdutta.async.parser.DocumentParser: void write(com.koushikdutta.async.DataSink,java.lang.Object,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.DocumentParser: void write(com.koushikdutta.async.DataSink,org.w3c.dom.Document,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.io.InputStream: void <init>()>() in <com.koushikdutta.async.stream.ByteBufferListInputStream: void <init>(com.koushikdutta.async.ByteBufferList)> ==> <java.io.InputStream: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $b1 = virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read()> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)>(r1, 0, $i0) in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[])> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)>(r3, i4, i3) in <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.FileBody: void <init>(java.io.File)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("not implemented") in <com.koushikdutta.async.http.body.FileBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("not implemented") in <com.koushikdutta.async.http.body.FileBody: boolean readFullyOnRequest()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke $r1.<java.io.File: long length()>() in <com.koushikdutta.async.http.body.FileBody: int length()> ==> <java.io.File: long length()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.FileBody: java.io.File get()>() in <com.koushikdutta.async.http.body.FileBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.FileBody: java.io.File get()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)>(r1, $r3) in <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,org.json.JSONArray)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.JSONArrayBody: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.body.JSONArrayBody: void <init>()>() in <com.koushikdutta.async.http.body.JSONArrayBody: void <init>(org.json.JSONArray)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.parser.JSONArrayParser: void <init>()>() in <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONArrayParser: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.parser.JSONArrayParser: com.koushikdutta.async.future.Future parse(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.body.JSONArrayBody$1: void <init>(com.koushikdutta.async.http.body.JSONArrayBody,com.koushikdutta.async.callback.CompletedCallback)>(r4, r5) in <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void <init>(com.koushikdutta.async.http.body.JSONArrayBody,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r3) in <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<org.json.JSONArray: java.lang.String toString()>() in <com.koushikdutta.async.http.body.JSONArrayBody: int length()> ==> <org.json.JSONArray: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.JSONArrayBody: int length()> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.JSONArrayBody: org.json.JSONArray get()>() in <com.koushikdutta.async.http.body.JSONArrayBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.JSONArrayBody: org.json.JSONArray get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.StreamBody: void <init>(java.io.InputStream,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("not implemented") in <com.koushikdutta.async.http.body.StreamBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.AssertionError: void <init>(java.lang.Object)>("not implemented") in <com.koushikdutta.async.http.body.StreamBody: boolean readFullyOnRequest()> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.body.StreamBody: java.io.InputStream get()>() in <com.koushikdutta.async.http.body.StreamBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.body.StreamBody: java.io.InputStream get()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r43, $r44, $r45) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r43, $r44, $r45) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: int getResponseCode()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.StreamBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.DocumentBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.FileBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.StringBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: boolean readFullyOnRequest()>
INTERFACE edge: $z0 = interfaceinvoke $r7.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: boolean readFullyOnRequest()>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r10) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
STATIC edge: $z2 = staticinvoke <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\?", 2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.Multimap getQuery()> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.Multimap: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.Multimap getQuery()> ==> <com.koushikdutta.async.http.Multimap: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1,com.koushikdutta.async.AsyncSocket)>(r1, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
CLINIT edge: $r2 = new com.koushikdutta.async.LineEmitter in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void <clinit>()>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onListening(com.koushikdutta.async.AsyncServerSocket)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.DataCallback getDataCallback()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isChunked()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isChunked()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isChunked()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isChunked()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isChunked()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isChunked()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isChunked()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()> ==> <com.koushikdutta.async.http.WebSocketImpl: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()> ==> <com.koushikdutta.async.FilteredDataEmitter: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void pause()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void pause()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
CLINIT edge: $z1 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
STATIC edge: $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r13) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.Long: java.lang.Long valueOf(java.lang.String)>
STATIC edge: $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(java.lang.String)>(r13) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.Long: void <clinit>()>
CLINIT edge: $z6 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r13) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <android.text.TextUtils: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r3) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>("text/html", "") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.http.filter.ChunkedOutputFilter: void setMaxBuffer(int)>(2147483647) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.BufferedDataSink: void setMaxBuffer(int)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r9.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.lang.String getMethod()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.lang.String getMethod()>
VIRTUAL edge: $z2 = virtualinvoke $r5.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HEAD") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
STATIC edge: staticinvoke <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$100(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>($r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$100(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setContentType(java.lang.String)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Type", r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setContentType(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
SPECIAL edge: specialinvoke $r10.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: r13 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke r3.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Type", r6) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)>
SPECIAL edge: specialinvoke $r12.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>(r3, r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(org.json.JSONObject)> ==> <org.json.JSONObject: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>("application/json; charset=utf-8", $r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(org.json.JSONObject)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void send(java.lang.String,java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Range") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r27 = virtualinvoke r4.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>($r16) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(416) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(206) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: $r29 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(416) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: r28 = virtualinvoke $r18.<java.lang.String: java.lang.String[] split(java.lang.String)>("-") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r23.<com.koushikdutta.async.http.server.MalformedRangeException: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.MalformedRangeException: void <init>()>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r30.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Range", $r35) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.io.FilterInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.io.BufferedInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.io.ByteArrayInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <android.content.res.AssetManager$AssetInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.io.InputStream: long skip(long)>
VIRTUAL edge: $l1 = virtualinvoke r5.<java.io.InputStream: long skip(long)>(l10) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.io.FileInputStream: long skip(long)>
SPECIAL edge: specialinvoke $r15.<com.koushikdutta.async.http.server.StreamSkipException: void <init>(java.lang.String)>("skip failed to skip requested amount") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.StreamSkipException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r7) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Accept-Ranges", "bytes") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.lang.String getMethod()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.lang.String getMethod()>
VIRTUAL edge: $z0 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>("HEAD") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <java.lang.String: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl,java.io.InputStream)>(r0, r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl,java.io.InputStream)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r4.<java.io.File: java.lang.String getAbsolutePath()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <java.io.File: java.lang.String getAbsolutePath()>
VIRTUAL edge: $l0 = virtualinvoke r4.<java.io.File: long length()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <java.io.File: long length()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Type", $r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.io.FileInputStream: void <init>(java.io.File)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r5.<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>($r3, 64000) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)>($r5, $l0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendStream(java.io.InputStream,long)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void sendFile(java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(302) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void redirect(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void redirect(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Location", r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void redirect(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.BufferedDataSink: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z1 = interfaceinvoke $r3.<com.koushikdutta.async.DataSink: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean isOpen()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void close()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.DataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServer$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer)>
SPECIAL edge: specialinvoke $r3.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("js", "application/javascript") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("json", "application/json") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("png", "image/png") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r10.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("jpg", "image/jpeg") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("html", "text/html") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r14.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("css", "text/css") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("mp4", "video/mp4") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("mov", "video/quicktime") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r20.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>("wmv", "video/x-ms-wmv") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <init>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.AsyncServerSocket: void stop()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void stop()> ==> <com.koushikdutta.async.AsyncServer$5$1: void stop()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)>(null, i0, $r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(com.koushikdutta.async.AsyncServer,int)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(com.koushikdutta.async.AsyncServer,int)>($r1, i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(int)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.AsyncServerSocket listen(com.koushikdutta.async.AsyncServer,int)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServer$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,int,javax.net.ssl.SSLContext)>(r2, i0, r3) in <com.koushikdutta.async.http.server.AsyncHttpServer: void listenSecure(int,javax.net.ssl.SSLContext)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,int,javax.net.ssl.SSLContext)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)>(null, i0, $r1) in <com.koushikdutta.async.http.server.AsyncHttpServer: void listenSecure(int,javax.net.ssl.SSLContext)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServerSocket listen(java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("^") in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r12) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r15) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r20.<java.util.ArrayList: boolean add(java.lang.Object)>($r0) in <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)>(r1, null, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void websocket(java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServer$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)>(r0, r3, r4) in <com.koushikdutta.async.http.server.AsyncHttpServer: void websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void get(java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>(r1, $r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void get(java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>("GET", r1, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void get(java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>("POST", r1, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void post(java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
VIRTUAL edge: r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.AssetManager getAssets()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <android.content.res.Resources: android.content.res.AssetManager getAssets()>
VIRTUAL edge: r7 = virtualinvoke r2.<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>(r3) in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.FilterInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.BufferedInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.ByteArrayInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <android.content.res.AssetManager$AssetInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.ObjectInputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.InputStream: int available()>
VIRTUAL edge: $i0 = virtualinvoke r7.<java.io.InputStream: int available()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <java.io.FileInputStream: int available()>
SPECIAL edge: specialinvoke $r4.<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>($r5, r7) in <com.koushikdutta.async.http.server.AsyncHttpServer: android.util.Pair getAssetStream(android.content.Context,java.lang.String)> ==> <android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<java.lang.String: int lastIndexOf(java.lang.String)>(".") in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)> ==> <java.lang.String: int lastIndexOf(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String substring(int)>($i1) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)> ==> <java.lang.String: java.lang.String substring(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String tryGetContentType(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.server.AsyncHttpServer$4: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)>(r2, r1, r5) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(android.content.Context,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>("GET", r3, $r4) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(android.content.Context,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>("HEAD", r3, $r6) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(android.content.Context,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.server.AsyncHttpServer$5: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)>(r2, r1, r5) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(android.content.Context,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$5: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)>(r1, r2, 0) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)>
VIRTUAL edge: $z2 = virtualinvoke r3.<java.io.File: boolean isDirectory()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r4.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServer$6: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.io.File,boolean)>(r0, r3, z1) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.io.File,boolean)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>("GET", r1, $r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void directory(java.lang.String,java.io.File,boolean)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void addAction(java.lang.String,java.lang.String,com.koushikdutta.async.http.server.HttpServerRequestCallback)>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r1) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String getResponseCodeDescription(int)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r1, r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: virtualinvoke $r34.<com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void setStatusLine(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $z1 = virtualinvoke $r37.<java.lang.String: boolean contains(java.lang.CharSequence)>("HTTP/") in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke $r38.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r32.<com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void addLine(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>($r22) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>($r22) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r26.<com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(java.lang.String)>($r30) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.StreamBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.DocumentBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.FileBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.StringBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>(r43, $r47) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r49.<com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>(null, $r51) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: virtualinvoke $r52.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onHeadersReceived()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()>
VIRTUAL edge: virtualinvoke $r42.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>($r41) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r42.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>($r41) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
CLINIT edge: $r1 = <java.lang.System: java.io.PrintStream out> in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.Pair: void <init>(java.lang.Object,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Pair: void <init>(java.lang.Object,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Pair: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Pair: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Context: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.String getString(int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: boolean isRestricted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(com.koushikdutta.async.DataEmitter,java.lang.String,int)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: boolean isPaused()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: boolean isPaused()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: boolean isPaused()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataEmitter: void resume()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void write(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void resume()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>(r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void setCallbacks(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(r2) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.FileDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.DataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: void parse(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.server.UnknownRequestBody: java.lang.Void get()>() in <com.koushikdutta.async.http.server.UnknownRequestBody: java.lang.Object get()> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: java.lang.Void get()>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: java.util.regex.Matcher getMatcher()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.util.regex.Matcher getMatcher()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r15 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: $r19 = interfaceinvoke r14.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r16.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r18) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Type", $r26) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r27.<com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$4,com.koushikdutta.async.http.server.AsyncHttpServerResponse,java.io.InputStream)>(r0, r14, r13) in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$4,com.koushikdutta.async.http.server.AsyncHttpServerResponse,java.io.InputStream)>
INTERFACE edge: $r1 = interfaceinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $r17 = interfaceinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $r5 = interfaceinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Connection") in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r15 = virtualinvoke r3.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke r12.<java.lang.String: java.lang.String trim()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: java.lang.String trim()>
VIRTUAL edge: $z1 = virtualinvoke $r13.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r14) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Upgrade") in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r16.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r19) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r20 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Sec-WebSocket-Protocol") in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.WebSocketImpl: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$2)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$2)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ListenCallback: void onListening(com.koushikdutta.async.AsyncServerSocket)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onListening(com.koushikdutta.async.AsyncServerSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onListening(com.koushikdutta.async.AsyncServerSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ListenCallback: void onListening(com.koushikdutta.async.AsyncServerSocket)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onListening(com.koushikdutta.async.AsyncServerSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onListening(com.koushikdutta.async.AsyncServerSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ListenCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ListenCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: java.util.regex.Matcher getMatcher()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.util.regex.Matcher getMatcher()>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r6, r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.io.File: boolean isDirectory()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: r18 = virtualinvoke $r5.<java.io.File: java.io.File[] listFiles()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.io.File: boolean isFile()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: boolean isFile()>
SPECIAL edge: specialinvoke $r11.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r15) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<java.util.ArrayList: boolean add(java.lang.Object)>(r15) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<java.util.ArrayList: boolean addAll(int,java.util.Collection)>(0, $r11) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.util.ArrayList: boolean addAll(int,java.util.Collection)>
VIRTUAL edge: $z4 = virtualinvoke r15.<java.io.File: boolean isDirectory()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.File: boolean isDirectory()>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.server.AsyncHttpServer$6$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6)>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r9.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
SPECIAL edge: specialinvoke $r8.<java.io.FileInputStream: void <init>(java.io.File)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.io.FileInputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, r9) in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: $r3 = interfaceinvoke r1.<com.koushikdutta.async.http.server.AsyncHttpServerRequest: java.util.regex.Matcher getMatcher()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: java.util.regex.Matcher getMatcher()>
SPECIAL edge: specialinvoke $r28.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: $r16 = interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void responseCode(int)>(200) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
INTERFACE edge: $r20 = interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void writeHead()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHead()>
INTERFACE edge: interfaceinvoke r15.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r17.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Content-Length", $r19) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
SPECIAL edge: specialinvoke $r29.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r24 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r21.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>("Content-Type", $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Resources getSystem()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getQuantityString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String[] getStringArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int[] getIntArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: float getDimension(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getDimensionPixelOffset(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getDimensionPixelSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: float getFraction(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.Movie getMovie(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: boolean getBoolean(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getInteger(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.io.InputStream openRawResource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Resources$Theme newTheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Configuration getConfiguration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourcePackageName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceTypeName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceEntryName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.AssetManager getAssets()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void flushLayoutCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void finishPreloading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)>($r8) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataSink: void setDataSink(com.koushikdutta.async.DataSink)>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: com.koushikdutta.async.callback.WritableCallback getWriteableCallback()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$4: void onWriteable()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <com.koushikdutta.async.http.server.MalformedRangeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.server.StreamSkipException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.content.res.Resources$NotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$NotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.content.res.Resources$NotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$NotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.pm.PackageManager$NameNotFoundException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager$NameNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentResolver: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.String getType(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void cancelSync(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean getMasterSyncAutomatically()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.util.List getCurrentSyncs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void applyStyle(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getIndexCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.content.res.Resources getResources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getNonResourceString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean getBoolean(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getInt(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getFloat(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getColor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getInteger(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getDimension(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getDimensionPixelSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getLayoutDimension(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getFraction(int,int,int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getResourceId(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean hasValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.util.TypedValue peekValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getPositionDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ApplicationInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void endTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean inTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int getVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setVersion(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long getMaximumSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long getPageSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setPageSize(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isOpen()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.drawable.Drawable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setChangingConfigurations(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setDither(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void invalidateSelf()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void clearColorFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean isStateful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setState(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int[] getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void jumpToCurrentState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setLevel(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getLevel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean isVisible()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int resolveOpacity(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getIntrinsicWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getIntrinsicHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getMinimumWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getMinimumHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getDensity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setDensity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean isRecycled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getGenerationId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: byte[] getNinePatchChunk()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean isMutable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getRowBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getByteCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean hasAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setHasAlpha(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void eraseColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getPixel(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setPixel(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void prepareToDraw()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String,android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent cloneFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getIntent(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent parseUri(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.net.Uri getData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getDataString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getScheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveType(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.Set getCategories()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getSelector()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasFileDescriptors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: byte getByteExtra(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: short getShortExtra(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: char getCharExtra(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int getIntExtra(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: long getLongExtra(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: float getFloatExtra(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: double getDoubleExtra(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getStringExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: short[] getShortArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: char[] getCharArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int[] getIntArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: long[] getLongArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Bundle getExtras()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int getFlags()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.ComponentName getComponent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.graphics.Rect getSourceBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setData(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent addCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void removeCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setSelector(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtras(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void removeExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent addFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setPackage(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setSourceBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int fillIn(android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean filterEquals(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int filterHashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toURI()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toUri(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: java.lang.String getTargetPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.BroadcastReceiver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultCode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: int getResultCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultData(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: java.lang.String getResultData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean getAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void abortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void clearAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean isOrderedBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setOrderedHint(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setDebugUnregister(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean getDebugUnregister()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(android.content.IntentFilter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(android.content.IntentFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countActions()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getAction(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean matchAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator actionsIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataTypes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getDataType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator typesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataScheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataSchemes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getDataScheme(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataScheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator schemesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataAuthorities()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator authoritiesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataPath(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataPaths()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator pathsIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int matchDataAuthority(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countCategories()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getCategory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator categoriesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getPackageName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getShortClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String flattenToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String flattenToShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int compareTo(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.ComponentName: android.content.ComponentName clone()>() in <android.content.ComponentName: java.lang.Object clone()> ==> <android.content.ComponentName: android.content.ComponentName clone()>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.ComponentName: int compareTo(android.content.ComponentName)>($r2) in <android.content.ComponentName: int compareTo(java.lang.Object)> ==> <android.content.ComponentName: int compareTo(android.content.ComponentName)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.ListenCallback: void onAccepted(com.koushikdutta.async.AsyncSocket)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.ListenCallback: void onAccepted(com.koushikdutta.async.AsyncSocket)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.http.server.AsyncHttpServerResponse: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.io.File,java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.io.File,java.io.File)> ==> <java.io.File: java.lang.String getName()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.String: int compareTo(java.lang.String)>($r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.io.File,java.io.File)> ==> <java.lang.String: int compareTo(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.io.File,java.io.File)>($r4, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: int compare(java.io.File,java.io.File)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.DisplayMetrics: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void setToDefaults()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Configuration: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Configuration: void <init>(android.content.res.Configuration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void <init>(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void setTo(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void setToDefaults()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int updateFrom(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int diff(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean needNewResources(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int compareTo(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean equals(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>($r2) in <android.content.res.Configuration: int compareTo(java.lang.Object)> ==> <android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Movie: void draw(android.graphics.Canvas,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.ColorStateList: void <init>(int[][],int[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: void <init>(int[][],int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: boolean isStateful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int getColorForState(int[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int getDefaultColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.TypedValue: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getFloat()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToFloat(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToFraction(int,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getFraction(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.CharSequence coerceToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.String coerceToString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: void setTo(android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionGroupInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ActivityInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: int getThemeResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ServiceInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ProviderInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.FeatureInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ResolveInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: int getIconResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.InstrumentationInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Canvas: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Canvas: void <init>(android.graphics.Bitmap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void <init>(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean isHardwareAccelerated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getDensity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setDensity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getMaximumBitmapWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getMaximumBitmapHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void scale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void rotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void concat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void getMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.Matrix getMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRegion(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.Rect getClipBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRGB(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawARGB(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPaint(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(int,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: android.graphics.Rect getBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean getBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: android.graphics.Path getBoundaryPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean quickContains(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean quickReject(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void translate(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean union(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.BitmapFactory$Options: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory$Options: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory$Options: void requestCancelDecode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.drawable.Drawable$ConstantState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable$ConstantState: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.sqlite.SQLiteClosable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void acquireReference()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void releaseReference()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.database.SQLException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.SQLException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.database.SQLException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.SQLException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: void execute()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: long executeInsert()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>(android.content.ContentValues)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>(android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void putAll(android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void putNull(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void remove(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: boolean containsKey(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Object get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.String getAsString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.util.Set valueSet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.util.Set keySet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(int)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String,int)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: boolean release()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.ContentObserver: void <init>(android.os.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void <init>(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: boolean deliverSelfNotifications()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void onChange(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void dispatchChange(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.accounts.Account: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.accounts.Account: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.SyncAdapterType: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean supportsUploading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean isUserVisible()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean allowParallelSyncs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean isAlwaysSyncable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: java.lang.String getSettingsActivity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentFilter$MalformedMimeTypeException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$MalformedMimeTypeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: int getPort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.PatternMatcher: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.PatternMatcher: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: java.lang.String getPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: int getType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: boolean match(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultCode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: int getResultCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void abortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void finish()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>($r4, $r3) in <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent$FilterComparison: void <init>(android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: void <init>(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: android.content.Intent getIntent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent$ShortcutIconResource: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteQuery: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteQuery: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.Signature: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.Signature: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: char[] toChars()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: char[] toChars(char[],int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: java.lang.String toCharsString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: byte[] toByteArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ConfigurationInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ComponentInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: int getIconResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.PatternMatcher: void <init>(android.os.Parcel)>($r1) in <android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <android.os.PatternMatcher: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.PatternMatcher: void <init>(android.os.Parcel)>($r1) in <android.content.pm.PathPermission: void <init>(android.os.Parcel)> ==> <android.os.PatternMatcher: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: java.lang.String getReadPermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: java.lang.String getWritePermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>($r4, $r3) in <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.DrawFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.DrawFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.TreeMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.TreeSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <org.apache.http.ProtocolVersion: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.text.DateFormatSymbols: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.zip.ZipEntry: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <org.apache.http.message.BasicHeader: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.text.SimpleDateFormat: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Picture: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void endRecording()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void draw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void writeToStream(java.io.OutputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.PorterDuff: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PorterDuff: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.BitmapFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: int getUniqueId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindNull(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindLong(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void clearBindings()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.CharArrayBuffer: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.CharArrayBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.CharArrayBuffer: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.CharArrayBuffer: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.DataSetObserver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void onChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void onInvalidated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProvider: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String getReadPermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String getWritePermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onLowMemory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onTrimMemory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void shutdown()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>($r4, $r3) in <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, r2, null) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emit(org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, null) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(org.json.JSONObject)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke $r0.<org.json.JSONObject: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("args", r4) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: java.lang.String toString()>
SPECIAL edge: specialinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(5, $r7, r8) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(3, r1, r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: $r2 = virtualinvoke r1.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(4, $r2, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emit(org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, null) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke $r0.<org.json.JSONObject: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>("name", r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: org.json.JSONObject put(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r0.<org.json.JSONObject: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <org.json.JSONObject: java.lang.String toString()>
SPECIAL edge: specialinvoke r4.<com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(5, $r5, r6) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitEvent(java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest)>(r3, r4) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>($r0) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.socketio.SocketIOClient$1: void <init>(com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.socketio.SocketIOConnection)>(r4, r7, $r0, $r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1: void <init>(com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.socketio.SocketIOConnection)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.socketio.SocketIOClient: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>($r2, "", $r6) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>
VIRTUAL edge: virtualinvoke $r10.<java.util.ArrayList: boolean add(java.lang.Object)>($r9) in <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.future.Future connect(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: boolean isConnected()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOClient: void disconnect()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIOClient: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>($r4, r2, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient: void of(java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)>($r1) in <com.koushikdutta.async.http.socketio.SocketIOClient: void of(java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>(null) in <com.koushikdutta.async.http.socketio.SocketIOClient: void reconnect()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.util.HashList: void <init>()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void <init>()> ==> <com.koushikdutta.async.util.HashList: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.EventEmitter: void on(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)>(r1, r2) in <com.koushikdutta.async.http.socketio.EventEmitter: void addListener(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <com.koushikdutta.async.http.socketio.EventEmitter: void on(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.EventEmitter$1: void <init>(com.koushikdutta.async.http.socketio.EventEmitter,com.koushikdutta.async.http.socketio.EventCallback)>(r0, r3) in <com.koushikdutta.async.http.socketio.EventEmitter: void once(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <com.koushikdutta.async.http.socketio.EventEmitter$1: void <init>(com.koushikdutta.async.http.socketio.EventEmitter,com.koushikdutta.async.http.socketio.EventCallback)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.EventEmitter: void on(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.EventEmitter: void once(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <com.koushikdutta.async.http.socketio.EventEmitter: void on(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)>(r1, r2) in <com.koushikdutta.async.http.socketio.EventEmitter: void on(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.EventEmitter: void removeListener(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>
INTERFACE edge: interfaceinvoke r3.<java.util.List: boolean remove(java.lang.Object)>(r4) in <com.koushikdutta.async.http.socketio.EventEmitter: void removeListener(java.lang.String,com.koushikdutta.async.http.socketio.EventCallback)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.socketio.SocketIORequest)> ==> <java.util.Hashtable: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: boolean isConnected()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: boolean isConnected()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+") in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r16.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r8) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r8) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean contains(java.lang.Object)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r6) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r6) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r14 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r12.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r13) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r12.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r13) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r19.<java.util.ArrayList: int size()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void disconnect()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void disconnect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void disconnect()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String)>(r1, "") in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String)>(r1, r2, null) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)>(r1, r2, r3, null) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?") in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r19) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>("/socket.io/1/") in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<android.net.Uri$Builder: android.net.Uri build()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <android.net.Uri$Builder: android.net.Uri build()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>($r14) in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<com.koushikdutta.async.http.socketio.SocketIORequest$Config: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIORequest: void <init>(java.lang.String,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.SocketIORequest$Config)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest$Config: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.socketio.SocketIORequest: java.lang.String getEndpoint()>() in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: java.lang.String getEndpoint()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(r0, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(r0, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(r0, r3) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.ArrayList: boolean remove(java.lang.Object)>(r3) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.socketio.SocketIORequest: java.lang.String getEndpoint()>() in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIORequest: java.lang.String getEndpoint()>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOClient$1)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOClient$1)>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.http.socketio.SocketIOClient: void of(java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>($r11, $r12) in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: void of(java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.HashList: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.util.HashList: void <init>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.util.Hashtable: java.util.Set keySet()>() in <com.koushikdutta.async.util.HashList: java.util.Set keySet()> ==> <java.util.Hashtable: java.util.Set keySet()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: java.lang.Object tag(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: void tag(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.util.HashList$TaggedList: void <init>(com.koushikdutta.async.util.HashList)>(r0) in <com.koushikdutta.async.util.HashList: void tag(java.lang.String,java.lang.Object)> ==> <com.koushikdutta.async.util.HashList$TaggedList: void <init>(com.koushikdutta.async.util.HashList)>
VIRTUAL edge: virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r5) in <com.koushikdutta.async.util.HashList: void tag(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: java.util.ArrayList remove(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.Hashtable: int size()>() in <com.koushikdutta.async.util.HashList: int size()> ==> <java.util.Hashtable: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>(r1) in <com.koushikdutta.async.util.HashList: boolean contains(java.lang.String)> ==> <com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r2.<java.util.ArrayList: int size()>() in <com.koushikdutta.async.util.HashList: boolean contains(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: r7 = virtualinvoke r0.<com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>(r1) in <com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)> ==> <com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.util.HashList$TaggedList: void <init>(com.koushikdutta.async.util.HashList)>(r0) in <com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)> ==> <com.koushikdutta.async.util.HashList$TaggedList: void <init>(com.koushikdutta.async.util.HashList)>
VIRTUAL edge: virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r8) in <com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) in <com.koushikdutta.async.util.HashList: void add(java.lang.String,java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: java.lang.Object pop(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r4.<com.koushikdutta.async.util.HashList$TaggedList: int size()>() in <com.koushikdutta.async.util.HashList: java.lang.Object pop(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i1 = virtualinvoke r4.<com.koushikdutta.async.util.HashList$TaggedList: int size()>() in <com.koushikdutta.async.util.HashList: java.lang.Object pop(java.lang.String)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.koushikdutta.async.util.HashList$TaggedList: java.lang.Object remove(int)>($i2) in <com.koushikdutta.async.util.HashList: java.lang.Object pop(java.lang.String)> ==> <java.util.ArrayList: java.lang.Object remove(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.util.HashList: boolean removeItem(java.lang.String,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.util.HashList$TaggedList: boolean remove(java.lang.Object)>(r5) in <com.koushikdutta.async.util.HashList: boolean removeItem(java.lang.String,java.lang.Object)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r4.<com.koushikdutta.async.util.HashList$TaggedList: int size()>() in <com.koushikdutta.async.util.HashList: boolean removeItem(java.lang.String,java.lang.Object)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.http.socketio.EventCallback: void onEvent(org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, r2) in <com.koushikdutta.async.http.socketio.EventEmitter$1: void onEvent(org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.EventEmitter$1: void onEvent(org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIORequest$Config: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnectDelay must be >= 0") in <com.koushikdutta.async.http.socketio.SocketIORequest$Config: void setReconnectDelay(long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("reconnectDelayMax must be >= 0") in <com.koushikdutta.async.http.socketio.SocketIORequest$Config: void setReconnectDelayMax(long)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)>(r1, $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>($r4, $r3, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$9: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: r4 = virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.http.socketio.DisconnectCallback getDisconnectCallback()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: com.koushikdutta.async.http.socketio.DisconnectCallback getDisconnectCallback()>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>($r2, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r5.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>($r2, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOClient: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient: boolean isConnected()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(null, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(null, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: $z0 = interfaceinvoke $r6.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: boolean isConnected()>
INTERFACE edge: $z0 = interfaceinvoke $r6.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: boolean isConnected()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>("2:::") in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>("2:::") in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
INTERFACE edge: $r11 = interfaceinvoke $r10.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: $r11 = interfaceinvoke $r10.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>(r0, $l2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)>
SPECIAL edge: specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("+") in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke r0.<org.json.JSONArray: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <org.json.JSONArray: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>("not connected to server") in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.http.socketio.SocketIOConnection$11$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$11,java.lang.Exception)>(r1, $r7) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$11$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$11,java.lang.Exception)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r6) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>($r6) in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
VIRTUAL edge: r50 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String,int)>(":", 4) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void disconnect()>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void disconnect()>
INTERFACE edge: interfaceinvoke $r36.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>("2::") in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r36.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void send(java.lang.String)>("2::") in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)>
SPECIAL edge: specialinvoke $r21.<org.json.JSONObject: void <init>(java.lang.String)>(r51) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<org.json.JSONObject: void <init>(java.lang.String)>(r53) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: void <init>(java.lang.String)>
VIRTUAL edge: r55 = virtualinvoke $r13.<org.json.JSONObject: java.lang.String getString(java.lang.String)>("name") in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: java.lang.String getString(java.lang.String)>
VIRTUAL edge: r14 = virtualinvoke $r13.<org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>("args") in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONObject: org.json.JSONArray optJSONArray(java.lang.String)>
VIRTUAL edge: r56 = virtualinvoke $r6.<java.lang.String: java.lang.String[] split(java.lang.String,int)>("\\+", 2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String,int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>($r8) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<org.json.JSONArray: void <init>(java.lang.String)>($r12) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <org.json.JSONArray: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r57.<com.koushikdutta.async.http.socketio.Acknowledge: void acknowledge(org.json.JSONArray)>(r58) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void acknowledge(org.json.JSONArray)>
SPECIAL edge: specialinvoke $r42.<com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>("unknown code") in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r45.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r47.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void disconnect()>
INTERFACE edge: interfaceinvoke $r47.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void disconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void disconnect()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void connect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(r4, r5) in <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.http.socketio.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>(r4, r5) in <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.http.socketio.SocketIOClient$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>(r4, r5) in <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.socketio.SocketIOClient)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)>(null) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void disconnect()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("5") in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: specialinvoke r2.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)>(r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r2.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>($r3) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: void setBody(com.koushikdutta.async.http.body.AsyncHttpRequestBody)>($r5) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void setBody(com.koushikdutta.async.http.body.AsyncHttpRequestBody)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.body.StringBody: void <init>(java.lang.String)>(r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.body.StringBody: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>($r1, $r6) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <java.lang.System: void <clinit>()>
STATIC edge: r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <java.lang.String: java.lang.String valueOf(long)>
STATIC edge: $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: r0 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <java.lang.String: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.WebSocket)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void <init>(com.koushikdutta.async.http.WebSocket,java.lang.String)>(r3, $r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.WebSocket)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void <init>(com.koushikdutta.async.http.WebSocket,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>($r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.WebSocket)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.WebSocket)>(r1, $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.WebSocket)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)>(r1, $r5, $r4) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)>(r1, $r5, $r4) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void <init>(com.koushikdutta.async.http.WebSocket,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void <init>(com.koushikdutta.async.http.WebSocket,java.lang.String)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.http.WebSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void <init>(com.koushikdutta.async.http.WebSocket,java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.http.WebSocket: boolean isOpen()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: boolean isConnected()> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.http.WebSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(r1) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.http.WebSocket: void close()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void disconnect()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.koushikdutta.async.http.WebSocket: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: com.koushikdutta.async.AsyncServer getServer()> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncServer getServer()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.http.WebSocket: void send(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void send(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void send(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.WebSocket: void setStringCallback(com.koushikdutta.async.http.WebSocket$StringCallback)>(null) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setStringCallback(com.koushikdutta.async.http.WebSocket$StringCallback)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.socketio.transport.WebSocketTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.WebSocketTransport,com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>(r0, r1) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.WebSocketTransport,com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.http.WebSocket: void setStringCallback(com.koushikdutta.async.http.WebSocket$StringCallback)>($r3) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setStringCallback(com.koushikdutta.async.http.WebSocket$StringCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback: void onStringAvailable(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport$1: void onStringAvailable(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer)>(r1) in <com.koushikdutta.async.stream.FileDataSink: void <init>(com.koushikdutta.async.AsyncServer,java.io.File)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer)>
SPECIAL edge: r3 = specialinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>() in <com.koushikdutta.async.stream.FileDataSink: java.io.OutputStream getOutputStream()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.FileDataSink: void setOutputStream(java.io.OutputStream)>($r5) in <com.koushikdutta.async.stream.FileDataSink: java.io.OutputStream getOutputStream()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setOutputStream(java.io.OutputStream)>
SPECIAL edge: specialinvoke $r4.<java.io.FileOutputStream: void <init>(java.io.File)>($r2) in <com.koushikdutta.async.stream.FileDataSink: java.io.OutputStream getOutputStream()> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer,java.io.OutputStream)>(r1, null) in <com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer,java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.OutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.PrintStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.util.zip.ZipOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.ByteArrayOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.FileOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.FilterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.util.zip.DeflaterOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.BufferedOutputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void close()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <java.io.ObjectOutputStream: void close()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>(null) in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>($r5) in <com.koushikdutta.async.stream.OutputStreamDataSink: void end()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void end()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void close()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void end()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer,java.io.OutputStream)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void setOutputStream(java.io.OutputStream)>(r2) in <com.koushikdutta.async.stream.OutputStreamDataSink: void <init>(com.koushikdutta.async.AsyncServer,java.io.OutputStream)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setOutputStream(java.io.OutputStream)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.FileDataSink: java.io.OutputStream getOutputStream()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>($r8) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.util.zip.ZipOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.BufferedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.DataOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i2, $i3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)> ==> <java.io.ObjectOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int size()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int size()>
VIRTUAL edge: r7 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer remove()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void recycle()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void recycle()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.FileDataSink: java.io.OutputStream getOutputStream()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>() in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: java.io.OutputStream getOutputStream()>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>($r9) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.OutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.PrintStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.ZipOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.FileOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.FilterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.BufferedOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.DataOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>($r3, $i3, $i4) in <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)> ==> <java.io.ObjectOutputStream: void write(byte[],int,int)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>($r3) in <com.koushikdutta.async.stream.OutputStreamDataSink: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r2.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <java.io.FileInputStream: void close()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.InputStream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.InputStream)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.InputStream)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.stream.InputStreamDataEmitter$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter)>(r0) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void <init>(com.koushikdutta.async.AsyncServer,java.io.InputStream)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void resume()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r1.<java.io.InputStream: void close()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)>(r0) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)>
VIRTUAL edge: virtualinvoke $r15.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r16) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $z2 = virtualinvoke $r18.<com.koushikdutta.async.ByteBufferList: boolean isEmpty()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: boolean isEmpty()>
VIRTUAL edge: $i6 = virtualinvoke $r24.<java.io.InputStream: int read(byte[])>($r25) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <java.io.DataInputStream: int read(byte[])>
VIRTUAL edge: $i6 = virtualinvoke $r24.<java.io.InputStream: int read(byte[])>($r25) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <java.io.InputStream: int read(byte[])>
VIRTUAL edge: $i6 = virtualinvoke $r24.<java.io.InputStream: int read(byte[])>($r25) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <android.content.res.AssetManager$AssetInputStream: int read(byte[])>
VIRTUAL edge: $i6 = virtualinvoke $r24.<java.io.InputStream: int read(byte[])>($r25) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>
VIRTUAL edge: $i6 = virtualinvoke $r24.<java.io.InputStream: int read(byte[])>($r25) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[])>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r22) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)>(r0) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>($r9) in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.AsyncServer: void run(java.lang.Runnable)>
VIRTUAL edge: $i2 = virtualinvoke $r11.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $z1 = virtualinvoke $r12.<com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: boolean isPaused()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.FileUtility: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.io.File: boolean exists()>() in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.io.File: java.io.File[] listFiles()>() in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <java.io.File: java.io.File[] listFiles()>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.io.File: boolean delete()>() in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $z1 = virtualinvoke $r2.<java.io.File: boolean isDirectory()>() in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <java.io.File: boolean isDirectory()>
VIRTUAL edge: virtualinvoke $r3.<java.io.File: boolean delete()>() in <com.koushikdutta.async.util.FileUtility: boolean deleteDirectory(java.io.File)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.ArrayDeque: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.ArrayDeque: boolean delete(int)>(i0) in <com.koushikdutta.async.ArrayDeque: boolean access$500(com.koushikdutta.async.ArrayDeque,int)> ==> <com.koushikdutta.async.ArrayDeque: boolean delete(int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.AsyncNetworkSocket: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r0.<java.util.WeakHashMap: void <init>()>() in <com.koushikdutta.async.ThreadQueue: void <clinit>()> ==> <java.util.WeakHashMap: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>(r2) in <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.ThreadQueue: void <init>()>() in <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)> ==> <com.koushikdutta.async.ThreadQueue: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5) in <com.koushikdutta.async.ThreadQueue: com.koushikdutta.async.ThreadQueue getOrCreateThreadQueue(java.lang.Thread)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.AsyncServer: void <init>()>() in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.WeakHashMap: void <init>()>() in <com.koushikdutta.async.AsyncServer: void <clinit>()> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$Scheduler: void <init>()>() in <com.koushikdutta.async.AsyncServer$Scheduler: void <clinit>()> ==> <com.koushikdutta.async.AsyncServer$Scheduler: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$1: void <init>(com.koushikdutta.async.SelectorWrapper)>(r1) in <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer$1: void <init>(com.koushikdutta.async.SelectorWrapper)>
EXECUTOR edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r0) in <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke $r2.<java.util.concurrent.ExecutorService: void execute(java.lang.Runnable)>($r0) in <com.koushikdutta.async.AsyncServer: void wakeup(com.koushikdutta.async.SelectorWrapper)> ==> <java.util.concurrent.ThreadPoolExecutor: void execute(java.lang.Runnable)>
VIRTUAL edge: $i1 = virtualinvoke r3.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.util.PriorityQueue: int size()>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.util.PriorityQueue: java.lang.Object remove()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.util.PriorityQueue: java.lang.Object remove()>
VIRTUAL edge: virtualinvoke r3.<java.util.PriorityQueue: boolean add(java.lang.Object)>(r6) in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.util.PriorityQueue: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke $r4.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncServer: long lockAndRunQueue(com.koushikdutta.async.AsyncServer,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>
INTERFACE edge: r9 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r9 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r9.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void shutdownKeys(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.ByteBufferList$Reclaimer: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <com.koushikdutta.async.ByteBufferList$Reclaimer: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(8, $r2) in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
SPECIAL edge: specialinvoke $r3.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ByteBufferList: void <clinit>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke $r0.<java.util.PriorityQueue: java.util.Iterator iterator()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <java.util.PriorityQueue: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ByteBufferList: boolean reclaimedContains(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.os.Looper: java.lang.Thread getThread()>() in <com.koushikdutta.async.ByteBufferList: java.util.PriorityQueue getReclaimed()> ==> <android.os.Looper: java.lang.Thread getThread()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.Util: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)>(r1) in <com.koushikdutta.async.AsyncServer: void access$600(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.ServerSocketChannelWrapper: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>(r1, r2) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture access$500(com.koushikdutta.async.AsyncServer,java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.util.Collection values()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.PriorityQueue: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.concurrent.LinkedBlockingQueue: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r9.<java.util.concurrent.Semaphore: void release()>() in <com.koushikdutta.async.ThreadQueue: void release(com.koushikdutta.async.AsyncSemaphore)> ==> <java.util.concurrent.Semaphore: void release()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.future.SimpleCancellable$1: void <init>()>() in <com.koushikdutta.async.future.SimpleCancellable: void <clinit>()> ==> <com.koushikdutta.async.future.SimpleCancellable$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r12.<java.lang.Exception: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r13.<com.koushikdutta.async.AsyncSSLSocketWrapper$1: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$1: void <init>()>
VIRTUAL edge: virtualinvoke $r9.<javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>(null, $r14, null) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.net.ssl.SSLContext: void init(javax.net.ssl.KeyManager[],javax.net.ssl.TrustManager[],java.security.SecureRandom)>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.net.ssl.SSLException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.xml.transform.TransformerException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r5.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.net.ssl.SSLException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <javax.xml.transform.TransformerException: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r3.<java.lang.Exception: void printStackTrace()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <clinit>()> ==> <org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.BufferedDataSink: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$100(com.koushikdutta.async.AsyncSSLSocketWrapper,java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void access$000(com.koushikdutta.async.AsyncSSLSocketWrapper,javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.BufferedDataSink: void writePending()>() in <com.koushikdutta.async.BufferedDataSink: void access$000(com.koushikdutta.async.BufferedDataSink)> ==> <com.koushikdutta.async.BufferedDataSink: void writePending()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.DataEmitterReader: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.FilteredDataSink: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.LineEmitter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r0.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.PushParser: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r2) in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r15 = virtualinvoke $r5.<java.lang.Class: java.lang.reflect.Method[] getMethods()>() in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.lang.Class: java.lang.reflect.Method[] getMethods()>
VIRTUAL edge: $r11 = virtualinvoke r9.<java.lang.reflect.Method: java.lang.String getName()>() in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.lang.reflect.Method: java.lang.String getName()>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>($r11) in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, r9) in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: r16 = virtualinvoke $r6.<java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>() in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>(java.lang.Object)>("-keep class * extends com.koushikdutta.async.TapCallback {\n    *;\n}\n") in <com.koushikdutta.async.PushParser: java.lang.reflect.Method getTap(com.koushikdutta.async.TapCallback)> ==> <java.lang.AssertionError: void <init>(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.future.Continuation$2: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.Continuation: void next()>() in <com.koushikdutta.async.future.Continuation: void access$100(com.koushikdutta.async.future.Continuation)> ==> <com.koushikdutta.async.future.Continuation: void next()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\.") in <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke r5.<java.lang.String: int length()>() in <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $r7 = virtualinvoke r5.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.dns.Dns: void addName(java.nio.ByteBuffer,java.lang.String)> ==> <java.lang.String: byte[] getBytes()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>($r1) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: com.koushikdutta.async.ByteBufferList order(java.nio.ByteOrder)>
VIRTUAL edge: $b0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: $b7 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r25) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
VIRTUAL edge: $i9 = virtualinvoke r24.<java.lang.String: int length()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.String: int length()>
VIRTUAL edge: $i4 = virtualinvoke r24.<java.lang.String: int length()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.String: int length()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r13) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r18) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r24 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r24) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<java.lang.String: void <init>(byte[])>(r25) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r24 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.dns.DnsResponse: java.lang.String parseName(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders$1: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.RawHeaders$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("END", 0) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("MARQUEE", 1) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("MIDDLE", 2) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("START", 3) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("FILL", 0) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("FILL_AND_STROKE", 1) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("STROKE", 2) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("BUTT", 0) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("ROUND", 1) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("SQUARE", 2) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("BEVEL", 0) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("MITER", 1) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("ROUND", 2) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.ColorFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Xfermode: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PathEffect: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.MaskFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rasterizer: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("CENTER", 0) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("LEFT", 1) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("RIGHT", 2) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("EVEN_ODD", 0) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("INVERSE_EVEN_ODD", 1) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("INVERSE_WINDING", 2) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("WINDING", 3) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Path$Direction: void <init>(java.lang.String,int)>("CCW", 0) in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Path$Direction: void <init>(java.lang.String,int)>("CW", 1) in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("CLAMP", 0) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("MIRROR", 1) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("REPEAT", 2) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("CENTER", 0) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("END", 1) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("FILL", 2) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("START", 3) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r1, i0, r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: void access$100(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.AsyncHttpClient: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)>
STATIC edge: $l3 = staticinvoke <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)>
STATIC edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.System: long currentTimeMillis()>
CLINIT edge: $l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.System: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.AsyncHttpRequest: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Java") in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getDefaultUserAgent()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.AsyncHttpRequest$HttpRequestWrapper: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r1, r2, r3, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient: void access$200(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
CLINIT edge: $z0 = <com.koushikdutta.async.http.AsyncHttpClient: boolean $assertionsDisabled> in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.HttpDate$1: void <init>()>() in <com.koushikdutta.async.http.libcore.HttpDate: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.HttpDate$1: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void invokeConnect(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>(r1, r2) in <com.koushikdutta.async.http.AsyncHttpClient: void access$900(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void invokeConnect(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void invoke(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>(r1, r2, r3, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient: void access$800(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void invoke(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>(r1, r2, r3, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient: void access$700(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("iso-8859-1") in <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.WebSocketImpl: java.lang.String SHA1(java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $l0 = virtualinvoke r4.<java.util.UUID: long getMostSignificantBits()>() in <com.koushikdutta.async.http.WebSocketImpl: byte[] toByteArray(java.util.UUID)> ==> <java.util.UUID: long getMostSignificantBits()>
VIRTUAL edge: $l1 = virtualinvoke r4.<java.util.UUID: long getLeastSignificantBits()>() in <com.koushikdutta.async.http.WebSocketImpl: byte[] toByteArray(java.util.UUID)> ==> <java.util.UUID: long getLeastSignificantBits()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>("CACHE", 0) in <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>("CONDITIONAL_CACHE", 1) in <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>("NETWORK", 2) in <com.koushikdutta.async.http.libcore.ResponseSource: void <clinit>()> ==> <com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Connection") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Keep-Alive") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Proxy-Authenticate") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Proxy-Authorization") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("TE") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z5 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Trailers") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z6 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z7 = virtualinvoke r0.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("Upgrade") in <com.koushikdutta.async.http.libcore.ResponseHeaders: boolean isEndToEnd(java.lang.String)> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r1, i0, r2, r3) in <com.koushikdutta.async.http.AsyncHttpClient: void access$600(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)> ==> <java.lang.String: int length()>
VIRTUAL edge: $c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i3) in <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)> ==> <java.lang.String: char charAt(int)>
VIRTUAL edge: $i2 = virtualinvoke r1.<java.lang.String: int indexOf(int)>($c1) in <com.koushikdutta.async.http.libcore.HeaderParser: int skipUntil(java.lang.String,int,java.lang.String)> ==> <java.lang.String: int indexOf(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int length()>() in <com.koushikdutta.async.http.libcore.HeaderParser: int skipWhitespace(java.lang.String,int)> ==> <java.lang.String: int length()>
VIRTUAL edge: c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i2) in <com.koushikdutta.async.http.libcore.HeaderParser: int skipWhitespace(java.lang.String,int)> ==> <java.lang.String: char charAt(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void invokeProgress(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)>(r1, r2, l0, l1) in <com.koushikdutta.async.http.AsyncHttpClient: void access$1000(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void invokeProgress(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.HybiParser$5: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.filter.ContentLengthFilter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$200(com.koushikdutta.async.http.AsyncSocketMiddleware,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)>
CLINIT edge: $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l5 = staticinvoke <java.lang.System: long currentTimeMillis()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <java.lang.System: long currentTimeMillis()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)>(b0) in <com.koushikdutta.async.http.HybiParser: void access$000(com.koushikdutta.async.http.HybiParser,byte)> ==> <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)>
CLINIT edge: $r3 = <com.koushikdutta.async.http.HybiParser: java.util.List OPCODES> in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i7) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void emitFrame()>() in <com.koushikdutta.async.http.HybiParser: void access$800(com.koushikdutta.async.http.HybiParser)> ==> <com.koushikdutta.async.http.HybiParser: void emitFrame()>
CLINIT edge: r15 = staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>($r2, $r1, 0) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: r15 = staticinvoke <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>($r2, $r1, 0) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: byte[] mask(byte[],byte[],int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void parseExtendedLength(byte[])>(r1) in <com.koushikdutta.async.http.HybiParser: void access$300(com.koushikdutta.async.http.HybiParser,byte[])> ==> <com.koushikdutta.async.http.HybiParser: void parseExtendedLength(byte[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void parseLength(byte)>(b0) in <com.koushikdutta.async.http.HybiParser: void access$100(com.koushikdutta.async.http.HybiParser,byte)> ==> <com.koushikdutta.async.http.HybiParser: void parseLength(byte)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK_LEN", 0) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK_LEN_CR", 1) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK_LEN_CRLF", 2) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK", 3) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK_CR", 4) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("CHUNK_CRLF", 5) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>("COMPLETE", 6) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <clinit>()> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i5 = virtualinvoke $r10.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<com.koushikdutta.async.http.filter.ChunkedInputFilter$State: int ordinal()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HttpUtil$EndEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.HttpUtil$EndEmitter: void access$000(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.server.BoundaryEmitter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.body.Part: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$000(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>(r1, r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void access$100(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$100(com.koushikdutta.async.http.filter.GZIPInputFilter$1)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void access$000(com.koushikdutta.async.http.filter.GZIPInputFilter$1)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean isHttps()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean access$000(com.koushikdutta.async.http.ResponseCacheMiddleware$Entry)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean isHttps()>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0) in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.lang.String: boolean equals(java.lang.Object)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.security.Provider$Service: java.lang.String getAlgorithm()>() in <com.koushikdutta.async.util.FileCache: java.security.MessageDigest findAlternativeMessageDigest()> ==> <java.security.Provider$Service: java.lang.String getAlgorithm()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$000(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: specialinvoke $r1.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.Hashtable: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, "OK") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, "Partial Content") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, "Switching Protocols") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, "Moved Permanently") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, "Found") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r18.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>($r19, "Not Found") in <com.koushikdutta.async.http.server.AsyncHttpServer: void <clinit>()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServer: void access$200(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r0.<java.lang.Class: boolean desiredAssertionStatus()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()> ==> <java.lang.Class: boolean desiredAssertionStatus()>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String replacePrefix(java.util.regex.Matcher)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String access$400(com.koushikdutta.async.http.server.AsyncHttpServer,java.util.regex.Matcher)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String replacePrefix(java.util.regex.Matcher)>
SPECIAL edge: specialinvoke $r0.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("ADD", 0) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("CLEAR", 1) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DARKEN", 2) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST", 3) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_ATOP", 4) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_IN", 5) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_OUT", 6) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_OVER", 7) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r8.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("LIGHTEN", 8) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r9.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("MULTIPLY", 9) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r10.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("OVERLAY", 10) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r11.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SCREEN", 11) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r12.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC", 12) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r13.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_ATOP", 13) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r14.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_IN", 14) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r15.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_OUT", 15) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r16.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_OVER", 16) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r17.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("XOR", 17) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ALPHA_8", 0) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ARGB_4444", 1) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ARGB_8888", 2) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("RGB_565", 3) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("JPEG", 0) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("PNG", 1) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("WEBP", 2) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("DIFFERENCE", 0) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("INTERSECT", 1) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("REPLACE", 2) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("REVERSE_DIFFERENCE", 3) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("UNION", 4) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("XOR", 5) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.DrawFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>("AA", 0) in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>("BW", 1) in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLES", 0) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLE_FAN", 1) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLE_STRIP", 2) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$000(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$100(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$200(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
CLINIT edge: $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r5) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z1 = staticinvoke <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>($r7, r5) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportError(java.lang.String,java.lang.String)>(r1, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$800(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportError(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportEvent(java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, r2, r3, r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$700(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportEvent(java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)>(r1, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge access$400(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportJson(java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, r2, r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$600(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportJson(java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportString(java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(r1, r2, r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$500(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportString(java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void reportConnect(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void access$300(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportConnect(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$000(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$200(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void access$100(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void access$000(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)>("AsyncServer-worker-") in <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()> ==> <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.LinkedBlockingQueue: void <init>()>() in <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()> ==> <java.util.concurrent.LinkedBlockingQueue: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>(1, 4, 10L, $r4, $r3, $r0) in <com.koushikdutta.async.AsyncServer: java.util.concurrent.ExecutorService newSynchronousWorkers()> ==> <java.util.concurrent.ThreadPoolExecutor: void <init>(int,int,long,java.util.concurrent.TimeUnit,java.util.concurrent.BlockingQueue,java.util.concurrent.ThreadFactory)>
CLINIT edge: r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.System: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: r2 = staticinvoke <java.lang.System: java.lang.SecurityManager getSecurityManager()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.System: java.lang.SecurityManager getSecurityManager()>
VIRTUAL edge: $r18 = virtualinvoke r1.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.koushikdutta.async.SelectorWrapper: boolean isOpen()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: boolean isOpen()>
VIRTUAL edge: $r10 = virtualinvoke r1.<com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r10.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.TreeSet: int size()>
VIRTUAL edge: $i1 = virtualinvoke r2.<java.util.PriorityQueue: int size()>() in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.PriorityQueue: int size()>
SPECIAL edge: specialinvoke $r8.<java.util.PriorityQueue: void <init>(int,java.util.Comparator)>(1, $r9) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.PriorityQueue: void <init>(int,java.util.Comparator)>
VIRTUAL edge: virtualinvoke $r5.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>($r6) in <com.koushikdutta.async.AsyncServer: void run(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.SelectorWrapper: void close()>() in <com.koushikdutta.async.AsyncServer: void shutdownEverything(com.koushikdutta.async.SelectorWrapper)> ==> <com.koushikdutta.async.SelectorWrapper: void close()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: r4 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>(r3) in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r7.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>(r3, r4) in <com.koushikdutta.async.http.AsyncHttpClient: void copyHeader(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpRequest,java.lang.String)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void enableProxy(java.lang.String,int)>(r17, $i1) in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void enableProxy(java.lang.String,int)>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.util.LinkedList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r6.<java.util.List: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0) in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.List: java.lang.Object get(int)>(0) in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r8 = virtualinvoke r16.<java.net.Proxy: java.net.Proxy$Type type()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.Proxy: java.net.Proxy$Type type()>
VIRTUAL edge: $r10 = virtualinvoke r16.<java.net.Proxy: java.net.SocketAddress address()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.Proxy: java.net.SocketAddress address()>
VIRTUAL edge: $r11 = virtualinvoke r16.<java.net.Proxy: java.net.SocketAddress address()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.Proxy: java.net.SocketAddress address()>
VIRTUAL edge: r13 = virtualinvoke r12.<java.net.InetSocketAddress: java.net.InetAddress getAddress()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.InetSocketAddress: java.net.InetAddress getAddress()>
VIRTUAL edge: r17 = virtualinvoke r12.<java.net.InetSocketAddress: java.lang.String getHostName()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.InetSocketAddress: java.lang.String getHostName()>
VIRTUAL edge: $i1 = virtualinvoke r12.<java.net.InetSocketAddress: int getPort()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.InetSocketAddress: int getPort()>
VIRTUAL edge: r17 = virtualinvoke r13.<java.net.InetAddress: java.lang.String getHostAddress()>() in <com.koushikdutta.async.http.AsyncHttpClient: void setupAndroidProxy(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.net.InetAddress: java.lang.String getHostAddress()>
VIRTUAL edge: i5 = virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: int selectNow()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: int selectNow()>
VIRTUAL edge: $r27 = virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set keys()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: void select()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: void select()>
VIRTUAL edge: virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: void select(long)>(l0) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: void select(long)>
VIRTUAL edge: r42 = virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: java.util.Set selectedKeys()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: java.util.Set selectedKeys()>
VIRTUAL edge: $r19 = virtualinvoke r3.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
INTERFACE edge: $i3 = interfaceinvoke $r27.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r27.<java.util.Set: int size()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.TreeSet: int size()>
SPECIAL edge: specialinvoke $r58.<com.koushikdutta.async.AsyncServer$AsyncSelectorException: void <init>(java.lang.Exception)>($r36) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer$AsyncSelectorException: void <init>(java.lang.Exception)>
INTERFACE edge: r43 = interfaceinvoke r42.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r43 = interfaceinvoke r42.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: interfaceinvoke r42.<java.util.Set: void clear()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.HashSet: void clear()>
INTERFACE edge: interfaceinvoke r42.<java.util.Set: void clear()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.util.TreeSet: void clear()>
INTERFACE edge: $z8 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r43.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r43.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r59.<com.koushikdutta.async.AsyncNetworkSocket: void <init>()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <init>()>
VIRTUAL edge: virtualinvoke $r59.<com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)>(r46, $r25) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)>
VIRTUAL edge: virtualinvoke $r59.<com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>(r0, r47) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>
INTERFACE edge: interfaceinvoke r48.<com.koushikdutta.async.callback.ListenCallback: void onAccepted(com.koushikdutta.async.AsyncSocket)>($r59) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onAccepted(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke r48.<com.koushikdutta.async.callback.ListenCallback: void onAccepted(com.koushikdutta.async.AsyncSocket)>($r59) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: i6 = virtualinvoke r50.<com.koushikdutta.async.AsyncNetworkSocket: int onReadable()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncServer: void onDataReceived(int)>(i6) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncServer: void onDataReceived(int)>
VIRTUAL edge: virtualinvoke r51.<com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void onDataWritable()>
SPECIAL edge: specialinvoke $r60.<com.koushikdutta.async.AsyncNetworkSocket: void <init>()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void <init>()>
VIRTUAL edge: virtualinvoke $r60.<com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>(r0, r44) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>
VIRTUAL edge: virtualinvoke $r60.<com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)>(r53, $r12) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>() in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()>
VIRTUAL edge: $z6 = virtualinvoke r52.<com.koushikdutta.async.AsyncServer$ConnectFuture: boolean setComplete(java.lang.Exception)>($r65) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: $z5 = virtualinvoke r52.<com.koushikdutta.async.AsyncServer$ConnectFuture: boolean setComplete(java.lang.Object)>($r60) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r33.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r66, null) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r33.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r66, null) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r33.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>($r66, null) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r60) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r60) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r14.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(null, $r60) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
SPECIAL edge: specialinvoke $r61.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r29) in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r62.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unknown key state.") in <com.koushikdutta.async.AsyncServer: void runLoop(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, $r7) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.ByteBufferList: void reclaim(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Sorry, deque too big") in <com.koushikdutta.async.ArrayDeque: void doubleCapacity()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque: void checkInvariants()>() in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <com.koushikdutta.async.ArrayDeque: void checkInvariants()>
SPECIAL edge: specialinvoke $r4.<java.util.ConcurrentModificationException: void <init>()>() in <com.koushikdutta.async.ArrayDeque: boolean delete(int)> ==> <java.util.ConcurrentModificationException: void <init>()>
CLINIT edge: $z0 = <com.koushikdutta.async.ArrayDeque: boolean $assertionsDisabled> in <com.koushikdutta.async.ArrayDeque: void checkInvariants()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)>(r1) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)>
CLINIT edge: $i0 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $i1 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>($r3) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)>(r1) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.ArrayDeque$1)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)>
CLINIT edge: $i0 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
STATIC edge: $i1 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>($r3) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: int access$200(com.koushikdutta.async.ArrayDeque)>
STATIC edge: $i0 = staticinvoke <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>($r2) in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <com.koushikdutta.async.ArrayDeque: int access$300(com.koushikdutta.async.ArrayDeque)>
VIRTUAL edge: $i10 = virtualinvoke r0.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.ArrayDeque: java.lang.Object[] copyElements(java.lang.Object[])> ==> <com.koushikdutta.async.ArrayDeque: int size()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void <init>()> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncDatagramSocket$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.lang.String,int,java.nio.ByteBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncDatagramSocket$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,java.net.InetSocketAddress,java.nio.ByteBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket$1: void <init>(com.koushikdutta.async.AsyncNetworkSocket,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)> ==> <com.koushikdutta.async.DatagramChannelWrapper: boolean isChunked()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.koushikdutta.async.ChannelWrapper: boolean isChunked()>() in <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)> ==> <com.koushikdutta.async.ChannelWrapper: boolean isChunked()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void handleRemaining(int)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)>
STATIC edge: staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>("NIO", "Unhandled exception", r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket$2: void <init>(com.koushikdutta.async.AsyncNetworkSocket,java.nio.ByteBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket$3: void <init>(com.koushikdutta.async.AsyncNetworkSocket)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket$4: void <init>(com.koushikdutta.async.AsyncNetworkSocket)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.AsyncNetworkSocket: void spitPending()> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>(com.koushikdutta.async.AsyncServer$1)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>()>
SPECIAL edge: specialinvoke $r13.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.SelectorWrapper: void <init>(java.nio.channels.Selector)>($r5) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.SelectorWrapper: void <init>(java.nio.channels.Selector)>
SPECIAL edge: specialinvoke $r9.<com.koushikdutta.async.AsyncServer$13: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>(r0, $r10, $r3, r23) in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer$13: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)>
SPECIAL edge: $z1 = specialinvoke r0.<com.koushikdutta.async.AsyncServer: boolean addMe()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer: boolean addMe()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.SelectorWrapper: void close()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.SelectorWrapper: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.lang.Thread: void start()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r7.<java.lang.Thread: void start()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
THREAD edge: virtualinvoke $r7.<java.lang.Thread: void start()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
THREAD edge: virtualinvoke $r7.<java.lang.Thread: void start()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <java.lang.Thread: void run()>
VIRTUAL edge: $r16 = virtualinvoke r22.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer: void run(boolean)> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
CLINIT edge: $r0 = <com.koushikdutta.async.AsyncServer: java.util.WeakHashMap mServers> in <com.koushikdutta.async.AsyncServer: boolean addMe()> ==> <com.koushikdutta.async.AsyncServer: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$2: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.CompletedCallback,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$3: void <init>(com.koushikdutta.async.AsyncServer,java.lang.Runnable,java.util.concurrent.Semaphore)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$4: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.SelectorWrapper,java.util.concurrent.Semaphore)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>()>() in <com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>(com.koushikdutta.async.AsyncServer$1)> ==> <com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$5: void <init>(com.koushikdutta.async.AsyncServer,java.net.InetAddress,int,com.koushikdutta.async.callback.ListenCallback,com.koushikdutta.async.AsyncServer$ObjectHolder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$1)>(r1, null) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$1)>
VIRTUAL edge: $z1 = virtualinvoke r5.<java.net.InetSocketAddress: boolean isUnresolved()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.net.InetSocketAddress: boolean isUnresolved()>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.AsyncServer$6: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$ConnectFuture,com.koushikdutta.async.callback.ConnectCallback,java.net.InetSocketAddress)>(r1, $r0, r4, r5) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer$6: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$ConnectFuture,com.koushikdutta.async.callback.ConnectCallback,java.net.InetSocketAddress)>
VIRTUAL edge: virtualinvoke r1.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r3) in <com.koushikdutta.async.AsyncServer: com.koushikdutta.async.AsyncServer$ConnectFuture connectResolvedInetSocketAddress(java.net.InetSocketAddress,com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$7: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,java.net.InetSocketAddress)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$8: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.future.SimpleFuture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.AsyncServer$9: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.DatagramChannelWrapper: void <init>(java.nio.channels.DatagramChannel)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.DatagramChannel)> ==> <com.koushikdutta.async.DatagramChannelWrapper: void <init>(java.nio.channels.DatagramChannel)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.util.Allocator: void <init>(int)>(8192) in <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.DatagramChannel)> ==> <com.koushikdutta.async.util.Allocator: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$10: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,int,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$11: void <init>(com.koushikdutta.async.AsyncServer,boolean,java.nio.channels.DatagramChannel,java.net.SocketAddress,com.koushikdutta.async.AsyncDatagramSocket)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$12: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncDatagramSocket,java.nio.channels.DatagramChannel,java.net.SocketAddress)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$14: void <init>(com.koushikdutta.async.AsyncServer)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i8 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("count : ") in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i8) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r18.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r24) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: $r17 = virtualinvoke $r16.<com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peek()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r26) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r27.<com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>(r3) in <com.koushikdutta.async.ByteBufferList: java.nio.ByteBuffer read(int)> ==> <com.koushikdutta.async.ArrayDeque: void addFirst(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.ByteBufferList: void addRemaining(int)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$1: void <init>(com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$2: void <init>(com.koushikdutta.async.DataSink,java.io.InputStream,long,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$3: void <init>(com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$4: void <init>(com.koushikdutta.async.callback.DataCallback,com.koushikdutta.async.DataEmitter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$5: void <init>(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.DataSink,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$6: void <init>(java.io.InputStream,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.Util$7: void <init>(com.koushikdutta.async.DataSink,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>(r1) in <com.koushikdutta.async.ServerSocketChannelWrapper: void <init>(java.nio.channels.ServerSocketChannel)> ==> <com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$5$1: void <init>(com.koushikdutta.async.AsyncServer$5,java.nio.channels.ServerSocketChannel,com.koushikdutta.async.ServerSocketChannelWrapper,java.nio.channels.SelectionKey)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$8$1: void <init>(com.koushikdutta.async.AsyncServer$8,java.net.InetAddress[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$8$2: void <init>(com.koushikdutta.async.AsyncServer$8,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean cancel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void releaseWaiterLocked()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)> ==> <com.koushikdutta.async.future.SimpleFuture: void releaseWaiterLocked()>
SPECIAL edge: r4 = specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback handleCompleteLocked()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>(r4) in <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)> ==> <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.CancellationException: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: boolean cancelInternal(boolean)> ==> <java.util.concurrent.CancellationException: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>($r4) in <com.koushikdutta.async.future.SimpleFuture: java.lang.Object getResult()> ==> <java.util.concurrent.ExecutionException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.AsyncSemaphore: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.AsyncSemaphore ensureWaiterLocked()> ==> <com.koushikdutta.async.AsyncSemaphore: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.AsyncSemaphore: void release()>() in <com.koushikdutta.async.future.SimpleFuture: void releaseWaiterLocked()> ==> <com.koushikdutta.async.AsyncSemaphore: void release()>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.TransformFuture: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.HandlerFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.DocumentBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.future.SimpleFuture$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.JSONArrayBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.AsyncServer$7: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.StringBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7$1: void onCompleted(java.lang.Exception,java.lang.Object)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.future.FutureCallback: void onCompleted(java.lang.Exception,java.lang.Object)>($r3, $r2) in <com.koushikdutta.async.future.SimpleFuture: void handleCallbackUnlocked(com.koushikdutta.async.future.FutureCallback)> ==> <com.koushikdutta.async.http.body.JSONObjectBody$1: void onCompleted(java.lang.Exception,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.SimpleFuture$1: void <init>(com.koushikdutta.async.future.SimpleFuture)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.BufferedDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataSink: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.Util$2: void cleanup()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.FilterInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.BufferedInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.ByteArrayInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <android.content.res.AssetManager$AssetInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.ObjectInputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.InputStream: void close()>
VIRTUAL edge: virtualinvoke $r4.<java.io.InputStream: void close()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.io.FileInputStream: void close()>
VIRTUAL edge: virtualinvoke $r7.<java.io.IOException: void printStackTrace()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r7.<java.io.IOException: void printStackTrace()>() in <com.koushikdutta.async.Util$2: void cleanup()> ==> <javax.net.ssl.SSLException: void printStackTrace()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.TransformFuture: boolean setComplete(java.lang.Exception)>(r1) in <com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)> ==> <com.koushikdutta.async.future.TransformFuture: void error(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.ConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>(r1, null) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void error(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)>($r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)>
CLINIT edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r43) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r19 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r18) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
STATIC edge: $r33 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r32) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri: android.net.Uri parse(java.lang.String)>
STATIC edge: $r10 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>(r8) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r43) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.lang.Integer: int parseInt(java.lang.String)>
CLINIT edge: $r19 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r18) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri: void <clinit>()>
CLINIT edge: $r33 = staticinvoke <android.net.Uri: android.net.Uri parse(java.lang.String)>($r32) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.DocumentParser$1: void transform(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.parser.DocumentParser$1: void transform(java.lang.Object)> ==> <com.koushikdutta.async.parser.DocumentParser$1: void transform(com.koushikdutta.async.ByteBufferList)>
STATIC edge: r0 = staticinvoke <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>() in <com.koushikdutta.async.parser.DocumentParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <javax.xml.parsers.DocumentBuilderFactory: javax.xml.parsers.DocumentBuilderFactory newInstance()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.StringParser$1: void transform(com.koushikdutta.async.ByteBufferList)>($r2) in <com.koushikdutta.async.parser.StringParser$1: void transform(java.lang.Object)> ==> <com.koushikdutta.async.parser.StringParser$1: void transform(com.koushikdutta.async.ByteBufferList)>
STATIC edge: $r7 = staticinvoke <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>($r4) in <com.koushikdutta.async.parser.StringParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])>($r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncServer$9: void transform(java.net.InetAddress[])>($r2) in <com.koushikdutta.async.AsyncServer$9: void transform(java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer$9: void transform(java.net.InetAddress[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.String)>($r2) in <com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.Object)> ==> <com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.String)>($r2) in <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.Object)> ==> <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.String)>
CLINIT edge: $r1 = new org.json.JSONObject in <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.String)> ==> <org.json.JSONObject: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void cleanup()>() in <com.koushikdutta.async.dns.Dns$1: void cleanup()> ==> <com.koushikdutta.async.future.SimpleCancellable: void cleanup()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncDatagramSocket: void close()>() in <com.koushikdutta.async.dns.Dns$1: void cleanup()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.BufferedDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: void close()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.DataEmitter: void close()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void cancelCleanup()> ==> <com.koushikdutta.async.FileDataEmitter: void close()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void cancelCleanup()>() in <com.koushikdutta.async.AsyncServer$ConnectFuture: void cancelCleanup()> ==> <com.koushikdutta.async.future.SimpleCancellable: void cancelCleanup()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.BufferedDataSink: void <init>(com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.AsyncSSLSocketWrapper$3: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>($r8) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.BufferedDataSink: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)>(r1) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.BufferedDataEmitter: void <init>(com.koushikdutta.async.DataEmitter)>
SPECIAL edge: specialinvoke $r11.<com.koushikdutta.async.util.Allocator: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.util.Allocator: void <init>()>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.util.Allocator: com.koushikdutta.async.util.Allocator setMinAlloc(int)>(8192) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.util.Allocator: com.koushikdutta.async.util.Allocator setMinAlloc(int)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.ByteBufferList: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.ByteBufferList: void <init>()>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.AsyncSSLSocketWrapper$4: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.util.Allocator)>(r0, $r14, $r11) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.util.Allocator)>
VIRTUAL edge: virtualinvoke $r17.<com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r16) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void <init>(com.koushikdutta.async.AsyncSocket,java.lang.String,int,javax.net.ssl.SSLEngine,javax.net.ssl.TrustManager[],javax.net.ssl.HostnameVerifier,boolean)> ==> <com.koushikdutta.async.BufferedDataEmitter: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.future.Continuation: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncNetworkSocket$4: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncDatagramSocket$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncDatagramSocket$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <java.lang.Thread: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$8$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.future.Continuation$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.future.FutureThread$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$8$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.FileDataEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$14: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$11: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$12: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$RunnableWrapper: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncNetworkSocket$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncNetworkSocket$3: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$3: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncNetworkSocket$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$2: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$5: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$4: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$10: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$6: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncServer$8: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.future.HandlerFuture$1$1: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
INTERFACE edge: interfaceinvoke r49.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void run()>
VIRTUAL edge: virtualinvoke r4.<com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>($r41) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r4.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r62) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r4.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r64) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r4.<com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>($r43) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r40.<com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>
VIRTUAL edge: virtualinvoke r51.<javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>($r36) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <javax.net.ssl.TrustManagerFactory: void init(java.security.KeyStore)>
VIRTUAL edge: r50 = virtualinvoke r51.<javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <javax.net.ssl.TrustManagerFactory: javax.net.ssl.TrustManager[] getTrustManagers()>
INTERFACE edge: interfaceinvoke r54.<javax.net.ssl.X509TrustManager: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>($r19, "SSL") in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$1: void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String)>
SPECIAL edge: specialinvoke $r61.<org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <org.apache.http.conn.ssl.StrictHostnameVerifier: void <init>()>
VIRTUAL edge: virtualinvoke $r61.<org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>($r30, $r31, $r34) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <org.apache.http.conn.ssl.StrictHostnameVerifier: void verify(java.lang.String,java.lang.String[],java.lang.String[])>
INTERFACE edge: interfaceinvoke $r23.<javax.net.ssl.HostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>($r24, $r25) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <org.apache.http.conn.ssl.AbstractVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)>
SPECIAL edge: specialinvoke $r62.<com.koushikdutta.async.AsyncSSLException: void <init>(java.lang.Throwable)>(r52) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLException: void <init>(java.lang.Throwable)>
VIRTUAL edge: $z2 = virtualinvoke $r62.<com.koushikdutta.async.AsyncSSLException: boolean getIgnore()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLException: boolean getIgnore()>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>(null, r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
INTERFACE edge: interfaceinvoke $r8.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>(null, r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.Util$4: void onWriteable()>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()>
INTERFACE edge: interfaceinvoke $r11.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable()>
SPECIAL edge: specialinvoke $r63.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r45) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void handleHandshakeStatus(javax.net.ssl.SSLEngineResult$HandshakeStatus)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r4) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void end()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>(r3, null) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>(r3, null) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void onHandshakeCompleted(java.lang.Exception,com.koushikdutta.async.AsyncSSLSocket)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r2.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper: void writeTmp(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.BufferedDataEmitter$1: void <init>(com.koushikdutta.async.BufferedDataEmitter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.BufferedDataSink$1: void <init>(com.koushikdutta.async.BufferedDataSink)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r2) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i1 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: i3 = virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>($r3, i3) in <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList,boolean)> ==> <com.koushikdutta.async.ByteBufferList: void get(com.koushikdutta.async.ByteBufferList,int)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r0) in <com.koushikdutta.async.AsyncSSLSocketWrapper: void addToPending(com.koushikdutta.async.ByteBufferList,java.nio.ByteBuffer)> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.FilteredDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.DataEmitterReader: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.Util$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.dns.Dns$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.NullDataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.PushParser: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.filter.InflaterInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.LineEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.BufferedDataEmitter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$5: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$4: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$3: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$1: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser$2: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.callback.DataCallback: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r3, $r4) in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.filter.ContentLengthFilter: void onDataAvailable(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.DataEmitterReader: boolean handlePendingData(com.koushikdutta.async.DataEmitter)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>(r3) in <com.koushikdutta.async.FileDataEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r1) in <com.koushikdutta.async.FileDataEmitter: void doResume()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.FileDataEmitter$1: void <init>(com.koushikdutta.async.FileDataEmitter)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>() in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.CompletedCallback getEndCallback()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r3) in <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.filter.PrematureDataEndException: void <init>(java.lang.String)>("End of data reached before content length was read") in <com.koushikdutta.async.http.filter.ContentLengthFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.PrematureDataEndException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.filter.ContentLengthFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<java.util.zip.Inflater: void end()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)> ==> <java.util.zip.Inflater: void end()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.zip.Inflater: int getRemaining()>() in <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)> ==> <java.util.zip.Inflater: int getRemaining()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.filter.DataRemainingException: void <init>(java.lang.String,java.lang.Exception)>("data still remaining in inflater", r4) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.DataRemainingException: void <init>(java.lang.String,java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.filter.InflaterInputFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>("chunked input ended before final chunk") in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void abort()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r24.<com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>("exception during response", r0) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke $r20.<com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>("SSL Exception", r0) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r22.<com.koushikdutta.async.http.AsyncHttpRequest: void onHandshakeException(com.koushikdutta.async.AsyncSSLException)>(r27) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void onHandshakeException(com.koushikdutta.async.AsyncSSLException)>
VIRTUAL edge: $z3 = virtualinvoke r27.<com.koushikdutta.async.AsyncSSLException: boolean getIgnore()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLException: boolean getIgnore()>
VIRTUAL edge: r28 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket getSocket()>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpClient$3$1: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.http.libcore.ResponseHeaders getHeaders()>
INTERFACE edge: $z2 = interfaceinvoke r28.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isOpen()>
INTERFACE edge: $z2 = interfaceinvoke r28.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: boolean isOpen()>
INTERFACE edge: $z2 = interfaceinvoke r28.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isOpen()>
INTERFACE edge: $z2 = interfaceinvoke r28.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isOpen()>
INTERFACE edge: $z2 = interfaceinvoke r28.<com.koushikdutta.async.AsyncSocket: boolean isOpen()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isOpen()>
VIRTUAL edge: r6 = virtualinvoke $r36.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z4 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>($r10) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.SimpleMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>($r10) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>($r10) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: void onRequestComplete(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.FilteredDataEmitter$1: void <init>(com.koushikdutta.async.FilteredDataEmitter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$1: void <init>(com.koushikdutta.async.PushParser,int)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$2: void <init>(com.koushikdutta.async.PushParser,int)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$3: void <init>(com.koushikdutta.async.PushParser,int)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$4: void <init>(com.koushikdutta.async.PushParser,int)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.PushParser$Waiter: void <init>(int)>(i0) in <com.koushikdutta.async.PushParser$5: void <init>(com.koushikdutta.async.PushParser,int)> ==> <com.koushikdutta.async.PushParser$Waiter: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.PushParser$6: void <init>(com.koushikdutta.async.PushParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.PushParser$7: void <init>(com.koushikdutta.async.PushParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.PushParser$8: void <init>(com.koushikdutta.async.PushParser)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.ZipDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>() in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataSink: com.koushikdutta.async.callback.CompletedCallback getClosedCallback()>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.ZipDataSink: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.Continuation$1: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.Cancellable)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r2) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r2) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r2) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.ContinuationCallback hook(com.koushikdutta.async.callback.ContinuationCallback)> ==> <com.koushikdutta.async.future.SimpleCancellable$1: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.Continuation$3: void <init>(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.future.DependentFuture)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.LinkedList: int size()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <java.util.LinkedList: int size()>
VIRTUAL edge: $z4 = virtualinvoke r0.<com.koushikdutta.async.future.Continuation: boolean isDone()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
VIRTUAL edge: $z5 = virtualinvoke r0.<com.koushikdutta.async.future.Continuation: boolean isCancelled()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
SPECIAL edge: $r5 = specialinvoke r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.CompletedCallback wrap()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.CompletedCallback wrap()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>($r8) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.future.Continuation: boolean isDone()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.koushikdutta.async.future.Continuation: boolean isCancelled()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>(null) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.ThreadQueue: java.lang.Object remove()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.LinkedList: java.lang.Object remove()>() in <com.koushikdutta.async.future.Continuation: void next()> ==> <java.util.LinkedList: java.lang.Object remove()>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.Continuation: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r4.<com.koushikdutta.async.callback.ContinuationCallback: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>(r0, $r5) in <com.koushikdutta.async.future.Continuation: void next()> ==> <com.koushikdutta.async.future.Continuation$3: void onContinue(com.koushikdutta.async.future.Continuation,com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: $r0 = new com.koushikdutta.async.future.Continuation$2 in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.CompletedCallback wrap()> ==> <com.koushikdutta.async.future.Continuation$2: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.future.Continuation: boolean setComplete()>() in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.future.Continuation: void reportCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.dns.Dns$1: void <init>(com.koushikdutta.async.AsyncDatagramSocket)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.dns.Dns$2: void <init>(com.koushikdutta.async.AsyncDatagramSocket,boolean,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
VIRTUAL edge: $b0 = virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: byte get()>() in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: byte get()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.ByteBufferList: void get(byte[])>(r1) in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: void get(byte[])>
SPECIAL edge: specialinvoke $r2.<java.lang.String: void <init>(byte[])>(r1) in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.String: void <init>(byte[])>
VIRTUAL edge: r4 = virtualinvoke $r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("=") in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>($r7, $r6) in <com.koushikdutta.async.dns.DnsResponse: void parseTxt(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.Multimap: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.FutureThread$1: void <init>(com.koushikdutta.async.future.FutureThread,com.koushikdutta.async.future.FutureRunnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.HandlerFuture$1$1: void <init>(com.koushikdutta.async.future.HandlerFuture$1,java.lang.Exception,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.HandlerFuture$1: void <init>(com.koushikdutta.async.future.HandlerFuture,com.koushikdutta.async.future.FutureCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>(r1) in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$1)> ==> <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>() in <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r3, i0, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r0, r3, i0, r4, r5) in <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r2) in <com.koushikdutta.async.http.AsyncHttpClient: void execute(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$5: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.io.OutputStream,java.io.File)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$6: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.io.OutputStream,java.io.File,com.koushikdutta.async.http.AsyncHttpClient$FileCallback,com.koushikdutta.async.future.SimpleFuture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$7: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.parser.AsyncParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$8: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$1: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpRequest$2: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getLogMessage(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r22 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r22 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("//") in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(":") in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("?proxy=") in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r22) in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()>
VIRTUAL edge: virtualinvoke $r5.<java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) in <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: $r1 = new com.koushikdutta.async.ArrayDeque in <com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()> ==> <com.koushikdutta.async.ArrayDeque: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,boolean,com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int)>(r1, z0, r2, r3, i0) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.callback.ConnectCallback wrapCallback(com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int,boolean)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,boolean,com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,int,android.net.Uri)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncSocketMiddleware$3: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>(r2, r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r3) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.AsyncSocketMiddleware$4: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>(r2, r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void idleSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>
VIRTUAL edge: i0 = virtualinvoke r2.<com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>
VIRTUAL edge: r4 = virtualinvoke r2.<com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>(r1, i0, $r3, $i1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>
VIRTUAL edge: r16 = virtualinvoke r2.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>(r13) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>
SPECIAL edge: specialinvoke r2.<com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)>(r4) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r4) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i4 = virtualinvoke $r10.<com.koushikdutta.async.ArrayDeque: int size()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.ArrayDeque: int size()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object remove()>
VIRTUAL edge: $z0 = virtualinvoke r15.<com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke r15.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r16) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: virtualinvoke r15.<com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>(r16) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void nextConnection(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.SimpleCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getProxyHost()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getProxyPort()>
VIRTUAL edge: i0 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>(r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: int getSchemePort(android.net.Uri)>
VIRTUAL edge: r5 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>(r2, i0, $r4, $i1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: java.lang.String computeLookup(android.net.Uri,int,java.lang.String,int)>
SPECIAL edge: r10 = specialinvoke r3.<com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)>(r5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo getOrCreateConnectionInfo(java.lang.String)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>(r3, r0) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)>
VIRTUAL edge: virtualinvoke r11.<com.koushikdutta.async.ArrayDeque: void push(java.lang.Object)>($r6) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.ArrayDeque: void push(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.http.AsyncSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder,com.koushikdutta.async.AsyncSocket,java.lang.String)>(r3, r11, $r6, r0, r5) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder,com.koushikdutta.async.AsyncSocket,java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r12) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void recycleSocket(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$4: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $i0 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RequestHeaders: int getContentLength()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: int getContentLength()>
SPECIAL edge: specialinvoke $r7.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void assertContent()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$3,com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void <init>(com.koushikdutta.async.http.AsyncHttpRequest)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.RequestHeaders: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: java.lang.String getContentType()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StreamBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.DocumentBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.FileBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StringBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: java.lang.String getContentType()>
INTERFACE edge: $r25 = interfaceinvoke $r24.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: java.lang.String getContentType()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: java.lang.String getContentType()>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.libcore.RequestHeaders: void setContentType(java.lang.String)>($r25) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentType(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StreamBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.DocumentBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.FileBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StringBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: int length()>
INTERFACE edge: $i0 = interfaceinvoke $r12.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONArrayBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StreamBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.DocumentBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.FileBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.StringBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.JSONObjectBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: int length()>
INTERFACE edge: $i1 = interfaceinvoke $r20.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: int length()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: int length()>
VIRTUAL edge: virtualinvoke $r19.<com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)>($i1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: void setContentLength(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r15.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Transfer-Encoding", "Chunked") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.http.filter.ChunkedOutputFilter: void <init>(com.koushikdutta.async.DataSink)>($r17) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.filter.ChunkedOutputFilter: void <init>(com.koushikdutta.async.DataSink)>
INTERFACE edge: interfaceinvoke $r26.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r26.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r26.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r26.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>($r27) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r29.<com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r29) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r29) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r29) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r29) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r29) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: r7 = virtualinvoke $r30.<com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getRequestString()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: java.lang.String getRequestString()>
SPECIAL edge: specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n") in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r7) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r31.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>($r35) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke r7.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r37.<com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
SPECIAL edge: specialinvoke $r38.<com.koushikdutta.async.LineEmitter: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void <init>()>
VIRTUAL edge: virtualinvoke $r38.<com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>($r39) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r38) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r38) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r38) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke r1.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r38) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.RequestHeaders$1: void <init>(com.koushikdutta.async.http.libcore.RequestHeaders)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.stream.OutputStreamDataCallback: void <init>(java.io.OutputStream)>(r3) in <com.koushikdutta.async.http.AsyncHttpClient$6$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,java.io.OutputStream,com.koushikdutta.async.http.AsyncHttpResponse,long)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void <init>(java.io.OutputStream)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$6$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient$6,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$7$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient$7,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.parser.StringParser$1: void <init>(com.koushikdutta.async.parser.StringParser,java.lang.String)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.parser.JSONArrayParser$1: void <init>(com.koushikdutta.async.parser.JSONArrayParser)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.WebSocketImpl$1: void <init>(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.DataEmitter)>(r0, $r2) in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void <init>(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.HybiParser: void setMasking(boolean)>(z0) in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.HybiParser: void setMasking(boolean)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.HybiParser: void setDeflate(boolean)>(z1) in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.HybiParser: void setDeflate(boolean)>
INTERFACE edge: $z2 = interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: boolean isPaused()>
INTERFACE edge: $z2 = interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.WebSocketImpl: void resume()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void resume()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void resume()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void resume()>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void resume()>() in <com.koushikdutta.async.http.WebSocketImpl: void setupParser(boolean,boolean)> ==> <com.koushikdutta.async.FilteredDataEmitter: void resume()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.parser.ByteBufferListParser$1: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.ByteBufferListParser$2: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.parser.ByteBufferListParser$3: void <init>(com.koushikdutta.async.parser.ByteBufferListParser,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.parser.JSONObjectParser$1: void <init>(com.koushikdutta.async.parser.JSONObjectParser)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)>($r4, i0) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)>
VIRTUAL edge: $r9 = virtualinvoke r3.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback createHandshakeCallback(com.koushikdutta.async.callback.ConnectCallback)>(r6) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: void tryHandshake(com.koushikdutta.async.callback.ConnectCallback,com.koushikdutta.async.AsyncSocket,android.net.Uri,int)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback createHandshakeCallback(com.koushikdutta.async.callback.ConnectCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders$1: void <init>(com.koushikdutta.async.http.libcore.ResponseHeaders)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $l15 = virtualinvoke $r3.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l13 = virtualinvoke $r2.<java.util.concurrent.TimeUnit: long toMillis(long)>($l12) in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeAge(long)> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l7 = virtualinvoke $r11.<java.util.concurrent.TimeUnit: long toMillis(long)>($l6) in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.concurrent.TimeUnit: long toMillis(long)>
VIRTUAL edge: $l8 = virtualinvoke $r10.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l3 = virtualinvoke $r9.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l12 = virtualinvoke $r7.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $l1 = virtualinvoke $r6.<java.util.Date: long getTime()>() in <com.koushikdutta.async.http.libcore.ResponseHeaders: long computeFreshnessLifetime()> ==> <java.util.Date: long getTime()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke $r37.<com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>($r36) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Received headers:\n") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r13 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>($r14) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: r24 = virtualinvoke $r23.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r24.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r28 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r28 = interfaceinvoke r24.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r29.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: void onHeadersReceived(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnHeadersReceivedData)>($r31) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.SimpleMiddleware: void onHeadersReceived(com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnHeadersReceivedData)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void report(java.lang.Exception)>(r1) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>(r0) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setWriteableCallback(com.koushikdutta.async.callback.WritableCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.AsyncSocket: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.AsyncHttpResponseImpl: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl$2)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>("request completed") in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logv(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean isCancelled()>() in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
VIRTUAL edge: virtualinvoke $r16.<com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>($r15) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>
VIRTUAL edge: $r27 = virtualinvoke $r25.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>($r26, $l0) in <com.koushikdutta.async.http.AsyncHttpClient$3$1: void onRequestCompleted(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: int getTimeout()>() in <com.koushikdutta.async.http.AsyncHttpClient: long getTimeoutRemaining(com.koushikdutta.async.http.AsyncHttpRequest)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getTimeout()>
VIRTUAL edge: virtualinvoke $r10.<com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>(1, $r9) in <com.koushikdutta.async.http.HybiParser: void parse()> ==> <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>(1, $r7) in <com.koushikdutta.async.http.HybiParser: void parse()> ==> <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>($i2, $r5) in <com.koushikdutta.async.http.HybiParser: void parse()> ==> <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>(4, $r3) in <com.koushikdutta.async.http.HybiParser: void parse()> ==> <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>($i1, $r1) in <com.koushikdutta.async.http.HybiParser: void parse()> ==> <com.koushikdutta.async.DataEmitterReader: void read(int,com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser$1: void <init>(com.koushikdutta.async.http.HybiParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser$2: void <init>(com.koushikdutta.async.http.HybiParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser$3: void <init>(com.koushikdutta.async.http.HybiParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser$4: void <init>(com.koushikdutta.async.http.HybiParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HybiParser$5: void <init>(com.koushikdutta.async.http.HybiParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] decode(java.lang.String)>(r1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] decode(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>(i0, $r2, i1) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,java.lang.String,int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>
SPECIAL edge: $r2 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>(i0, r1, i1, 0, $i2) in <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int,int,int)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void sendFrame(byte[])> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>($r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void sendFrame(byte[])> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.HttpUtil$EndEmitter: void <init>()> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.HttpUtil$EndEmitter$1: void <init>(com.koushikdutta.async.http.HttpUtil$EndEmitter,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.WebSocketImpl$1: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.JSONObjectBody$1: void <init>(com.koushikdutta.async.http.body.JSONObjectBody,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(38) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(61) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r18 = virtualinvoke $r3.<com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <com.koushikdutta.async.http.Multimap: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r18.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r18.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: $r8 = interfaceinvoke r7.<org.apache.http.NameValuePair: java.lang.String getValue()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>
INTERFACE edge: $r9 = interfaceinvoke r7.<org.apache.http.NameValuePair: java.lang.String getName()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getName()>
INTERFACE edge: $r13 = interfaceinvoke r7.<org.apache.http.NameValuePair: java.lang.String getValue()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <org.apache.http.message.BasicNameValuePair: java.lang.String getValue()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8") in <com.koushikdutta.async.http.body.UrlEncodedFormBody: void buildData()> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody$1: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void <init>(com.koushikdutta.async.http.body.UrlEncodedFormBody,com.koushikdutta.async.callback.CompletedCallback,com.koushikdutta.async.ByteBufferList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$5: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$4: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.body.Part,com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$3: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$6: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.DataSink)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.StringBody$1: void <init>(com.koushikdutta.async.http.body.StringBody,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)>(c0, 10) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkLF(char)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)>
SPECIAL edge: $z0 = specialinvoke r0.<com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)>(c0, 13) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkCR(char)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter,com.koushikdutta.async.DataEmitter,com.koushikdutta.async.PushParser)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1$2,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.LineEmitter: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.LineEmitter: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.body.MultipartFormDataBody$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.libcore.RawHeaders)>(r2, $r0) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>($r4) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.http.body.MultipartFormDataBody: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r6) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryStart()> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryEnd()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryEnd()> ==> <com.koushikdutta.async.http.server.BoundaryEmitter: void onBoundaryEnd()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void onBoundaryEnd()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()>
SPECIAL edge: specialinvoke r0.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.body.FilePart$1: boolean add(java.lang.Object)>($r2) in <com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r2.<org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>("filename", $r4) in <com.koushikdutta.async.http.body.FilePart$1: void <init>(java.io.File)> ==> <org.apache.http.message.BasicNameValuePair: void <init>(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<com.koushikdutta.async.ByteBufferList: java.lang.String peekString()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String peekString()>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>($r5, $r6) in <com.koushikdutta.async.http.body.MultipartFormDataBody: void handleLast()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void add(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.PushParser: void <init>(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)>(0, $r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)>(0, $r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser until(byte,com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>(r1) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void next()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()>
SPECIAL edge: specialinvoke $r0.<java.io.FileInputStream: void <init>(java.io.File)>($r2) in <com.koushikdutta.async.http.body.FilePart: java.io.InputStream getInputStream()> ==> <java.io.FileInputStream: void <init>(java.io.File)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.body.StringPart: java.io.InputStream getInputStream()> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayInputStream: void <init>(byte[])>($r3) in <com.koushikdutta.async.http.body.StringPart: java.io.InputStream getInputStream()> ==> <java.io.ByteArrayInputStream: void <init>(byte[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$1$1: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1$1)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: $i7 = virtualinvoke $r16.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: r18 = virtualinvoke $r2.<com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>
SPECIAL edge: specialinvoke $r20.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryCacheResponse: java.io.FileInputStream getBody()>
VIRTUAL edge: i3 = virtualinvoke r4.<java.io.FileInputStream: int read(byte[],int,int)>($r5, $i1, $i2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
VIRTUAL edge: i3 = virtualinvoke r4.<java.io.FileInputStream: int read(byte[],int,int)>($r5, $i1, $i2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>(null) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>($r21) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void report(java.lang.Exception)>($r21) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void report(java.lang.Exception)>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r11 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.util.Allocator: void track(long)>($l4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.util.Allocator: void track(long)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r18) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
VIRTUAL edge: $i5 = virtualinvoke $r10.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r11.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>($r12, 10L) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spewInternal()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.SimpleMiddleware: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware: void <init>()> ==> <com.koushikdutta.async.http.SimpleMiddleware: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware,com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData,com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()> ==> <com.koushikdutta.async.FilteredDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: com.koushikdutta.async.AsyncServer getServer()>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r2) in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter: void spew()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$1)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.io.FileOutputStream: void <init>(java.io.File)>($r7) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: java.io.FileOutputStream newOutputStream(int)> ==> <java.io.FileOutputStream: void <init>(java.io.File)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)> ==> <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() in <com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)> ==> <java.io.File: boolean exists()>
VIRTUAL edge: virtualinvoke $r2.<java.io.File: boolean delete()>() in <com.koushikdutta.async.util.FileCache: void removePartFiles(java.lang.String)> ==> <java.io.File: boolean delete()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>(r2, i0) in <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)> ==> <com.koushikdutta.async.util.FileCache: java.lang.String getPartName(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, $r4) in <com.koushikdutta.async.util.FileCache: java.io.File getPartFile(java.lang.String,int)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.util.FileCache$2: void <init>(com.koushikdutta.async.util.FileCache)>(r0) in <com.koushikdutta.async.util.FileCache: void doLoad()> ==> <com.koushikdutta.async.util.FileCache$2: void <init>(com.koushikdutta.async.util.FileCache)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.util.FileCache$2: void start()>() in <com.koushikdutta.async.util.FileCache: void doLoad()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r1.<com.koushikdutta.async.util.FileCache$2: void start()>() in <com.koushikdutta.async.util.FileCache: void doLoad()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache: void load()>() in <com.koushikdutta.async.util.FileCache: void doLoad()> ==> <com.koushikdutta.async.util.FileCache: void load()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.util.FileCache$1: void <init>(com.koushikdutta.async.util.FileCache)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<java.lang.String: boolean startsWith(java.lang.String)>("https://") in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: boolean isHttps()> ==> <java.lang.String: boolean startsWith(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("-1\n") in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>("-1\n") in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r6) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r6) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.Writer: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r13) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.PrintWriter: void write(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<java.io.Writer: void write(java.lang.String)>($r13) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.Writer: void write(java.lang.String)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r9) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(10) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r16 = virtualinvoke $r23.<java.security.cert.CertificateEncodingException: java.lang.String getMessage()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.lang.Throwable: java.lang.String getMessage()>
SPECIAL edge: specialinvoke $r22.<java.io.IOException: void <init>(java.lang.String)>($r16) in <com.koushikdutta.async.http.ResponseCacheMiddleware$Entry: void writeCertArray(java.io.Writer,java.security.cert.Certificate[])> ==> <java.io.IOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])>($r5, $r4) in <com.koushikdutta.async.http.ResponseCacheMiddleware$EntryEditor: void commit()> ==> <com.koushikdutta.async.util.FileCache: void commitTempFiles(java.lang.String,java.io.File[])>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter$1: void <init>(com.koushikdutta.async.http.ResponseCacheMiddleware$CachedBodyEmitter)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.DataInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.FilterInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.BufferedInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.ByteArrayInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.ObjectInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.FileInputStream: int read(byte[],int,int)>
VIRTUAL edge: i1 = virtualinvoke $r3.<java.io.InputStream: int read(byte[],int,int)>($r2, 0, $i0) in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.InputStream: int read(byte[],int,int)>
SPECIAL edge: specialinvoke $r4.<java.io.EOFException: void <init>()>() in <com.koushikdutta.async.http.libcore.StrictLineReader: void fillBuf()> ==> <java.io.EOFException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.io.ByteArrayOutputStream: void <init>(int)>(i0) in <com.koushikdutta.async.http.libcore.StrictLineReader$1: void <init>(com.koushikdutta.async.http.libcore.StrictLineReader,int)> ==> <java.io.ByteArrayOutputStream: void <init>(int)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.io.File: java.io.File[] listFiles()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.io.File: java.io.File[] listFiles()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: r6 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r7 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: r9 = virtualinvoke r8.<java.io.File: java.lang.String getName()>() in <com.koushikdutta.async.util.FileCache: void load()> ==> <java.io.File: java.lang.String getName()>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)>(r0, r8) in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.util.FileCache$CacheEntry: void <init>(com.koushikdutta.async.util.FileCache,java.io.File)>
VIRTUAL edge: virtualinvoke $r12.<com.koushikdutta.async.util.FileCache$InternalCache: java.lang.Object put(java.lang.Object,java.lang.Object)>(r9, $r10) in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.util.FileCache$InternalCache: java.lang.Object get(java.lang.Object)>(r9) in <com.koushikdutta.async.util.FileCache: void load()> ==> <com.koushikdutta.async.util.LruCache: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: l0 = virtualinvoke r0.<com.koushikdutta.async.util.LruCache: long sizeOf(java.lang.Object,java.lang.Object)>(r1, r2) in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.LruCache: long sizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: l0 = virtualinvoke r0.<com.koushikdutta.async.util.LruCache: long sizeOf(java.lang.Object,java.lang.Object)>(r1, r2) in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: long sizeOf(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Negative size: ") in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("=") in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9) in <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)>(z0, $r6, $r5, $r4) in <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)>
CLINIT edge: $r5 = new java.io.File in <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)> ==> <java.io.File: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke $r10.<java.util.LinkedHashMap: boolean isEmpty()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.LinkedHashMap: boolean isEmpty()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: $l6 = specialinvoke r0.<com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>(r17, r18) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <com.koushikdutta.async.util.LruCache: long safeSizeOf(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(1, r17, r18, null) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(1, r17, r18, null) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.String getName()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.Class: java.lang.String getName()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".sizeOf() is reporting inconsistent results!") in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r9) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r11.<java.util.LinkedHashMap: boolean isEmpty()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.LinkedHashMap: boolean isEmpty()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.util.LinkedHashMap: java.util.Set entrySet()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.LinkedHashMap: java.util.Set entrySet()>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: $r14 = interfaceinvoke $r13.<java.util.Set: java.util.Iterator iterator()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.TreeSet: java.util.Iterator iterator()>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke $r14.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke $r19.<java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>(r17) in <com.koushikdutta.async.util.LruCache: void trimToSize(long)> ==> <java.util.LinkedHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>($r3) in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <javax.xml.transform.dom.DOMSource: void <init>(org.w3c.dom.Node)>
SPECIAL edge: specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>()>() in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <java.io.ByteArrayOutputStream: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>($r8) in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>
VIRTUAL edge: virtualinvoke $r7.<java.io.OutputStreamWriter: void flush()>() in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <java.io.OutputStreamWriter: void flush()>
SPECIAL edge: specialinvoke $r10.<javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>($r7) in <com.koushikdutta.async.http.body.DocumentBody: void prepare()> ==> <javax.xml.transform.stream.StreamResult: void <init>(java.io.Writer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.DocumentBody$1: void <init>(com.koushikdutta.async.http.body.DocumentBody,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.parser.DocumentParser$1: void <init>(com.koushikdutta.async.parser.DocumentParser)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.JSONArrayBody$1: void <init>(com.koushikdutta.async.http.body.JSONArrayBody,com.koushikdutta.async.callback.CompletedCallback)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RawHeaders getRawHeaders()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void pause()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void pause()>
VIRTUAL edge: $r25 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.body.AsyncHttpRequestBody getBody()>
VIRTUAL edge: $r41 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Expect") in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $z5 = virtualinvoke $r40.<java.lang.String: boolean equals(java.lang.Object)>($r41) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $r44 = virtualinvoke $r42.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r45.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>(" ") in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\?") in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>($r15) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: r34 = virtualinvoke r18.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: r39 = virtualinvoke $r38.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r37) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>
VIRTUAL edge: $z4 = virtualinvoke r39.<java.util.regex.Matcher: boolean matches()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <java.util.regex.Matcher: boolean matches()>
SPECIAL edge: specialinvoke $r19.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>(r0, $r20, r0) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
VIRTUAL edge: virtualinvoke $r23.<com.koushikdutta.async.http.server.AsyncHttpServer: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r22) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
VIRTUAL edge: virtualinvoke $r32.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>(404) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void responseCode(int)>
VIRTUAL edge: virtualinvoke $r33.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.JSONArrayBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.StreamBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.DocumentBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.FileBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.StringBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.JSONObjectBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody: boolean readFullyOnRequest()>
INTERFACE edge: $z1 = interfaceinvoke $r25.<com.koushikdutta.async.http.body.AsyncHttpRequestBody: boolean readFullyOnRequest()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody: boolean readFullyOnRequest()>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r30) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r30) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r30) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r31.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r30) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$5: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
INTERFACE edge: interfaceinvoke $r28.<com.koushikdutta.async.http.server.HttpServerRequestCallback: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>(r0, $r27) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onHeadersReceived()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$3: void onRequest(com.koushikdutta.async.http.server.AsyncHttpServerRequest,com.koushikdutta.async.http.server.AsyncHttpServerResponse)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)>($r4) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onAccepted(com.koushikdutta.async.AsyncSocket)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.LineEmitter: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.LineEmitter: void setLineCallback(com.koushikdutta.async.LineEmitter$StringCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.http.WebSocketImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.AsyncSocket: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void setSocket(com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.FilteredDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.BufferedDataSink: void write(java.nio.ByteBuffer)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(java.nio.ByteBuffer)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(java.nio.ByteBuffer)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r3.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeInternal(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
SPECIAL edge: specialinvoke $r18.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z2 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>("Transfer-Encoding") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void removeAll(java.lang.String)>
VIRTUAL edge: $z3 = virtualinvoke $r4.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Connection") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $z4 = virtualinvoke $r6.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.String: boolean equalsIgnoreCase(java.lang.String)>
VIRTUAL edge: r13 = virtualinvoke $r12.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Length") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
VIRTUAL edge: $l0 = virtualinvoke $r14.<java.lang.Long: long longValue()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <java.lang.Long: long longValue()>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Transfer-Encoding", "Chunked") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.filter.ChunkedOutputFilter: void <init>(com.koushikdutta.async.DataSink)>($r11) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.filter.ChunkedOutputFilter: void <init>(com.koushikdutta.async.DataSink)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void initFirstWrite()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()>
CLINIT edge: $z0 = <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: boolean $assertionsDisabled> in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r2, $r4, $r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void writeAll(com.koushikdutta.async.DataSink,byte[],com.koushikdutta.async.callback.CompletedCallback)>($r2, $r4, $r5) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <com.koushikdutta.async.Util: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onEnd()>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.http.WebSocketImpl: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.DataEmitterBase: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r1.<com.koushikdutta.async.AsyncSocket: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>(null) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void onEnd()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void setEndCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void access$100(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void handleOnCompleted()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl,java.io.InputStream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,int,javax.net.ssl.SSLContext)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$3: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.lang.String,com.koushikdutta.async.http.server.AsyncHttpServer$WebSocketRequestCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$5: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,android.content.Context,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer,java.io.File,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not http: ") in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.io.PrintStream: void println(java.lang.String)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.io.PrintStream: void println(java.lang.String)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("not http: ") in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String getStatusLine()>
VIRTUAL edge: $i0 = virtualinvoke $r12.<java.lang.String: int length()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.String: int length()>
VIRTUAL edge: $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r9.<java.io.PrintStream: void println(java.lang.String)>($r14) in <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: void onNotHttp()> ==> <java.io.PrintStream: void println(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$4,com.koushikdutta.async.http.server.AsyncHttpServerResponse,java.io.InputStream)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$2$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$2)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$6,com.koushikdutta.async.http.server.AsyncHttpServerResponse)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(i0, r0, r1, r2) in <com.koushikdutta.async.http.socketio.SocketIOClient: void emitRaw(int,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void emitRaw(int,com.koushikdutta.async.http.socketio.SocketIOClient,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: boolean isConnected()>
INTERFACE edge: $z1 = interfaceinvoke $r5.<com.koushikdutta.async.future.Cancellable: boolean isDone()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isDone()>
INTERFACE edge: $z2 = interfaceinvoke $r6.<com.koushikdutta.async.future.Cancellable: boolean isCancelled()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean isCancelled()>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r7) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r7) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r7) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable$1: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
INTERFACE edge: interfaceinvoke r2.<com.koushikdutta.async.future.DependentCancellable: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>($r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleCancellable$1: com.koushikdutta.async.future.DependentCancellable setParent(com.koushikdutta.async.future.Cancellable)>
VIRTUAL edge: virtualinvoke $r9.<com.koushikdutta.async.http.socketio.SocketIORequest: void logi(java.lang.String)>("Reconnecting socket.io") in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r10.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>($r11, null) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>
SPECIAL edge: specialinvoke $r13.<com.koushikdutta.async.http.socketio.SocketIOConnection$2: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
INTERFACE edge: $r14 = interfaceinvoke $r12.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>($r13) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.FutureCallback then(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke $r16.<com.koushikdutta.async.http.socketio.SocketIOConnection$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<com.koushikdutta.async.http.socketio.SocketIOConnection$2: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>($r16) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reconnect(com.koushikdutta.async.future.DependentCancellable)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setCallback(com.koushikdutta.async.future.FutureCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient$1: void <init>(com.koushikdutta.async.http.socketio.SocketIORequest,com.koushikdutta.async.http.socketio.ConnectCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.EventEmitter: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.ConnectCallback)> ==> <com.koushikdutta.async.http.socketio.EventEmitter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.EventEmitter$1: void <init>(com.koushikdutta.async.http.socketio.EventEmitter,com.koushikdutta.async.http.socketio.EventCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOClient$1$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOClient$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.util.ArrayList: void <init>()>() in <com.koushikdutta.async.util.HashList$TaggedList: void <init>(com.koushikdutta.async.util.HashList)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>(r1) in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.util.HashList: java.util.ArrayList get(java.lang.String)>
INTERFACE edge: r4 = interfaceinvoke r3.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<java.util.Iterator: void remove()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <android.text.TextUtils$SimpleStringSplitter: void remove()>
INTERFACE edge: interfaceinvoke r4.<java.util.Iterator: void remove()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: void remove()>
INTERFACE edge: interfaceinvoke r4.<java.util.Iterator: void remove()>() in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: void remove()>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.EventCallback: void onEvent(org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>(r7, r8) in <com.koushikdutta.async.http.socketio.EventEmitter: void onEvent(java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.EventEmitter$1: void onEvent(org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$11$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$11,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>($r3) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()> ==> <com.koushikdutta.async.http.AsyncHttpGet: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>(r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>($r1, $r4) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void doLongPolling()> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void close(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("5") in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <java.lang.String: boolean startsWith(java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r2.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>($r3) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpPost: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.http.AsyncHttpRequest: void setBody(com.koushikdutta.async.http.body.AsyncHttpRequestBody)>($r5) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void setBody(com.koushikdutta.async.http.body.AsyncHttpRequestBody)>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.body.StringBody: void <init>(java.lang.String)>(r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <com.koushikdutta.async.http.body.StringBody: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>($r1, null) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void postMessage(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future executeString(com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$StringCallback)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>("t", r0) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.net.Uri$Builder: android.net.Uri build()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: java.lang.String computedRequestUrl()> ==> <android.net.Uri$Builder: android.net.Uri build()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$StringCallback: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)> ==> <com.koushikdutta.async.http.AsyncHttpClient$StringCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.WebSocketTransport$1: void <init>(com.koushikdutta.async.http.socketio.transport.WebSocketTransport,com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.Thread: void <init>(java.lang.Runnable)>($r2) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()> ==> <java.lang.Thread: void <init>(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke $r0.<java.lang.Thread: void start()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r0.<java.lang.Thread: void start()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()> ==> <com.koushikdutta.async.AsyncServer$13: void run()>
THREAD edge: virtualinvoke $r0.<java.lang.Thread: void start()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()> ==> <com.koushikdutta.async.util.FileCache$2: void run()>
THREAD edge: virtualinvoke $r0.<java.lang.Thread: void start()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void doResume()> ==> <java.lang.Thread: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.stream.InputStreamDataEmitter$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>(r0, r3) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r1.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r2) in <com.koushikdutta.async.stream.InputStreamDataEmitter: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$2$2: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter$2)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$Scheduler: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$1: void <init>(com.koushikdutta.async.SelectorWrapper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ByteBufferList$Reclaimer: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>() in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: com.koushikdutta.async.ChannelWrapper getChannel()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>(r2, r5) in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void setup(com.koushikdutta.async.AsyncServer,java.nio.channels.SelectionKey)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>() in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.SelectorWrapper: java.nio.channels.Selector getSelector()>
VIRTUAL edge: r5 = virtualinvoke r1.<com.koushikdutta.async.ChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>($r4) in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.DatagramChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>
VIRTUAL edge: r5 = virtualinvoke r1.<com.koushikdutta.async.ChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>($r4) in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.SocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>
VIRTUAL edge: r5 = virtualinvoke r1.<com.koushikdutta.async.ChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>($r4) in <com.koushikdutta.async.AsyncServer: void handleSocket(com.koushikdutta.async.AsyncNetworkSocket)> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: java.nio.channels.SelectionKey register(java.nio.channels.Selector)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleCancellable: void <init>()>() in <com.koushikdutta.async.future.SimpleCancellable$1: void <init>()> ==> <com.koushikdutta.async.future.SimpleCancellable: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.future.SimpleCancellable$1: boolean setComplete()>() in <com.koushikdutta.async.future.SimpleCancellable$1: void <init>()> ==> <com.koushikdutta.async.future.SimpleCancellable: boolean setComplete()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.FilteredDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.WebSocketImpl: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.BufferedDataSink: void write(com.koushikdutta.async.ByteBufferList)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.DataSink: void write(com.koushikdutta.async.ByteBufferList)>($r4) in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void write(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.BufferedDataSink: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.stream.OutputStreamDataSink: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.WebSocketImpl: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: void end()>
INTERFACE edge: interfaceinvoke $r7.<com.koushikdutta.async.DataSink: void end()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.ZipDataSink: void end()>
VIRTUAL edge: $z2 = virtualinvoke $r8.<com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.ByteBufferList: boolean hasRemaining()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.Util$4: void onWriteable()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.BufferedDataSink$1: void onWriteable()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.Util$7: void onWriteable()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void onWriteable()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.WritableCallback: void onWriteable()>() in <com.koushikdutta.async.BufferedDataSink: void writePending()> ==> <com.koushikdutta.async.Util$2: void onWriteable()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.libcore.RawHeaders$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Style: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Cap: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Join: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Align: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Path$FillType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Path$Direction: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: $z1 = virtualinvoke $r30.<com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: boolean isAffinityThread()>
SPECIAL edge: specialinvoke $r31.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r29.<com.koushikdutta.async.http.RedirectLimitExceededException: void <init>(java.lang.String)>("too many redirects") in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.RedirectLimitExceededException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r5.<com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r6, $r29, null, r0, r7) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
SPECIAL edge: specialinvoke r5.<com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r6, $r12, null, r0, r7) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Executing request.") in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncHttpRequest: int getTimeout()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: int getTimeout()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData: void <init>()>
SPECIAL edge: specialinvoke $r25.<com.koushikdutta.async.http.AsyncHttpClient$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>(r5, $r2, r6, r0, r7) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)>
VIRTUAL edge: $r28 = virtualinvoke $r26.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>($r27, $l3) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.AsyncHttpClient$3: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.callback.HttpConnectCallback,android.net.Uri,int)>(r5, r0, r6, $r2, r7, r1, i0) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$3: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.callback.HttpConnectCallback,android.net.Uri,int)>
VIRTUAL edge: r11 = virtualinvoke $r10.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r21 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r21 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: r23 = interfaceinvoke r22.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>($r2) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.SimpleMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>
INTERFACE edge: r23 = interfaceinvoke r22.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>($r2) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>
INTERFACE edge: r23 = interfaceinvoke r22.<com.koushikdutta.async.http.AsyncHttpClientMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>($r2) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware: com.koushikdutta.async.future.Cancellable getSocket(com.koushikdutta.async.http.AsyncHttpClientMiddleware$GetSocketData)>
VIRTUAL edge: virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>(r23) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setParent(com.koushikdutta.async.future.Cancellable)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("invalid uri=") in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" middlewares=") in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r17) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r19) in <com.koushikdutta.async.http.AsyncHttpClient: void executeAffinity(com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>($r2) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.AsyncServer: void removeAllCallbacks(java.lang.Object)>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>("Connection error", r4) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>("Connection successful") in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logd(java.lang.String)>
VIRTUAL edge: z3 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean setComplete(java.lang.Exception)>(r4) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: z3 = virtualinvoke r1.<com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: boolean setComplete(java.lang.Object)>(r6) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.callback.HttpConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>(r4, r6) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.callback.HttpConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>(r4, r6) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$8: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>
INTERFACE edge: interfaceinvoke r8.<com.koushikdutta.async.http.callback.HttpConnectCallback: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>(r4, r6) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpClient$7: void onConnectCompleted(java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponse)>
VIRTUAL edge: $r9 = virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket getSocket()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.AsyncSocket getSocket()>
VIRTUAL edge: $r10 = virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpResponseImpl: com.koushikdutta.async.callback.DataCallback getDataCallback()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.DataEmitterBase: com.koushikdutta.async.callback.DataCallback getDataCallback()>
VIRTUAL edge: $z2 = virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpResponseImpl: boolean isPaused()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter: boolean isPaused()>
VIRTUAL edge: virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>($r7) in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.DataEmitterBase: void setDataCallback(com.koushikdutta.async.callback.DataCallback)>
VIRTUAL edge: virtualinvoke r6.<com.koushikdutta.async.http.AsyncHttpResponseImpl: void close()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
SPECIAL edge: specialinvoke $r11.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient: void reportConnectedCompleted(com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,java.lang.Exception,com.koushikdutta.async.http.AsyncHttpResponseImpl,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.ThreadLocal: void <init>()>() in <com.koushikdutta.async.http.libcore.HttpDate$1: void <init>()> ==> <java.lang.ThreadLocal: void <init>()>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.http.callback.RequestCallback: void onConnect(com.koushikdutta.async.http.AsyncHttpResponse)>(r1) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeConnect(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse)> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void onConnect(com.koushikdutta.async.http.AsyncHttpResponse)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncHttpClient$4: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>(r1, r2, r3, r4, r5, r6) in <com.koushikdutta.async.http.AsyncHttpClient: void invoke(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.AsyncHttpClient$4: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>($r0) in <com.koushikdutta.async.http.AsyncHttpClient: void invoke(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object post(java.lang.Runnable)>
VIRTUAL edge: z0 = virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>(r0) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Exception)>
VIRTUAL edge: z0 = virtualinvoke r1.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>(r2) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.callback.RequestCallback: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)>(r0, r4, r2) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r3.<com.koushikdutta.async.http.callback.RequestCallback: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)>(r0, r4, r2) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeWithAffinity(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$1: void onCompleted(java.lang.Exception,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.http.libcore.ResponseSource: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
INTERFACE edge: interfaceinvoke r0.<com.koushikdutta.async.http.callback.RequestCallback: void onProgress(com.koushikdutta.async.http.AsyncHttpResponse,long,long)>(r1, l0, l1) in <com.koushikdutta.async.http.AsyncHttpClient: void invokeProgress(com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.http.AsyncHttpResponse,long,long)> ==> <com.koushikdutta.async.http.AsyncHttpClient$RequestCallbackBase: void onProgress(com.koushikdutta.async.http.AsyncHttpResponse,long,long)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.Hashtable: java.lang.Object get(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<com.koushikdutta.async.ArrayDeque: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.koushikdutta.async.ArrayDeque: java.lang.Object peekLast()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object peekLast()>
VIRTUAL edge: virtualinvoke $r14.<com.koushikdutta.async.ArrayDeque: java.lang.Object pop()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.ArrayDeque: java.lang.Object pop()>
INTERFACE edge: interfaceinvoke r13.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke r13.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke r13.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke r13.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke r13.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
VIRTUAL edge: $z1 = virtualinvoke $r6.<com.koushikdutta.async.ArrayDeque: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $z2 = virtualinvoke $r7.<com.koushikdutta.async.ArrayDeque: boolean isEmpty()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <com.koushikdutta.async.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r8.<java.util.Hashtable: java.lang.Object remove(java.lang.Object)>(r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware: void maybeCleanupConnectionInfo(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>("RSV not zero") in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
INTERFACE edge: $z4 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r4) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z4 = interfaceinvoke $r3.<java.util.List: boolean contains(java.lang.Object)>($r4) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>("Bad opcode") in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
INTERFACE edge: $z5 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r6) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z5 = interfaceinvoke $r5.<java.util.List: boolean contains(java.lang.Object)>($r6) in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>("Expected non-final packet") in <com.koushikdutta.async.http.HybiParser: void parseOpcode(byte)> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
SPECIAL edge: r15 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])>
SPECIAL edge: $r11 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>(r17) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onMessage(java.lang.String)>($r11) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onMessage(byte[])>(r17) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(byte[])>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void reset()>() in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: void reset()>
SPECIAL edge: r18 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onMessage(java.lang.String)>(r18) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onMessage(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(byte[])>
SPECIAL edge: $r6 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] slice(byte[],int)>(r15, 2) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: byte[] slice(byte[],int)>
SPECIAL edge: $r19 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>($r6) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onDisconnect(int,java.lang.String)>(i12, $r19) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)>
SPECIAL edge: $r3 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>(10, r15, -1) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: byte[] frame(int,byte[],int)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void sendFrame(byte[])>($r3) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void sendFrame(byte[])>
SPECIAL edge: r20 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.HybiParser: void onPong(java.lang.String)>(r20) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.WebSocketImpl$1: void onPong(java.lang.String)>
SPECIAL edge: specialinvoke $r14.<java.io.IOException: void <init>(java.lang.String)>("Invalid deflated data") in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <java.io.IOException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>("Mode was not set.") in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r9.<java.io.ByteArrayOutputStream: void write(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: r17 = virtualinvoke $r10.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
VIRTUAL edge: virtualinvoke $r8.<java.io.ByteArrayOutputStream: void write(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <java.io.OutputStream: void write(byte[])>
VIRTUAL edge: virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(byte[])>(r15) in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <java.io.OutputStream: void write(byte[])>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>("Ping payload too large") in <com.koushikdutta.async.http.HybiParser: void emitFrame()> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
CLINIT edge: $r0 = new java.lang.String in <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$StringCallback access$100(com.koushikdutta.async.http.WebSocketImpl)>($r1) in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$StringCallback access$100(com.koushikdutta.async.http.WebSocketImpl)>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$StringCallback access$100(com.koushikdutta.async.http.WebSocketImpl)>($r3) in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$StringCallback access$100(com.koushikdutta.async.http.WebSocketImpl)>
CLINIT edge: $r1 = new com.koushikdutta.async.ByteBufferList in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(byte[])> ==> <com.koushikdutta.async.ByteBufferList: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.http.WebSocketImpl: void access$000(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.ByteBufferList)>($r3, $r1) in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(byte[])> ==> <com.koushikdutta.async.http.WebSocketImpl: void access$000(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i4) in <com.koushikdutta.async.http.HybiParser: byte[] slice(byte[],int)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r0, i0, r1, 0, $i4) in <com.koushikdutta.async.http.HybiParser: byte[] slice(byte[],int)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.WebSocketImpl)>($r1) in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.AsyncSocket access$200(com.koushikdutta.async.http.WebSocketImpl)>
STATIC edge: $r2 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$PongCallback access$300(com.koushikdutta.async.http.WebSocketImpl)>($r1) in <com.koushikdutta.async.http.WebSocketImpl$1: void onPong(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$PongCallback access$300(com.koushikdutta.async.http.WebSocketImpl)>
STATIC edge: $r4 = staticinvoke <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$PongCallback access$300(com.koushikdutta.async.http.WebSocketImpl)>($r3) in <com.koushikdutta.async.http.WebSocketImpl$1: void onPong(java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: com.koushikdutta.async.http.WebSocket$PongCallback access$300(com.koushikdutta.async.http.WebSocketImpl)>
SPECIAL edge: $i0 = specialinvoke r0.<com.koushikdutta.async.http.HybiParser: int getInteger(byte[])>(r1) in <com.koushikdutta.async.http.HybiParser: void parseExtendedLength(byte[])> ==> <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])>
CLINIT edge: l1 = staticinvoke <com.koushikdutta.async.http.HybiParser: long byteArrayToLong(byte[],int,int)>(r0, 0, $i0) in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <com.koushikdutta.async.http.HybiParser: void <clinit>()>
STATIC edge: l1 = staticinvoke <com.koushikdutta.async.http.HybiParser: long byteArrayToLong(byte[],int,int)>(r0, 0, $i0) in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <com.koushikdutta.async.http.HybiParser: long byteArrayToLong(byte[],int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.koushikdutta.async.http.filter.ChunkedInputFilter$State: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>(r0) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()> ==> <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)>
VIRTUAL edge: virtualinvoke $r5.<com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>(2, $r4) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()> ==> <com.koushikdutta.async.PushParser: com.koushikdutta.async.PushParser readByteArray(int,com.koushikdutta.async.PushParser$ParseCallback)>
VIRTUAL edge: virtualinvoke $r3.<com.koushikdutta.async.http.filter.GZIPInputFilter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>($r2) in <com.koushikdutta.async.http.filter.GZIPInputFilter$1: void done()> ==> <com.koushikdutta.async.FilteredDataEmitter: void setDataEmitter(com.koushikdutta.async.DataEmitter)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: void report(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.util.regex.Matcher: java.lang.String group(int)>(0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String replacePrefix(java.util.regex.Matcher)> ==> <java.util.regex.Matcher: java.lang.String group(int)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.util.regex.Matcher: int end(int)>(1) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String replacePrefix(java.util.regex.Matcher)> ==> <java.util.regex.Matcher: int end(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.String: java.lang.String substring(int)>($i0) in <com.koushikdutta.async.http.server.AsyncHttpServer: java.lang.String replacePrefix(java.util.regex.Matcher)> ==> <java.lang.String: java.lang.String substring(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Region$Op: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.http.socketio.SocketIORequest: void loge(java.lang.String,java.lang.Exception)>("socket.io disconnected", r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void loge(java.lang.String,java.lang.Exception)>
VIRTUAL edge: virtualinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIORequest: void logi(java.lang.String)>("socket.io disconnected") in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: void logi(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.http.socketio.SocketIOConnection$5: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>(r1, r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(null, $r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
SPECIAL edge: specialinvoke r1.<com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportDisconnect(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()>
STATIC edge: $l9 = staticinvoke <java.lang.Math: long min(long,long)>($l8, $l7) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <java.lang.Math: long min(long,long)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean heartbeats()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: boolean heartbeats()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: boolean heartbeats()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: boolean heartbeats()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void setupHeartbeat()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void setupHeartbeat()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(null, $r6) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$12: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>($r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void setClosedCallback(com.koushikdutta.async.callback.CompletedCallback)>
SPECIAL edge: specialinvoke $r4.<com.koushikdutta.async.http.socketio.SocketIOConnection$13: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>($r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>($r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void setStringCallback(com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback)>
SPECIAL edge: specialinvoke $r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$14: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void attach()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$10: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$7: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$8: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$9: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
INTERFACE edge: interfaceinvoke r6.<com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>(r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$11$1: void onSelect(com.koushikdutta.async.http.socketio.SocketIOClient)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$10: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)>(r0, r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportError(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$10: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportError(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$9: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>(r0, r3, r4, r5) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportEvent(java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$9: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportEvent(java.lang.String,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("\\+$", "") in <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)> ==> <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$11: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>(r3, r4, r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: com.koushikdutta.async.http.socketio.Acknowledge acknowledge(java.lang.String,java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$7: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>(r0, r3, r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportJson(java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$7: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportJson(java.lang.String,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$8: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>(r0, r3, r4) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportString(java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$8: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportString(java.lang.String,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$6: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportConnect(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>(r1, $r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void reportConnect(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: void select(java.lang.String,com.koushikdutta.async.http.socketio.SocketIOConnection$SelectCallback)>
VIRTUAL edge: $z0 = virtualinvoke r2.<java.lang.String: boolean contains(java.lang.CharSequence)>("\ufffd") in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)> ==> <java.lang.String: boolean contains(java.lang.CharSequence)>
VIRTUAL edge: r3 = virtualinvoke r2.<java.lang.String: java.lang.String[] split(java.lang.String)>("\ufffd") in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
INTERFACE edge: interfaceinvoke $r6.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback: void onStringAvailable(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)>
INTERFACE edge: interfaceinvoke $r5.<com.koushikdutta.async.http.socketio.transport.SocketIOTransport$StringCallback: void onStringAvailable(java.lang.String)>($r4) in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void sendResult(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void onStringAvailable(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(1) in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
VIRTUAL edge: $r6 = virtualinvoke r2.<java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.SecurityManager: java.lang.ThreadGroup getThreadGroup()>
VIRTUAL edge: $r6 = virtualinvoke $r3.<java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>() in <com.koushikdutta.async.AsyncServer$NamedThreadFactory: void <init>(java.lang.String)> ==> <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.util.Allocator: void <init>()>() in <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)> ==> <com.koushikdutta.async.util.Allocator: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.SocketChannelWrapper: void <init>(java.nio.channels.SocketChannel)>(r4) in <com.koushikdutta.async.AsyncNetworkSocket: void attach(java.nio.channels.SocketChannel,java.net.InetSocketAddress)> ==> <com.koushikdutta.async.SocketChannelWrapper: void <init>(java.nio.channels.SocketChannel)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void spitPending()>() in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void spitPending()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>() in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>(null) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>(null) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>() in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void closeInternal()>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>($r8) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportEndPending(java.lang.Exception)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>($r8) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.AsyncNetworkSocket: void reportClose(java.lang.Exception)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>() in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.util.Allocator: java.nio.ByteBuffer allocate()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.ChannelWrapper: int read(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.DatagramChannelWrapper: int read(java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.ChannelWrapper: int read(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.SocketChannelWrapper: int read(java.nio.ByteBuffer)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.koushikdutta.async.ChannelWrapper: int read(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.ServerSocketChannelWrapper: int read(java.nio.ByteBuffer)>
VIRTUAL edge: virtualinvoke $r4.<com.koushikdutta.async.util.Allocator: void track(long)>(l1) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.util.Allocator: void track(long)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: int onReadable()> ==> <com.koushikdutta.async.ByteBufferList: void add(java.nio.ByteBuffer)>
SPECIAL edge: specialinvoke $r14.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void checkInvariants()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r15.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void checkInvariants()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.ArrayDeque: void checkInvariants()> ==> <java.lang.AssertionError: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DeqIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ArrayDeque$DescendingIterator: void <init>(com.koushikdutta.async.ArrayDeque)> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.stream.OutputStreamDataCallback: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.future.Continuation$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.Util$5: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.Util$6: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$4$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpResponseImpl$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.Util$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.BufferedDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.FilteredDataEmitter$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.MultipartFormDataBody$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncHttpClient$6$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2$1$2: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl$1: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.parser.ByteBufferListParser$3: void onCompleted(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r3.<com.koushikdutta.async.callback.CompletedCallback: void onCompleted(java.lang.Exception)>(r2) in <com.koushikdutta.async.AsyncNetworkSocket: void reportEnd(java.lang.Exception)> ==> <com.koushikdutta.async.http.body.UrlEncodedFormBody$2: void onCompleted(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$RunnableWrapper: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>(java.lang.String)>(r4) in <com.koushikdutta.async.AsyncServer$13: void <init>(com.koushikdutta.async.AsyncServer,java.lang.String,com.koushikdutta.async.SelectorWrapper,java.util.PriorityQueue)> ==> <java.lang.Thread: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>($r3) in <com.koushikdutta.async.AsyncServer: boolean addMe()> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r8.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r2) in <com.koushikdutta.async.AsyncServer: boolean addMe()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$ObjectHolder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer)>(r1) in <com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$1)> ==> <com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncServer$6: void <init>(com.koushikdutta.async.AsyncServer,com.koushikdutta.async.AsyncServer$ConnectFuture,com.koushikdutta.async.callback.ConnectCallback,java.net.InetSocketAddress)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>(r1) in <com.koushikdutta.async.DatagramChannelWrapper: void <init>(java.nio.channels.DatagramChannel)> ==> <com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<java.lang.String: java.lang.String[] split(java.lang.String)>(":") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r8 = virtualinvoke r7.<java.lang.String: java.lang.String[] split(java.lang.String)>(",") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.lang.String: java.lang.String[] split(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.util.HashSet: void <init>(java.util.Collection)>($r10) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.util.HashSet: void <init>(java.util.Collection)>
VIRTUAL edge: $z1 = virtualinvoke $r9.<java.util.HashSet: boolean contains(java.lang.Object)>("websocket") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r9.<java.util.HashSet: boolean contains(java.lang.Object)>("xhr-polling") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r12.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>($r24) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: $r31 = virtualinvoke $r30.<com.koushikdutta.async.http.socketio.SocketIORequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r35 = virtualinvoke $r34.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("websocket") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
VIRTUAL edge: $r36 = virtualinvoke $r35.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
VIRTUAL edge: $r37 = virtualinvoke $r36.<android.net.Uri$Builder: android.net.Uri build()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri build()>
VIRTUAL edge: $r40 = virtualinvoke $r39.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)>(r45, null, null) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.future.Future websocket(java.lang.String,java.lang.String,com.koushikdutta.async.http.AsyncHttpClient$WebSocketConnectCallback)>
SPECIAL edge: specialinvoke $r41.<com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$2,com.koushikdutta.async.future.SimpleFuture,java.lang.String)>(r5, $r12, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$2,com.koushikdutta.async.future.SimpleFuture,java.lang.String)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r41) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
INTERFACE edge: interfaceinvoke $r40.<com.koushikdutta.async.future.Future: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>($r41) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.HandlerFuture: com.koushikdutta.async.future.Future setCallback(com.koushikdutta.async.future.FutureCallback)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<com.koushikdutta.async.http.socketio.SocketIORequest: android.net.Uri getUri()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.AsyncHttpRequest: android.net.Uri getUri()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>("xhr-polling") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>(r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<android.net.Uri$Builder: android.net.Uri build()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <android.net.Uri$Builder: android.net.Uri build()>
SPECIAL edge: specialinvoke $r24.<com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)>($r26, r46, r2) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport: void <init>(com.koushikdutta.async.http.AsyncHttpClient,java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke $r14.<com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>("transport not supported") in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.SocketIOException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r5.<com.koushikdutta.async.http.socketio.SocketIOConnection$2: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)>($r12) in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: com.koushikdutta.async.future.SimpleFuture setComplete(com.koushikdutta.async.future.Future)>
SPECIAL edge: specialinvoke $r3.<com.koushikdutta.async.stream.ByteBufferListInputStream: void <init>(com.koushikdutta.async.ByteBufferList)>(r4) in <com.koushikdutta.async.parser.DocumentParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.stream.ByteBufferListInputStream: void <init>(com.koushikdutta.async.ByteBufferList)>
VIRTUAL edge: virtualinvoke r2.<com.koushikdutta.async.parser.DocumentParser$1: boolean setComplete(java.lang.Object)>($r5) in <com.koushikdutta.async.parser.DocumentParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)>($r7) in <com.koushikdutta.async.parser.StringParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: java.lang.String readString(java.nio.charset.Charset)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.StringParser$1: boolean setComplete(java.lang.Object)>($r3) in <com.koushikdutta.async.parser.StringParser$1: void transform(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1)>(r2) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>($r1) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.future.Continuation: void <init>(com.koushikdutta.async.callback.CompletedCallback)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>($r8) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation add(com.koushikdutta.async.callback.ContinuationCallback)>
VIRTUAL edge: virtualinvoke $r0.<com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.future.Continuation start()>
SPECIAL edge: specialinvoke $r8.<com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1,java.net.InetAddress)>(r2, r7) in <com.koushikdutta.async.http.AsyncSocketMiddleware$1: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1,java.net.InetAddress)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.AsyncServer$9: boolean setComplete(java.lang.Object)>($r2) in <com.koushikdutta.async.AsyncServer$9: void transform(java.net.InetAddress[])> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<org.json.JSONArray: void <init>(java.lang.String)>(r2) in <com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.String)> ==> <org.json.JSONArray: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONArrayParser$1: boolean setComplete(java.lang.Object)>($r1) in <com.koushikdutta.async.parser.JSONArrayParser$1: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<org.json.JSONObject: void <init>(java.lang.String)>(r2) in <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.String)> ==> <org.json.JSONObject: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.parser.JSONObjectParser$1: boolean setComplete(java.lang.Object)>($r1) in <com.koushikdutta.async.parser.JSONObjectParser$1: void transform(java.lang.String)> ==> <com.koushikdutta.async.future.SimpleFuture: boolean setComplete(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$3: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.AsyncSSLSocketWrapper$4: void <init>(com.koushikdutta.async.AsyncSSLSocketWrapper,com.koushikdutta.async.ByteBufferList,com.koushikdutta.async.util.Allocator)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.future.Continuation$2: void <init>(com.koushikdutta.async.future.Continuation)>(r1) in <com.koushikdutta.async.future.Continuation: com.koushikdutta.async.callback.CompletedCallback wrap()> ==> <com.koushikdutta.async.future.Continuation$2: void <init>(com.koushikdutta.async.future.Continuation)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse: void <init>(com.koushikdutta.async.http.AsyncHttpClient)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$1: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,int,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ArrayDeque: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()> ==> <com.koushikdutta.async.ArrayDeque: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.ArrayDeque: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$ConnectionInfo: void <init>()> ==> <com.koushikdutta.async.ArrayDeque: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,boolean,com.koushikdutta.async.callback.ConnectCallback,android.net.Uri,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$3: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$4: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.AsyncSocket)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware,com.koushikdutta.async.ArrayDeque,com.koushikdutta.async.http.AsyncSocketMiddleware$IdleSocketHolder,com.koushikdutta.async.AsyncSocket,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$1: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$2: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)>(r2) in <com.koushikdutta.async.http.WebSocketImpl$1: void <init>(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.DataEmitter)> ==> <com.koushikdutta.async.http.HybiParser: void <init>(com.koushikdutta.async.DataEmitter)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLContext getSSLContext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLContext getSSLContext()>
VIRTUAL edge: r2 = virtualinvoke r1.<javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <javax.net.ssl.SSLContext: javax.net.ssl.SSLEngine createSSLEngine()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: javax.net.ssl.SSLEngine createConfiguredSSLEngine(java.lang.String,int)> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,com.koushikdutta.async.callback.ConnectCallback)>(r1, r2) in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware: com.koushikdutta.async.AsyncSSLSocketWrapper$HandshakeCallback createHandshakeCallback(com.koushikdutta.async.callback.ConnectCallback)> ==> <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,com.koushikdutta.async.callback.ConnectCallback)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.NullDataCallback: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpResponseImpl$5: void <init>(com.koushikdutta.async.http.AsyncHttpResponseImpl)> ==> <com.koushikdutta.async.NullDataCallback: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.String: byte[] getBytes(java.lang.String)>("UTF-8") in <com.koushikdutta.async.http.HybiParser: byte[] decode(java.lang.String)> ==> <java.lang.String: byte[] getBytes(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.koushikdutta.async.http.HybiParser: byte[] decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" was expected, got ") in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>($r6) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <com.koushikdutta.async.http.filter.ChunkedDataException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>($r1) in <com.koushikdutta.async.http.filter.ChunkedInputFilter: boolean checkByte(char,char)> ==> <com.koushikdutta.async.http.filter.ChunkedInputFilter: void report(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.body.MultipartFormDataBody$1: void <init>(com.koushikdutta.async.http.body.MultipartFormDataBody,com.koushikdutta.async.http.libcore.RawHeaders)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$2: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.FilteredDataEmitter: void <init>()>() in <com.koushikdutta.async.http.ResponseCacheMiddleware$BodyCacher: void <init>()> ==> <com.koushikdutta.async.FilteredDataEmitter: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <com.koushikdutta.async.util.FileCache$2: void <init>(com.koushikdutta.async.util.FileCache)> ==> <java.lang.Thread: void <init>()>
VIRTUAL edge: $l0 = virtualinvoke r0.<com.koushikdutta.async.util.FileCache$InternalCache: long sizeOf(java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry)>($r4, $r3) in <com.koushikdutta.async.util.FileCache$InternalCache: long sizeOf(java.lang.Object,java.lang.Object)> ==> <com.koushikdutta.async.util.FileCache$InternalCache: long sizeOf(java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry)>
STATIC edge: $l2 = staticinvoke <java.lang.Math: long max(long,long)>($l1, $l0) in <com.koushikdutta.async.util.FileCache$InternalCache: long sizeOf(java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry)> ==> <java.lang.Math: long max(long,long)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>(z0, r1, r2, r3) in <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)> ==> <com.koushikdutta.async.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<java.io.File: void <init>(java.io.File,java.lang.String)>($r7, r1) in <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)> ==> <java.io.File: void <init>(java.io.File,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<java.io.File: boolean delete()>() in <com.koushikdutta.async.util.FileCache$InternalCache: void entryRemoved(boolean,java.lang.String,com.koushikdutta.async.util.FileCache$CacheEntry,com.koushikdutta.async.util.FileCache$CacheEntry)> ==> <java.io.File: boolean delete()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>(r2, r3) in <com.koushikdutta.async.http.server.AsyncHttpServer$1$1$2: void <init>(com.koushikdutta.async.http.server.AsyncHttpServer$1$1,com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)>
CLINIT edge: $r1 = new com.koushikdutta.async.http.libcore.RawHeaders in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>($r7) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.HttpUtil: boolean isKeepAlive(com.koushikdutta.async.http.libcore.RawHeaders)>
SPECIAL edge: specialinvoke $r6.<java.lang.AssertionError: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <java.lang.AssertionError: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String toHeaderString()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.String: byte[] getBytes()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <java.lang.String: byte[] getBytes()>
SPECIAL edge: specialinvoke $r5.<com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)>(r0) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void writeHeadInternal()> ==> <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServer$Pair: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>("Content-Type") in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: java.lang.String get(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(java.lang.String)>($r2) in <com.koushikdutta.async.http.server.AsyncHttpServer: com.koushikdutta.async.http.body.AsyncHttpRequestBody onUnknownBody(com.koushikdutta.async.http.libcore.RawHeaders)> ==> <com.koushikdutta.async.http.server.UnknownRequestBody: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.TransformFuture: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <com.koushikdutta.async.future.TransformFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.AsyncHttpClient$StringCallback: void <init>()>() in <com.koushikdutta.async.http.socketio.transport.XHRPollingTransport$2: void <init>(com.koushikdutta.async.http.socketio.transport.XHRPollingTransport)> ==> <com.koushikdutta.async.http.AsyncHttpClient$StringCallback: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.stream.InputStreamDataEmitter$1: void <init>(com.koushikdutta.async.stream.InputStreamDataEmitter,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$2: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.callback.HttpConnectCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$3: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.AsyncHttpRequest,com.koushikdutta.async.http.AsyncHttpClient$FutureAsyncHttpResponse,com.koushikdutta.async.http.AsyncHttpClientMiddleware$OnRequestCompleteData,com.koushikdutta.async.http.callback.HttpConnectCallback,android.net.Uri,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncHttpClient$4: void <init>(com.koushikdutta.async.http.AsyncHttpClient,com.koushikdutta.async.http.callback.RequestCallback,com.koushikdutta.async.future.SimpleFuture,com.koushikdutta.async.http.AsyncHttpResponse,java.lang.Exception,java.lang.Object)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.io.ByteArrayOutputStream: void <init>()>() in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.io.ByteArrayOutputStream: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r15, 0, i0) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: virtualinvoke $r0.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>($r12, 0, i1) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.io.ByteArrayOutputStream: void write(byte[],int,int)>
VIRTUAL edge: $r9 = virtualinvoke $r0.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.io.ByteArrayOutputStream: byte[] toByteArray()>
VIRTUAL edge: virtualinvoke $r4.<java.util.zip.Inflater: void setInput(byte[])>(r3) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: void setInput(byte[])>
VIRTUAL edge: $z0 = virtualinvoke $r5.<java.util.zip.Inflater: boolean needsInput()>() in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: boolean needsInput()>
VIRTUAL edge: i0 = virtualinvoke $r14.<java.util.zip.Inflater: int inflate(byte[])>($r13) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: int inflate(byte[])>
VIRTUAL edge: virtualinvoke $r7.<java.util.zip.Inflater: void setInput(byte[])>($r6) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: void setInput(byte[])>
VIRTUAL edge: $z1 = virtualinvoke $r8.<java.util.zip.Inflater: boolean needsInput()>() in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: boolean needsInput()>
VIRTUAL edge: i1 = virtualinvoke $r11.<java.util.zip.Inflater: int inflate(byte[])>($r10) in <com.koushikdutta.async.http.HybiParser: byte[] inflate(byte[])> ==> <java.util.zip.Inflater: int inflate(byte[])>
SPECIAL edge: specialinvoke $r0.<java.lang.String: void <init>(byte[],java.lang.String)>(r1, "UTF-8") in <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])> ==> <java.lang.String: void <init>(byte[],java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.koushikdutta.async.http.HybiParser: java.lang.String encode(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
INTERFACE edge: interfaceinvoke $r4.<com.koushikdutta.async.http.WebSocket$StringCallback: void onStringAvailable(java.lang.String)>(r5) in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(java.lang.String)> ==> <com.koushikdutta.async.http.socketio.transport.WebSocketTransport$1: void onStringAvailable(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.ByteBufferList: void <init>(byte[])>(r2) in <com.koushikdutta.async.http.WebSocketImpl$1: void onMessage(byte[])> ==> <com.koushikdutta.async.ByteBufferList: void <init>(byte[])>
VIRTUAL edge: virtualinvoke $r1.<java.io.ByteArrayOutputStream: void reset()>() in <com.koushikdutta.async.http.HybiParser: void reset()> ==> <java.io.ByteArrayOutputStream: void reset()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.http.WebSocketImpl: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.http.ResponseCacheMiddleware$CachedSocket: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.AsyncNetworkSocket: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.AsyncSSLSocketWrapper: void close()>
INTERFACE edge: interfaceinvoke $r2.<com.koushikdutta.async.AsyncSocket: void close()>() in <com.koushikdutta.async.http.WebSocketImpl$1: void onDisconnect(int,java.lang.String)> ==> <com.koushikdutta.async.FilteredDataEmitter: void close()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)>(r1) in <com.koushikdutta.async.http.WebSocketImpl: void access$000(com.koushikdutta.async.http.WebSocketImpl,com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r8) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r9) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
STATIC edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r8) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>
CLINIT edge: staticinvoke <com.koushikdutta.async.Util: void emitAllData(com.koushikdutta.async.DataEmitter,com.koushikdutta.async.ByteBufferList)>(r0, r9) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.Util: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad integer: ") in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l1) in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>($r5) in <com.koushikdutta.async.http.HybiParser: int getInteger(byte[])> ==> <com.koushikdutta.async.http.HybiParser$ProtocolError: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("length must be less than or equal to b.length") in <com.koushikdutta.async.http.HybiParser: long byteArrayToLong(byte[],int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.filter.GZIPInputFilter$1$3: void <init>(com.koushikdutta.async.http.filter.GZIPInputFilter$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$5: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.Exception)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: r4 = virtualinvoke $r3.<java.util.ArrayList: java.util.Iterator iterator()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: boolean hasNext()>
INTERFACE edge: $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.ArrayDeque$DeqIterator: java.lang.Object next()>
INTERFACE edge: $r13 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.ArrayDeque$DescendingIterator: java.lang.Object next()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.http.AsyncHttpClient: com.koushikdutta.async.AsyncServer getServer()>
SPECIAL edge: specialinvoke $r7.<com.koushikdutta.async.http.socketio.SocketIOConnection$4: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>(r0) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)>
SPECIAL edge: $l2 = specialinvoke r0.<com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>($l1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)>
VIRTUAL edge: virtualinvoke $r6.<com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>($r7, $l2) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void delayReconnect()> ==> <com.koushikdutta.async.AsyncServer: java.lang.Object postDelayed(java.lang.Runnable,long)>
STATIC edge: $d1 = staticinvoke <java.lang.Math: double random()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: long nextReconnectDelay(long)> ==> <java.lang.Math: double random()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.socketio.SocketIOConnection$3: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)>(r0, r1) in <com.koushikdutta.async.http.socketio.SocketIOConnection: void setupHeartbeat()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)>
INTERFACE edge: interfaceinvoke $r2.<java.lang.Runnable: void run()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection: void setupHeartbeat()> ==> <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$12: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$13: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$14: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$10: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$9: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,org.json.JSONArray,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$11: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$7: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,org.json.JSONObject,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$8: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,java.lang.String,com.koushikdutta.async.http.socketio.Acknowledge)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$6: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>(r1) in <com.koushikdutta.async.SocketChannelWrapper: void <init>(java.nio.channels.SocketChannel)> ==> <com.koushikdutta.async.ChannelWrapper: void <init>(java.nio.channels.spi.AbstractSelectableChannel)>
SPECIAL edge: specialinvoke r0.<com.koushikdutta.async.future.SimpleFuture: void <init>()>() in <com.koushikdutta.async.AsyncServer$ConnectFuture: void <init>(com.koushikdutta.async.AsyncServer)> ==> <com.koushikdutta.async.future.SimpleFuture: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$2$1: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection$2,com.koushikdutta.async.future.SimpleFuture,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$1: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSocketMiddleware$1$2: void <init>(com.koushikdutta.async.http.AsyncSocketMiddleware$1,java.net.InetAddress)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.future.Continuation$2: void <init>(com.koushikdutta.async.future.Continuation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.AsyncSSLSocketMiddleware$1: void <init>(com.koushikdutta.async.http.AsyncSSLSocketMiddleware,com.koushikdutta.async.callback.ConnectCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>(null, $r3) in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.libcore.ResponseHeaders: void <init>(android.net.Uri,com.koushikdutta.async.http.libcore.RawHeaders)>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl: com.koushikdutta.async.http.libcore.RequestHeaders getHeaders()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.libcore.RequestHeaders: com.koushikdutta.async.http.libcore.RawHeaders getHeaders()>
VIRTUAL edge: virtualinvoke $r8.<com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>("Connection", "Keep-Alive") in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl: void <init>(com.koushikdutta.async.AsyncSocket,com.koushikdutta.async.http.server.AsyncHttpServerRequestImpl)> ==> <com.koushikdutta.async.http.libcore.RawHeaders: void set(java.lang.String,java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl$1: void <init>(com.koushikdutta.async.http.server.AsyncHttpServerResponseImpl)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke r8.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
SPECIAL edge: specialinvoke $r6.<java.util.LinkedList: void <init>()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: void <init>()>
VIRTUAL edge: virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r8) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ThreadQueue: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r7.<java.util.LinkedList: boolean add(java.lang.Object)>(r8) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.http.WebSocketImpl: boolean isPaused()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object remove()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ThreadQueue: java.lang.Object remove()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.LinkedList: java.lang.Object remove()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: java.lang.Object remove()>
VIRTUAL edge: $i1 = virtualinvoke r9.<com.koushikdutta.async.ByteBufferList: int remaining()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <com.koushikdutta.async.ByteBufferList: int remaining()>
VIRTUAL edge: virtualinvoke $r5.<java.util.LinkedList: void add(int,java.lang.Object)>(0, r9) in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: void add(int,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.LinkedList: int size()>() in <com.koushikdutta.async.http.WebSocketImpl: void addAndEmit(com.koushikdutta.async.ByteBufferList)> ==> <java.util.LinkedList: int size()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$4: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.koushikdutta.async.http.socketio.SocketIOConnection$3: void <init>(com.koushikdutta.async.http.socketio.SocketIOConnection,com.koushikdutta.async.http.socketio.transport.SocketIOTransport)> ==> <java.lang.Object: void <init>()>
