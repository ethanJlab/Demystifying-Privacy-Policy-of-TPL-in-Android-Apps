FINALIZE edge: null in <java.lang.Object: void <init>()> ==> <java.lang.Object: void finalize()>
CLINIT edge: $z0 = <com.facebook.litho.AccessibilityUtils: boolean ACCESSIBILITY_ENABLED> in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <com.facebook.litho.AccessibilityUtils: void <clinit>()>
STATIC edge: $z2 = staticinvoke <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager)>(r2) in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager)>
FINALIZE edge: null in <android.graphics.ColorFilter: void <init>()> ==> <android.graphics.ColorFilter: void finalize()>
CLINIT edge: $r0 = <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] $VALUES> in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.graphics.PorterDuff$Mode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/PorterDuff$Mode;", r0) in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Region: void <init>()> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.graphics.Region: void <init>(int,int,int,int)> ==> <android.graphics.Region: void finalize()>
FINALIZE edge: null in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <android.os.ParcelFileDescriptor: void finalize()>
CLINIT edge: $r0 = <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] $VALUES> in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.graphics.Bitmap$Config: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Bitmap$Config;", r0) in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Matrix: void <init>()> ==> <android.graphics.Matrix: void finalize()>
FINALIZE edge: null in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <android.graphics.Matrix: void finalize()>
CLINIT edge: $r0 = <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] $VALUES> in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.graphics.Bitmap$CompressFormat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Bitmap$CompressFormat;", r0) in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Paint: void <init>()> ==> <android.graphics.Paint: void finalize()>
FINALIZE edge: null in <android.graphics.Paint: void <init>(int)> ==> <android.graphics.Paint: void finalize()>
FINALIZE edge: null in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <android.graphics.Paint: void finalize()>
CLINIT edge: $r0 = <android.graphics.Region$Op: android.graphics.Region$Op[] $VALUES> in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.graphics.Region$Op: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Region$Op;", r0) in <android.graphics.Region$Op: android.graphics.Region$Op valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Path: void <init>()> ==> <android.graphics.Path: void finalize()>
FINALIZE edge: null in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <android.graphics.Path: void finalize()>
FINALIZE edge: null in <android.graphics.DrawFilter: void <init>()> ==> <android.graphics.DrawFilter: void finalize()>
CLINIT edge: $r0 = <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] $VALUES> in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.graphics.Canvas$EdgeType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Canvas$EdgeType;", r0) in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] $VALUES> in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.graphics.Canvas$VertexMode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Canvas$VertexMode;", r0) in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Picture: void <init>()> ==> <android.graphics.Picture: void finalize()>
FINALIZE edge: null in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <android.graphics.Picture: void finalize()>
CLINIT edge: $r0 = <android.graphics.Paint$Style: android.graphics.Paint$Style[] $VALUES> in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.graphics.Paint$Style: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Style;", r0) in <android.graphics.Paint$Style: android.graphics.Paint$Style valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] $VALUES> in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.graphics.Paint$Cap: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Cap;", r0) in <android.graphics.Paint$Cap: android.graphics.Paint$Cap valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Paint$Join: android.graphics.Paint$Join[] $VALUES> in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.graphics.Paint$Join: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Join;", r0) in <android.graphics.Paint$Join: android.graphics.Paint$Join valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.graphics.Shader: void <init>()> ==> <android.graphics.Shader: void finalize()>
FINALIZE edge: null in <android.graphics.Xfermode: void <init>()> ==> <android.graphics.Xfermode: void finalize()>
FINALIZE edge: null in <android.graphics.PathEffect: void <init>()> ==> <android.graphics.PathEffect: void finalize()>
FINALIZE edge: null in <android.graphics.MaskFilter: void <init>()> ==> <android.graphics.MaskFilter: void finalize()>
FINALIZE edge: null in <android.graphics.Rasterizer: void <init>()> ==> <android.graphics.Rasterizer: void finalize()>
CLINIT edge: $r0 = <android.graphics.Paint$Align: android.graphics.Paint$Align[] $VALUES> in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.graphics.Paint$Align: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Paint$Align;", r0) in <android.graphics.Paint$Align: android.graphics.Paint$Align valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] $VALUES> in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Matrix$ScaleToFit;", r0) in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Path$FillType: android.graphics.Path$FillType[] $VALUES> in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.graphics.Path$FillType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Path$FillType;", r0) in <android.graphics.Path$FillType: android.graphics.Path$FillType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Path$Direction: android.graphics.Path$Direction[] $VALUES> in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.graphics.Path$Direction: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Path$Direction;", r0) in <android.graphics.Path$Direction: android.graphics.Path$Direction valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] $VALUES> in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.graphics.Shader$TileMode: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/graphics/Shader$TileMode;", r0) in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
FINALIZE edge: null in <android.view.animation.Animation: void <init>()> ==> <android.view.animation.Animation: void finalize()>
FINALIZE edge: null in <android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)> ==> <android.view.animation.Animation: void finalize()>
CLINIT edge: $r0 = <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] $VALUES> in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.view.ViewDebug$RecyclerTraceType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/view/ViewDebug$RecyclerTraceType;", r0) in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] $VALUES> in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.view.ViewDebug$HierarchyTraceType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/view/ViewDebug$HierarchyTraceType;", r0) in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)>(i0) in <com.facebook.litho.BaseComponentsLogger: com.facebook.litho.LogEvent newEvent(int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)>(i0) in <com.facebook.litho.BaseComponentsLogger: com.facebook.litho.LogEvent newEvent(int)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)>(r0) in <com.facebook.litho.BaseComponentsLogger: void log(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)>(r0) in <com.facebook.litho.BaseComponentsLogger: void log(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.Diff acquireDiff(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDiffPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.Diff acquireDiff(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTreePropsMapPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLogEventPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTreePropsMapPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Diff)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDiffPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Diff)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: java.util.Map sMountContentPoolsByContext> in <com.facebook.litho.ComponentsPools: void clearAll()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r4 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDisplayListDrawablePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDisplayListDrawablePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sBorderColorDrawablePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r1 = new com.facebook.litho.BorderColorDrawable in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.BorderColorDrawable: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sBorderColorDrawablePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sArraySetPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sArraySetPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sArrayDequePool> in <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sArrayDequePool> in <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLogEventPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRenderStatePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRenderStatePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $i5 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i4) in <com.facebook.litho.RecyclePool: java.lang.Object acquire()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1) in <com.facebook.litho.RecyclePool: java.lang.Object acquire()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i7 = staticinvoke <java.lang.Math: int min(int,int)>($i6, $i5) in <com.facebook.litho.RecyclePool: void release(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i3 = staticinvoke <java.lang.Math: int min(int,int)>($i2, $i1) in <com.facebook.litho.RecyclePool: void release(java.lang.Object)> ==> <java.lang.Math: int min(int,int)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>(r0) in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>(r0) in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void onActivityCreated(android.app.Activity,android.os.Bundle)> ==> <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>(r0) in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void onActivityDestroyed(android.app.Activity)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>(r0) in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void onActivityDestroyed(android.app.Activity)> ==> <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.LayoutState: boolean isEligibleForCreatingDisplayLists()> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: z0 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>(i0, i1, $i2) in <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>
STATIC edge: z1 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>(i3, i4, $i5) in <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>
STATIC edge: $z0 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getX()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $z0 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getY()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $z0 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getWidth()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $z0 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getHeight()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getPaddingLeft()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getPaddingTop()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getPaddingRight()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getPaddingBottom()> ==> <com.facebook.litho.FastMath: int round(float)>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r2, r0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)> ==> <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>(r1, r0, i0, i1) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>(r1, r0, i0, i1) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $r1 = new com.facebook.litho.ComponentContext in <com.facebook.litho.ComponentHost: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>(r1) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.AccessibilityUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>(r1) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r5, $r4) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r6, $r7) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)>($r1) in <com.facebook.litho.ComponentHost: com.facebook.litho.TextContent getTextContent()> ==> <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)>($r2) in <com.facebook.litho.ComponentHost: com.facebook.litho.TextContent getTextContent()> ==> <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)>($r1) in <com.facebook.litho.ComponentHost: com.facebook.litho.ImageContent getImageContent()> ==> <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)>($r2) in <com.facebook.litho.ComponentHost: com.facebook.litho.ImageContent getImageContent()> ==> <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)>
STATIC edge: $i1 = staticinvoke <android.support.v4.view.ViewCompat: int getImportantForAccessibility(android.view.View)>(r0) in <com.facebook.litho.ComponentHost: void setImportantForAccessibility(int)> ==> <android.support.v4.view.ViewCompat: int getImportantForAccessibility(android.view.View)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>($r4) in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <com.facebook.litho.AccessibilityUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>($r4) in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)>($r3, r2) in <com.facebook.litho.ComponentHost: boolean onInterceptTouchEvent(android.view.MotionEvent)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$100(com.facebook.litho.ComponentHost$InterleavedDispatchDraw,android.graphics.Canvas)>($r2, r1) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$100(com.facebook.litho.ComponentHost$InterleavedDispatchDraw,android.graphics.Canvas)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void draw(com.facebook.litho.ComponentHost,android.graphics.Canvas)>(r0, r1) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: void draw(com.facebook.litho.ComponentHost,android.graphics.Canvas)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$400(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>($r4) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$400(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$300(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>($r5) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$300(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: boolean access$200(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>($r3) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: boolean access$200(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)>
STATIC edge: staticinvoke <android.support.v4.graphics.drawable.DrawableCompat: void jumpToCurrentState(android.graphics.drawable.Drawable)>(r6) in <com.facebook.litho.ComponentHost: void jumpDrawablesToCurrentState()> ==> <android.support.v4.graphics.drawable.DrawableCompat: void jumpToCurrentState(android.graphics.drawable.Drawable)>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.LayoutOutput: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.TestItem: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1) in <com.facebook.litho.TestItem: java.util.List getTextItems()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)>($r2) in <com.facebook.litho.TestItem: java.util.List getTextItems()> ==> <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r1) in <com.facebook.litho.TestItem: java.util.List getTextItems()> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
CLINIT edge: $r0 = new com.facebook.litho.ComponentTree in <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)>(r1) in <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)>(r1) in <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>(r0) in <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>(r0) in <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>
CLINIT edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3) in <com.facebook.litho.TreeProps: java.util.Map toMap()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r3) in <com.facebook.litho.TreeProps: java.util.Map toMap()> ==> <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()>() in <com.facebook.litho.TreeProps: com.facebook.litho.TreeProps copy(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()>() in <com.facebook.litho.TreeProps: com.facebook.litho.TreeProps copy(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType NONE> in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Edges: boolean floatsEqual(float,float)>($f1, f0) in <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.Edges: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>(f0) in <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Edges: boolean floatsEqual(float,float)>($f1, f0) in <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.Edges: boolean floatsEqual(float,float)>
CLINIT edge: $r3 = <com.facebook.litho.Edges: int[] sFlagsMap> in <com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.Edges: void <clinit>()>
STATIC edge: staticinvoke <java.util.Arrays: void fill(float[],float)>($r1, #NaNF) in <com.facebook.litho.Edges: void reset()> ==> <java.util.Arrays: void fill(float[],float)>
CLINIT edge: $r1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setTint(int)> ==> <android.content.res.ColorStateList: void <clinit>()>
STATIC edge: $r1 = staticinvoke <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setTint(int)> ==> <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListJBMR2: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListLollipop: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListNougat: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListNougat: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
STATIC edge: $f34 = staticinvoke <java.lang.Math: float min(float,float)>($f31, $f30) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.Math: float min(float,float)>
STATIC edge: $f9 = staticinvoke <java.lang.Math: float max(float,float)>($f7, $f6) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.Math: float max(float,float)>
STATIC edge: $f16 = staticinvoke <java.lang.Math: float max(float,float)>($f15, $f14) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.Math: float max(float,float)>
STATIC edge: $f27 = staticinvoke <java.lang.Math: float min(float,float)>($f23, $f22) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.Math: float min(float,float)>
CLINIT edge: $r2 = <com.facebook.litho.internal.ArraySet: java.lang.Integer SENTINEL_MAP_VALUE> in <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.internal.ArraySet: java.lang.Object[] EMPTY_OBJECT_ARRAY> in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray()> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>($r3, i0) in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.reflect.Array: java.lang.Object newInstance(java.lang.Class,int)>
CLINIT edge: $r2 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.RenderState: void <init>()> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, $r2) in <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, $r2) in <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r1) in <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r1) in <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: com.facebook.litho.LithoView getLithoView()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>($r1) in <com.facebook.litho.ComponentTree: com.facebook.litho.StateHandler getStateHandler()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>($r1) in <com.facebook.litho.ComponentTree: com.facebook.litho.StateHandler getStateHandler()> ==> <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)>($r5) in <com.facebook.litho.ComponentTree: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)>($r5) in <com.facebook.litho.ComponentTree: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentTree: java.util.concurrent.atomic.AtomicInteger sIdGenerator> in <com.facebook.litho.ComponentTree: int generateComponentTreeId()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>($r1, null, 0) in <com.facebook.litho.ComponentTree$1: void run()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>($r1, null, 0) in <com.facebook.litho.ComponentTree$1: void run()> ==> <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] $VALUES> in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/facebook/litho/ComponentLifecycle$MountType;", r0) in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType VIEW> in <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>(r1, $r2, i0, i1) in <com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout$Builder withLayout()> ==> <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>(r0, 0, 0) in <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r9) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: $l8 = staticinvoke <com.facebook.yoga.YogaMeasureOutput: long make(int,int)>(i5, i6) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.yoga.YogaMeasureOutput: long make(int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: r27 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>(r2, i0, i1) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>(r4) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>
STATIC edge: i1 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)>(f1, r11) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)>
STATIC edge: i0 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)>(f0, r10) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r9) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
CLINIT edge: r27 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>(r2, i0, i1) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>(r4) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace sInstance> = r0 in <com.facebook.litho.ComponentsSystrace: void provide(com.facebook.litho.ComponentsSystrace$Systrace)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>() in <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>() in <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)> ==> <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>() in <com.facebook.litho.ComponentsSystrace: void endSection()> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>() in <com.facebook.litho.ComponentsSystrace: void endSection()> ==> <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()>
STATIC edge: $r0 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.facebook.litho.ThreadUtils: boolean isMainThread()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
STATIC edge: $r2 = staticinvoke <java.lang.Thread: java.lang.Thread currentThread()>() in <com.facebook.litho.ThreadUtils: boolean isMainThread()> ==> <java.lang.Thread: java.lang.Thread currentThread()>
STATIC edge: i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean newMeasureSizeIsStricterAndStillValid(int,int,int,int,float)>(i4, i1, i5, i2, $f2) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean newMeasureSizeIsStricterAndStillValid(int,int,int,int,float)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean oldSizeIsUnspecifiedAndStillFits(int,int,int,float)>(i4, i1, i2, $f1) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean oldSizeIsUnspecifiedAndStillFits(int,int,int,float)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean newSizeIsExactAndMatchesOldMeasuredSize(int,int,float)>(i1, i2, $f0) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean newSizeIsExactAndMatchesOldMeasuredSize(int,int,float)>
STATIC edge: i5 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i3) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: i4 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i3) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType DRAWABLE> in <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
STATIC edge: $i2 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>(i0, i1) in <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
STATIC edge: $i1 = staticinvoke <android.view.View$MeasureSpec: int getMode(int)>(i0) in <com.facebook.litho.SizeSpec: int getMode(int)> ==> <android.view.View$MeasureSpec: int getMode(int)>
STATIC edge: $i1 = staticinvoke <android.view.View$MeasureSpec: int getSize(int)>(i0) in <com.facebook.litho.SizeSpec: int getSize(int)> ==> <android.view.View$MeasureSpec: int getSize(int)>
STATIC edge: $r0 = staticinvoke <android.view.View$MeasureSpec: java.lang.String toString(int)>(i0) in <com.facebook.litho.SizeSpec: java.lang.String toString(int)> ==> <android.view.View$MeasureSpec: java.lang.String toString(int)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i3) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
CLINIT edge: $r1 = <com.facebook.litho.SizeSpec$1: int[] $SwitchMap$com$facebook$yoga$YogaMeasureMode> in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.SizeSpec$1: void <clinit>()>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>($i3, i2) in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.FastMath: int round(float)>(f0) in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.FastMath: int round(float)>
CLINIT edge: $r0 = <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher sDisplayListPrefetcher> in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("DisplayListPrefetcher") in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: $l7 = staticinvoke <java.lang.System: long nanoTime()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.lang.System: long nanoTime()>
STATIC edge: l6 = staticinvoke <java.lang.System: long nanoTime()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.lang.System: long nanoTime()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("DisplayListPrefetcher") in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
CLINIT edge: l6 = staticinvoke <java.lang.System: long nanoTime()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r4 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.util.concurrent.TimeUnit: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference sInstance> in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference get()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)>(r0, $r1) in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)>(r0, $r1) in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r4) in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r6) in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r5) in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r4) in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r4) in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r6) in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r5) in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r4) in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: com.facebook.litho.MountItem getAccessibleMountItem(android.view.View)>($r1) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: com.facebook.litho.MountItem getAccessibleMountItem(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)>($r11, r4, r5, $r12) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: com.facebook.litho.MountItem getAccessibleMountItem(android.view.View)>($r1) in <com.facebook.litho.ComponentAccessibilityDelegate: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: com.facebook.litho.MountItem getAccessibleMountItem(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>($r7, r2, r3, $r8) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)>($r6, r2, i0, $r7) in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>($r7, r2, r3, $r8) in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>($r7, r2, r3, $r8) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>($r7, r2, r3, $r8) in <com.facebook.litho.ComponentAccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>($r8, r2, r3, r4, $r9) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)>($r7, r2, i0, r3, $r8) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)>($r3, r2) in <com.facebook.litho.ComponentClickListener: void onClick(android.view.View)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)>($r3, r2) in <com.facebook.litho.ComponentLongClickListener: boolean onLongClick(android.view.View)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)>($r4, r2, r3) in <com.facebook.litho.ComponentTouchListener: boolean onTouch(android.view.View,android.view.MotionEvent)> ==> <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)>
CLINIT edge: $r3 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>(r0, r1, 0, 0) in <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)>($r1) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.LithoView)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)>($r1) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.LithoView)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>($r6, i2) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>($r6, i2) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>
STATIC edge: i2 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i1) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <java.lang.Math: int max(int,int)>
CLINIT edge: $r12 = <java.util.Collections: java.util.List EMPTY_LIST> in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r16, $i3) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>
STATIC edge: $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $r8 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r14, i10) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>
STATIC edge: i10 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i5) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $r11 = staticinvoke <java.util.Arrays: java.util.List asList(java.lang.Object[])>($r9) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.Arrays: java.util.List asList(java.lang.Object[])>
STATIC edge: $r10 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r3, i7) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r16, $i3) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: $r8 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r14, i10) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: $r9 = newarray (com.facebook.litho.DebugComponent)[1] in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r7) in <com.facebook.litho.DebugComponent: android.view.View getMountedView()> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r7) in <com.facebook.litho.DebugComponent: android.view.View getMountedView()> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)>($r7) in <com.facebook.litho.DebugComponent: android.graphics.drawable.Drawable getMountedDrawable()> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)>($r7) in <com.facebook.litho.DebugComponent: android.graphics.drawable.Drawable getMountedDrawable()> ==> <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)>
CLINIT edge: $r5 = new android.graphics.Rect in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r4 = new android.graphics.Rect in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r5 = new android.graphics.Rect in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r4 = new android.graphics.Rect in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r4 = <java.util.Collections: java.util.Map EMPTY_MAP> in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)>(r9) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)>
STATIC edge: $r54 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f3) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f2) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.Float: boolean isNaN(float)>
STATIC edge: $r33 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: r9 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>($r8) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>
CLINIT edge: r79 = <com.facebook.litho.DebugComponent: com.facebook.yoga.YogaEdge[] edges> in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: $r31 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: r9 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>($r8) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r16 = <java.util.Collections: java.util.Map EMPTY_MAP> in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r15 = <java.util.Collections: java.util.Map EMPTY_MAP> in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r14 = <java.util.Collections: java.util.Map EMPTY_MAP> in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.displaylist.DisplayListMarshmallow: java.lang.reflect.Method sStartMethod> in <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.displaylist.Utils: java.lang.Object safeInvoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>($r2, $r3, $r1) in <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.Utils: java.lang.Object safeInvoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r0 = <java.util.Collections: java.util.List EMPTY_LIST> in <com.facebook.litho.TextContent$1: java.util.List getTextItems()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentsPools: java.util.Map sMountContentPoolsByContext> in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.ComponentContext in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(android.content.Context,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r0, r2) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(android.content.Context,com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r0, r2) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(android.content.Context,com.facebook.litho.Component)> ==> <android.view.View: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r0, r2) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(android.content.Context,com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.LithoView in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r3) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r3) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.LithoView in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <android.view.View: void <clinit>()>
CLINIT edge: $r1 = new com.facebook.litho.ComponentContext in <com.facebook.litho.LithoView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $r3 = new android.graphics.Rect in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r5 = new com.facebook.litho.MountState in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r4, r2) in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r4, r2) in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r4, r2) in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r4, r2) in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentTree: void access$1400(com.facebook.litho.ComponentTree)>(r2) in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void handleMessage(android.os.Message)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentTree: void access$1400(com.facebook.litho.ComponentTree)>(r2) in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void handleMessage(android.os.Message)> ==> <com.facebook.litho.ComponentTree: void access$1400(com.facebook.litho.ComponentTree)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>($r1, null, 1) in <com.facebook.litho.ComponentTree$2: void run()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>($r1, null, 1) in <com.facebook.litho.ComponentTree$2: void run()> ==> <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $r0 = <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] $VALUES> in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.text.TextUtils$TruncateAt: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/text/TextUtils$TruncateAt;", r0) in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $r0 = <java.util.Collections: java.util.List EMPTY_LIST> in <com.facebook.litho.ImageContent$1: java.util.List getImageItems()> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$101(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>($r3, r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$101(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: void access$201(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>($r3, r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void access$201(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: void access$301(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>($r3, r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void access$301(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: void access$401(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>($r3, r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void access$401(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$501(com.facebook.litho.ComponentAccessibilityDelegate,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>($r4, r1, r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$501(com.facebook.litho.ComponentAccessibilityDelegate,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$601(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int,android.os.Bundle)>($r3, r1, i0, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$601(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int,android.os.Bundle)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: void access$701(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int)>($r2, r1, i0) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void access$701(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentAccessibilityDelegate: void access$801(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>($r3, r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void access$801(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)>
CLINIT edge: $r2 = new android.graphics.Rect in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.graphics.Rect: void <clinit>()>
STATIC edge: $r15 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)>($r12, $r14, $r13) in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)>
STATIC edge: $r12 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>
CLINIT edge: $r15 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)>($r12, $r14, $r13) in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.HostComponent: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean isEndToEndTestRun> in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: r12 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_CENTER> in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>(r14) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>(r13) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>(r14) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>(r13) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>
STATIC edge: $r8 = staticinvoke <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)>(r12) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)>
STATIC edge: r14 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()>
STATIC edge: r13 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()>
STATIC edge: $i13 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f44) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i12 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f38) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: f33 = staticinvoke <java.lang.Math: float min(float,float)>($f9, $f8) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <java.lang.Math: float min(float,float)>
STATIC edge: $i7 = staticinvoke <com.facebook.litho.FastMath: int round(float)>(f31) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.FastMath: int round(float)>(f30) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i11 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f27) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i9 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f25) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.FastMath: int round(float)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)>(r13) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r13 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r1 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_XY> in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.dataflow.GraphBinding create()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>()> ==> <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.dataflow.GraphBinding create()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty X> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty Y> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty WIDTH> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty width()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty HEIGHT> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty height()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty SCALE> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty scale()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty ALPHA> in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty alpha()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty X> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty x()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty Y> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty y()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty WIDTH> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty width()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty HEIGHT> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty height()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty SCALE> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.FloatComponentProperty scale()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty ALPHA> in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.FloatComponentProperty alpha()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty X> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty Y> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty WIDTH> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty width()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty HEIGHT> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty height()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty SCALE> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty scale()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty ALPHA> in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty alpha()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentContext access$1200(com.facebook.litho.MountState)>($r4) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void access$1300(com.facebook.litho.MountState,com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>($r5, $r6, $r7) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <com.facebook.litho.MountState: void access$1300(com.facebook.litho.MountState,com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentContext access$1200(com.facebook.litho.MountState)>($r4) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext access$1200(com.facebook.litho.MountState)>
FINALIZE edge: null in <android.view.Surface: void <init>(android.graphics.SurfaceTexture)> ==> <android.view.Surface: void finalize()>
CLINIT edge: $r0 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] $VALUES> in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Landroid/widget/ImageView$ScaleType;", r0) in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph getInstance()>() in <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.dataflow.GraphBinding create()> ==> <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph getInstance()>
STATIC edge: staticinvoke <com.facebook.litho.animation.TransitionAnimationBinding: void access$000(com.facebook.litho.animation.TransitionAnimationBinding)>($r1) in <com.facebook.litho.animation.TransitionAnimationBinding$1: void onAllNodesFinished(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void access$000(com.facebook.litho.animation.TransitionAnimationBinding)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$400(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>(r5) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>
STATIC edge: staticinvoke <com.facebook.litho.DataFlowTransitionManager: void access$700(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r11) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: void access$700(com.facebook.litho.DataFlowTransitionManager$AnimationState)>
STATIC edge: $r24 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r23) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>
STATIC edge: staticinvoke <com.facebook.litho.DataFlowTransitionManager: void access$600(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$AnimationState)>($r22, r11) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: void access$600(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$AnimationState)>
STATIC edge: $r9 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$400(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$400(com.facebook.litho.DataFlowTransitionManager)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>(r5) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>($r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.SimpleArrayMap access$500(com.facebook.litho.DataFlowTransitionManager)>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode access$800(com.facebook.litho.DataFlowTransitionManager,java.lang.String,com.facebook.litho.animation.AnimatedProperty)>($r2, $r3, $r4) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode access$800(com.facebook.litho.DataFlowTransitionManager,java.lang.String,com.facebook.litho.animation.AnimatedProperty)>($r2, $r3, $r4) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode access$800(com.facebook.litho.DataFlowTransitionManager,java.lang.String,com.facebook.litho.animation.AnimatedProperty)>
FINALIZE edge: null in <android.graphics.SurfaceTexture: void <init>(int)> ==> <android.graphics.SurfaceTexture: void finalize()>
STATIC edge: staticinvoke <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>(r11, r7, r10) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>(r4, r7, r10) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>($r2, 0) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>($r4, 0) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>($r2, 1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>($r4, 1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)>(f0) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder 'to'(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)>(f0) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidth(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)>(f0) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeight(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)>
CLINIT edge: $r1 = new com.facebook.litho.dataflow.springs.Spring in <com.facebook.litho.dataflow.SpringNode: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)>(f0) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder 'from'(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)>(f0) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidth(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)>(f0) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeight(float)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>
CLINIT edge: $r1 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type ABSOLUTE> in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET> in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetPx(float)> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetPx(float)>(f2) in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetDip(android.content.Context,int)> ==> <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetPx(float)>
CLINIT edge: $r1 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET_WIDTH_PERCENTAGE> in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET_HEIGHT_PERCENTAGE> in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r4 = <com.facebook.litho.animation.DimensionValue$1: int[] $SwitchMap$com$facebook$litho$animation$DimensionValue$Type> in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.DimensionValue$1: void <clinit>()>
CLINIT edge: $i0 = <com.facebook.litho.dataflow.springs.Spring: int ID> in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.dataflow.springs.SpringConfig: com.facebook.litho.dataflow.springs.SpringConfig defaultConfig> in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.SpringConfig: void <clinit>()>
STATIC edge: $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0) in <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()> ==> <java.lang.Math: double abs(double)>
STATIC edge: $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2) in <com.facebook.litho.dataflow.springs.Spring: boolean currentValueIsApproximately(double)> ==> <java.lang.Math: double abs(double)>
CLINIT edge: $r0 = <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat INSTANCE> in <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.dataflow.ChoreographerCompat: boolean IS_JELLYBEAN_OR_HIGHER> in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.dataflow.ChoreographerCompat: boolean IS_JELLYBEAN_OR_HIGHER> in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.dataflow.ChoreographerCompat: boolean IS_JELLYBEAN_OR_HIGHER> in <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.dataflow.ChoreographerTimingSource: void access$000(com.facebook.litho.dataflow.ChoreographerTimingSource,long)>($r1, l0) in <com.facebook.litho.dataflow.ChoreographerTimingSource$1: void doFrame(long)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void access$000(com.facebook.litho.dataflow.ChoreographerTimingSource,long)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>(r1) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding sequence(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>(r1) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding parallel(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>(r1) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding stagger(int,com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])>
CLINIT edge: $r0 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] $VALUES> in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>(class "Lcom/facebook/litho/animation/DimensionValue$Type;", r0) in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type valueOf(java.lang.String)> ==> <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)>
CLINIT edge: $l0 = staticinvoke <java.lang.System: long nanoTime()>() in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()> ==> <java.lang.System: void <clinit>()>
STATIC edge: $l0 = staticinvoke <java.lang.System: long nanoTime()>() in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()> ==> <java.lang.System: long nanoTime()>
STATIC edge: staticinvoke <com.facebook.litho.animation.SequenceBinding: void access$000(com.facebook.litho.animation.SequenceBinding,com.facebook.litho.animation.AnimationBinding)>($r2, r1) in <com.facebook.litho.animation.SequenceBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void access$000(com.facebook.litho.animation.SequenceBinding,com.facebook.litho.animation.AnimationBinding)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.animation.ParallelBinding: boolean access$100(com.facebook.litho.animation.ParallelBinding)>($r1) in <com.facebook.litho.animation.ParallelBinding$2: void doFrame(long)> ==> <com.facebook.litho.animation.ParallelBinding: boolean access$100(com.facebook.litho.animation.ParallelBinding)>
STATIC edge: staticinvoke <com.facebook.litho.animation.ParallelBinding: void access$200(com.facebook.litho.animation.ParallelBinding)>($r2) in <com.facebook.litho.animation.ParallelBinding$2: void doFrame(long)> ==> <com.facebook.litho.animation.ParallelBinding: void access$200(com.facebook.litho.animation.ParallelBinding)>
STATIC edge: staticinvoke <com.facebook.litho.animation.ParallelBinding: void access$000(com.facebook.litho.animation.ParallelBinding,com.facebook.litho.animation.AnimationBinding)>($r2, r1) in <com.facebook.litho.animation.ParallelBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void access$000(com.facebook.litho.animation.ParallelBinding,com.facebook.litho.animation.AnimationBinding)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: r14 = staticinvoke <android.support.v4.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>(r7, i0, r8) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <android.support.v4.content.res.ResourcesCompat: android.graphics.drawable.Drawable getDrawable(android.content.res.Resources,int,android.content.res.Resources$Theme)>
STATIC edge: $r11 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $i1 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $r5 = <android.util.StateSet: int[] WILD_CARD> in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.util.StateSet: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>(r0, 0, 0) in <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>
CLINIT edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder isSticky(boolean)> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>(z0) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder isSticky(boolean)> ==> <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder spanSize(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder spanSize(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r0 = new com.facebook.litho.ComponentInfo in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo build()> ==> <com.facebook.litho.ComponentInfo: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool sBuilderPool> in <com.facebook.litho.ComponentInfo: com.facebook.litho.ComponentInfo$Builder create()> ==> <com.facebook.litho.ComponentInfo: void <clinit>()>
STATIC edge: $r4 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.app.Activity)>(r0) in <com.facebook.litho.ComponentsLifecycles: void onActivityCreated(android.app.Activity,android.os.Bundle)> ==> <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.app.Activity)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)>(r0) in <com.facebook.litho.ComponentsLifecycles: void onActivityDestroyed(android.app.Activity)> ==> <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)>
CLINIT edge: <com.facebook.litho.ComponentsPools: boolean sIsManualCallbacks> = 1 in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.app.Activity)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)>(r0) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.app.Activity)> ==> <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>(r0, 0, 0) in <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>
STATIC edge: $l0 = staticinvoke <com.facebook.yoga.YogaMeasureOutput: long make(int,int)>(1, 1) in <com.facebook.litho.TestComponentContext$1: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.yoga.YogaMeasureOutput: long make(int,int)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r0, $r1) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r0, $r1) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>
CLINIT edge: $r4 = new com.facebook.litho.TestComponent in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $r4 = new com.facebook.litho.TestComponent in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponent: void <clinit>()>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i5 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i4, 0) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i7 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i6, -2147483648) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i3 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i2, 1073741824) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)>(i0, i1) in <com.facebook.litho.utils.MeasureUtils: void measureWithDesiredPx(int,int,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)>(i3, i4) in <com.facebook.litho.utils.MeasureUtils: void measureWithDesiredPx(int,int,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)>
STATIC edge: i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: i7 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i5) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i6 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i5) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i8 = staticinvoke <java.lang.Math: int min(int,int)>(i2, i5) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: i5 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i3) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: i4 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i3) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: void measureWithEqualDimens(int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i5) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: staticinvoke <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)>(i5, i6, f0, r0) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)>
STATIC edge: i6 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>(i2, -2147483648) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i6) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i7 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i6) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: i5 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>(i4, -2147483648) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i5) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $d3 = staticinvoke <java.lang.Math: double ceil(double)>($d2) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <java.lang.Math: double ceil(double)>
STATIC edge: $d1 = staticinvoke <java.lang.Math: double ceil(double)>($d0) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <java.lang.Math: double ceil(double)>
STATIC edge: i5 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i3) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: i4 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i3) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: void measureWithAspectRatio(int,int,float,com.facebook.litho.Size)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>() in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>() in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>
CLINIT edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)>(r0, 0) in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)>(r0, 0) in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)>
CLINIT edge: $z1 = <com.facebook.litho.config.ComponentsConfiguration: boolean isIncrementalMountOnOffsetOrTranslationChangeEnabled> in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)>(i0, i1, $r1) in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)>(i0, i1, $r1) in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup)>($r2) in <com.facebook.litho.utils.IncrementalMountUtils$1: void onScrolled(android.support.v7.widget.RecyclerView,int,int)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup)>($r2) in <com.facebook.litho.utils.IncrementalMountUtils$1: void onScrolled(android.support.v7.widget.RecyclerView,int,int)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.Row: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>(r0, 0, 0) in <com.facebook.litho.Row: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Row: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)>($r4, $r0) in <com.facebook.litho.TestComponentTree: java.util.List getSubComponents()> ==> <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)>
CLINIT edge: $r0 = <com.facebook.litho.ViewCompatComponent: java.util.Map sInstances> in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ViewCompatComponent: java.util.Map sInstances> in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ViewCompatComponent$Builder: void access$000(com.facebook.litho.ViewCompatComponent$Builder,com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r7, r5, $r0) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent$Builder: void access$000(com.facebook.litho.ViewCompatComponent$Builder,com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
CLINIT edge: $r3 = <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType VIEW> in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$102(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl,com.facebook.litho.ViewCompatComponent$ViewBinder)>($r2, r1) in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.ViewCompatComponent$Builder viewBinder(com.facebook.litho.ViewCompatComponent$ViewBinder)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$102(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl,com.facebook.litho.ViewCompatComponent$ViewBinder)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>($r1) in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.ViewCompatComponent: java.lang.String access$200(com.facebook.litho.ViewCompatComponent)>($r2) in <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ViewCompatComponent: java.lang.String access$200(com.facebook.litho.ViewCompatComponent)>($r2) in <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()> ==> <com.facebook.litho.ViewCompatComponent: java.lang.String access$200(com.facebook.litho.ViewCompatComponent)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.ViewCompatComponent: java.lang.String access$200(com.facebook.litho.ViewCompatComponent)>($r2) in <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("is_accessibility_enabled") in <com.facebook.litho.AccessibilityUtils: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
STATIC edge: $z0 = staticinvoke <java.lang.Boolean: boolean getBoolean(java.lang.String)>("is_accessibility_enabled") in <com.facebook.litho.AccessibilityUtils: void <clinit>()> ==> <java.lang.Boolean: boolean getBoolean(java.lang.String)>
CLINIT edge: <com.facebook.litho.AccessibilityUtils: boolean ACCESSIBILITY_ENABLED> = $z0 in <com.facebook.litho.AccessibilityUtils: void <clinit>()> ==> <com.facebook.litho.AccessibilityUtils: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.PorterDuff$Mode in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Bitmap$Config in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Bitmap$CompressFormat in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Region$Op in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Canvas$EdgeType in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Canvas$VertexMode in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Style in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Cap in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Join in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Paint$Align in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Matrix$ScaleToFit in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Path$FillType in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Path$Direction in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Shader$TileMode in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <clinit>()>
CLINIT edge: $r0 = new android.view.ViewDebug$RecyclerTraceType in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <clinit>()>
CLINIT edge: $r0 = new android.view.ViewDebug$HierarchyTraceType in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentsPools: java.lang.Object mountContentLock> = $r0 in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.config.ComponentsConfiguration: boolean isDebugModeEnabled> = 0 in <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("IS_TESTING") in <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()> ==> <java.lang.System: java.lang.String getProperty(java.lang.String)>
CLINIT edge: $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("IS_TESTING") in <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.RectF in <com.facebook.litho.BorderColorDrawable: void <clinit>()> ==> <android.graphics.RectF: void <clinit>()>
CLINIT edge: <com.facebook.litho.BorderColorDrawable: android.graphics.RectF mBorderBounds> = $r0 in <com.facebook.litho.BorderColorDrawable: void <clinit>()> ==> <com.facebook.litho.BorderColorDrawable: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.internal.ArraySet: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.internal.ArraySet: void <clinit>()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: <com.facebook.litho.internal.ArraySet: java.lang.Integer SENTINEL_MAP_VALUE> = $r0 in <com.facebook.litho.internal.ArraySet: void <clinit>()> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: java.util.Map sMountContentPoolsByContext> in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: java.util.Map sMountContentPoolsByContext> in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ComponentsPools: boolean isContextWrapper(android.content.Context,android.content.Context)>(r9, r0) in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: boolean isContextWrapper(android.content.Context,android.content.Context)>
CLINIT edge: <android.os.Build$VERSION: java.lang.String INCREMENTAL> = null in <android.os.Build$VERSION: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.Edges in <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()> ==> <com.facebook.litho.Edges: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sEdgesPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> = $r0 in <com.facebook.litho.ComponentContext: void <clinit>()> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: <android.text.TextUtils: android.os.Parcelable$Creator CHAR_SEQUENCE_CREATOR> = null in <android.text.TextUtils: void <clinit>()> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: <com.facebook.litho.LayoutState: java.util.Comparator sTopsComparator> = $r0 in <com.facebook.litho.LayoutState: void <clinit>()> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType NONE> in <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>(r0, r1, null, i0, i1, null) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>(r0, r1, null, i0, i1, null) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>
CLINIT edge: <com.facebook.litho.Component: java.util.concurrent.atomic.AtomicInteger sIdGenerator> = $r0 in <com.facebook.litho.Component: void <clinit>()> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>(i0, r0) in <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>
CLINIT edge: $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8) in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <java.util.Collections: void <clinit>()>
STATIC edge: $r9 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r8) in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <java.util.Collections: java.util.List singletonList(java.lang.Object)>
CLINIT edge: $r7 = <com.facebook.litho.TextContent: com.facebook.litho.TextContent EMPTY> in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <com.facebook.litho.TextContent: void <clinit>()>
CLINIT edge: $r7 = <com.facebook.litho.ImageContent: com.facebook.litho.ImageContent EMPTY> in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <com.facebook.litho.ImageContent: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean debugHighlightInteractiveBounds> in <com.facebook.litho.DebugDraw: void draw(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)>(r0, r1) in <com.facebook.litho.DebugDraw: void draw(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)>(r0, r1) in <com.facebook.litho.DebugDraw: void draw(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)>
CLINIT edge: <android.graphics.Rect: android.os.Parcelable$Creator CREATOR> = null in <android.graphics.Rect: void <clinit>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentTree: java.lang.String TAG> = $r1 in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $r6 = new android.graphics.Rect in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sComponentTreeBuilderPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = new com.facebook.litho.StateHandler in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sStateHandlerPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.ComponentLifecycle$MountType in <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
CLINIT edge: <com.facebook.litho.Edges: int[] sFlagsMap> = $r0 in <com.facebook.litho.Edges: void <clinit>()> ==> <com.facebook.litho.Edges: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Math: float abs(float)>
STATIC edge: $z2 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Float: boolean isNaN(float)>
STATIC edge: $z1 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Float: boolean isNaN(float)>
STATIC edge: $z3 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f1) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Float: boolean isNaN(float)>
STATIC edge: $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0) in <com.facebook.litho.Edges: boolean floatsEqual(float,float)> ==> <java.lang.Float: boolean isNaN(float)>
CLINIT edge: <android.content.res.ColorStateList: android.os.Parcelable$Creator CREATOR> = null in <android.content.res.ColorStateList: void <clinit>()> ==> <android.content.res.ColorStateList: void <clinit>()>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)>
STATIC edge: r1 = staticinvoke <com.facebook.litho.displaylist.DisplayListJBMR2: android.view.DisplayList instantiateDisplayList(java.lang.String)>(r0) in <com.facebook.litho.displaylist.DisplayListJBMR2: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)>
STATIC edge: r1 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>(r0, null) in <com.facebook.litho.displaylist.DisplayListLollipop: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>
CLINIT edge: staticinvoke <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()>() in <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
STATIC edge: r3 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>(r0, null) in <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()>() in <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()>
CLINIT edge: <com.facebook.litho.displaylist.DisplayListMarshmallow: boolean sInitializationFailed> = 1 in <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.displaylist.DisplayListNougat: void ensureInitialized()>() in <com.facebook.litho.displaylist.DisplayListNougat: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()>
STATIC edge: r3 = staticinvoke <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>(r0, null) in <com.facebook.litho.displaylist.DisplayListNougat: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <android.view.RenderNode: android.view.RenderNode create(java.lang.String,android.view.View)>
CLINIT edge: <com.facebook.litho.displaylist.DisplayListJB: boolean sInitialized> = 0 in <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
CLINIT edge: <com.facebook.litho.displaylist.DisplayListMarshmallow: boolean sInitialized> = 0 in <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sComponentTreeBuilderPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sStateUpdatesListPool> = $r0 in <com.facebook.litho.StateHandler: void <clinit>()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace sInstance> = null in <com.facebook.litho.ComponentsSystrace: void <clinit>()> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i6, $i7, i0, i1, $f4, $f5) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)>(r6) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)>
STATIC edge: r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>(r1, r2, r0, i0, i1, $r3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i4, $i5, i0, i1, $f2, $f3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>
STATIC edge: z0 = staticinvoke <com.facebook.litho.InternalNode: boolean hasValidLayoutDirectionInNestedTree(com.facebook.litho.InternalNode,com.facebook.litho.InternalNode)>(r0, r4) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: boolean hasValidLayoutDirectionInNestedTree(com.facebook.litho.InternalNode,com.facebook.litho.InternalNode)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>(r6, 1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i6, $i7, i0, i1, $f4, $f5) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>
CLINIT edge: staticinvoke <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)>(r6) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>(r1, r2, r0, i0, i1, $r3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i4, $i5, i0, i1, $f2, $f3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: z0 = staticinvoke <com.facebook.litho.InternalNode: boolean hasValidLayoutDirectionInNestedTree(com.facebook.litho.InternalNode,com.facebook.litho.InternalNode)>(r0, r4) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>(r6, 1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace sInstance> in <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: $f3 = staticinvoke <java.lang.Math: float abs(float)>($f2) in <com.facebook.litho.MeasureComparisonUtils: boolean newSizeIsExactAndMatchesOldMeasuredSize(int,int,float)> ==> <java.lang.Math: float abs(float)>
CLINIT edge: <com.facebook.litho.SizeSpec$1: int[] $SwitchMap$com$facebook$yoga$YogaMeasureMode> = $r1 in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.litho.SizeSpec$1: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.yoga.YogaMeasureMode: com.facebook.yoga.YogaMeasureMode[] values()>() in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.yoga.YogaMeasureMode: com.facebook.yoga.YogaMeasureMode[] values()>
CLINIT edge: $r7 = <com.facebook.litho.SizeSpec$1: int[] $SwitchMap$com$facebook$yoga$YogaMeasureMode> in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.litho.SizeSpec$1: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.SizeSpec$1: int[] $SwitchMap$com$facebook$yoga$YogaMeasureMode> in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.litho.SizeSpec$1: void <clinit>()>
CLINIT edge: <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration sAverageDLPrefetchDurationNs> = $r0 in <com.facebook.litho.DisplayListPrefetcher: void <clinit>()> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
CLINIT edge: <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> = $r0 in <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: <com.facebook.litho.DebugComponent: com.facebook.yoga.YogaEdge[] edges> = $r0 in <com.facebook.litho.DebugComponent: void <clinit>()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.yoga.YogaEdge: com.facebook.yoga.YogaEdge[] values()>() in <com.facebook.litho.DebugComponent: void <clinit>()> ==> <com.facebook.yoga.YogaEdge: com.facebook.yoga.YogaEdge[] values()>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r0, i0) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r0, i0) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>
CLINIT edge: $r3 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType VIEW> in <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType DRAWABLE> in <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sYogaNodePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaConfig sYogaConfig> in <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.config.ComponentsConfiguration: com.facebook.yoga.YogaLogger YOGA_LOGGER> in <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: <java.lang.Float: java.lang.Class TYPE> = null in <java.lang.Float: void <clinit>()> ==> <java.lang.Float: void <clinit>()>
CLINIT edge: <java.lang.Integer: java.lang.Class TYPE> = null in <java.lang.Integer: void <clinit>()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: <android.view.View: int[] EMPTY_STATE_SET> = null in <android.view.View: void <clinit>()> ==> <android.view.View: void <clinit>()>
CLINIT edge: <com.facebook.litho.LithoView: int[] sLayoutSize> = $r0 in <com.facebook.litho.LithoView: void <clinit>()> ==> <com.facebook.litho.LithoView: void <clinit>()>
CLINIT edge: <com.facebook.litho.LithoView: int[] sLayoutSize> = $r0 in <com.facebook.litho.LithoView: void <clinit>()> ==> <android.view.View: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Rect in <com.facebook.litho.MountState: void <clinit>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: <com.facebook.litho.MountState: android.graphics.Rect sTempRect> = $r0 in <com.facebook.litho.MountState: void <clinit>()> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $r0 = new android.text.TextUtils$TruncateAt in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()>
CLINIT edge: $r6 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sMountItemPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentLifecycle: java.util.concurrent.atomic.AtomicInteger sComponentId> = $r0 in <com.facebook.litho.ComponentLifecycle: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.HostComponent in <com.facebook.litho.HostComponent: void <clinit>()> ==> <com.facebook.litho.HostComponent: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.HostComponent in <com.facebook.litho.HostComponent: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r0 = new android.widget.ImageView$ScaleType in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRectFPool> in <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.DrawableMatrix$1: int[] $SwitchMap$android$widget$ImageView$ScaleType> in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <com.facebook.litho.DrawableMatrix$1: void <clinit>()>
CLINIT edge: $r2 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit END> in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: $r3 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit CENTER> in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: $r4 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit START> in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: $r5 = <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit FILL> in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <android.graphics.Matrix$ScaleToFit: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.RectF in <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()> ==> <android.graphics.RectF: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRectFPool> in <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.animation.AnimatedProperties: com.facebook.litho.animation.AnimatedProperty X> = $r0 in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
CLINIT edge: <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.Pools$SimplePool sAnimationStatePool> = $r0 in <com.facebook.litho.DataFlowTransitionManager: void <clinit>()> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.DataFlowTransitionManager: void releaseAnimationState(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void access$700(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.DataFlowTransitionManager: void releaseAnimationState(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void access$700(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void releaseAnimationState(com.facebook.litho.DataFlowTransitionManager$AnimationState)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>(r0, r1) in <com.facebook.litho.animation.AnimatedProperties: android.view.View access$800(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
CLINIT edge: $f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)>(r0, z0) in <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)> ==> <com.facebook.litho.animation.AnimatedProperties: void <clinit>()>
STATIC edge: $f0 = staticinvoke <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)>(r0, z0) in <com.facebook.litho.animation.AnimatedProperties: float access$900(android.view.View,boolean)> ==> <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)>
CLINIT edge: <com.facebook.litho.dataflow.springs.Spring: int ID> = 0 in <com.facebook.litho.dataflow.springs.Spring: void <clinit>()> ==> <com.facebook.litho.dataflow.springs.Spring: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: <com.facebook.litho.dataflow.ChoreographerCompat: boolean IS_JELLYBEAN_OR_HIGHER> = $z0 in <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.animation.DimensionValue$Type in <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()>
CLINIT edge: $r8 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET_HEIGHT_PERCENTAGE> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.animation.DimensionValue$1: int[] $SwitchMap$com$facebook$litho$animation$DimensionValue$Type> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$1: void <clinit>()>
CLINIT edge: $r6 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET_WIDTH_PERCENTAGE> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r7 = <com.facebook.litho.animation.DimensionValue$1: int[] $SwitchMap$com$facebook$litho$animation$DimensionValue$Type> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$1: void <clinit>()>
CLINIT edge: $r4 = <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type OFFSET> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.animation.DimensionValue$1: int[] $SwitchMap$com$facebook$litho$animation$DimensionValue$Type> in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$1: void <clinit>()>
CLINIT edge: <com.facebook.litho.animation.DimensionValue$1: int[] $SwitchMap$com$facebook$litho$animation$DimensionValue$Type> = $r1 in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$1: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.dataflow.springs.SpringConfig in <com.facebook.litho.dataflow.springs.SpringConfig: void <clinit>()> ==> <com.facebook.litho.dataflow.springs.SpringConfig: void <clinit>()>
CLINIT edge: <android.util.StateSet: int[] WILD_CARD> = null in <android.util.StateSet: void <clinit>()> ==> <android.util.StateSet: void <clinit>()>
CLINIT edge: <java.lang.Boolean: java.lang.Class TYPE> = null in <java.lang.Boolean: void <clinit>()> ==> <java.lang.Boolean: void <clinit>()>
CLINIT edge: <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool sBuilderPool> = $r2 in <com.facebook.litho.ComponentInfo: void <clinit>()> ==> <com.facebook.litho.ComponentInfo: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r3 = new com.facebook.litho.InternalNode in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $r4 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sInternalNodePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: <com.facebook.litho.TestComponent: com.facebook.litho.ComponentLifecycle TEST_LIFECYCLE> = $r0 in <com.facebook.litho.TestComponent: void <clinit>()> ==> <com.facebook.litho.TestComponent: void <clinit>()>
CLINIT edge: <com.facebook.litho.TestComponent: com.facebook.litho.ComponentLifecycle TEST_LIFECYCLE> = $r0 in <com.facebook.litho.TestComponent: void <clinit>()> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i5 = staticinvoke <java.lang.Math: int min(int,int)>($i4, i3) in <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
CLINIT edge: <com.facebook.litho.utils.IncrementalMountUtils: android.support.v4.util.Pools$SynchronizedPool sRectPool> = $r0 in <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)>(r3) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)>(r3) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)>
STATIC edge: $i24 = staticinvoke <java.lang.Math: int min(int,int)>(i5, i11) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i22 = staticinvoke <java.lang.Math: int min(int,int)>(i9, i10) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i21 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i20) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i19 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i18) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()>
STATIC edge: staticinvoke <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)>(r3, r4) in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)>
CLINIT edge: <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> = $r0 in <com.facebook.litho.ViewCompatComponent: void <clinit>()> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
CLINIT edge: <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> = $r0 in <com.facebook.litho.ViewCompatComponent: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: <android.graphics.RectF: android.os.Parcelable$Creator CREATOR> = null in <android.graphics.RectF: void <clinit>()> ==> <android.graphics.RectF: void <clinit>()>
CLINIT edge: $r0 = <android.os.Build: java.lang.String FINGERPRINT> in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <android.os.Build: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>(r4, i2, i3, r12) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)>(r11) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>(r3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>
STATIC edge: r4 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)>(r3, r11) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)>
CLINIT edge: $z3 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>(r3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)>(r3, r11) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: <com.facebook.litho.TextContent: com.facebook.litho.TextContent EMPTY> = $r0 in <com.facebook.litho.TextContent: void <clinit>()> ==> <com.facebook.litho.TextContent: void <clinit>()>
CLINIT edge: <com.facebook.litho.ImageContent: com.facebook.litho.ImageContent EMPTY> = $r0 in <com.facebook.litho.ImageContent: void <clinit>()> ==> <com.facebook.litho.ImageContent: void <clinit>()>
CLINIT edge: $r23 = new android.graphics.Rect in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Rect: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)>(r8, $r30, $r31, $i10, $i16) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)>
STATIC edge: $i16 = staticinvoke <java.lang.Math: int min(int,int)>($i14, $i15) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i15 = staticinvoke <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>(r1, 12) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>
STATIC edge: $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i9 = staticinvoke <com.facebook.litho.DebugDraw: int getCornerColor(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: int getCornerColor(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawMountBoundsBorder(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect)>(r8, $r27, $r28) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: void drawMountBoundsBorder(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect)>
STATIC edge: $i8 = staticinvoke <com.facebook.litho.DebugDraw: int getBorderColor(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: int getBorderColor(com.facebook.litho.Component)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.DebugDraw: boolean shouldHighlight(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: boolean shouldHighlight(com.facebook.litho.Component)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>(r1, 2) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>(r1, 1) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)>
CLINIT edge: $r16 = <android.graphics.Paint$Style: android.graphics.Paint$Style FILL> in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint$Style: void <clinit>()>
CLINIT edge: $r20 = <android.graphics.Paint$Style: android.graphics.Paint$Style STROKE> in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint$Style: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)>(r8) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r6) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)>(r2) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)>
CLINIT edge: staticinvoke <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()>() in <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()>() in <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()>
CLINIT edge: <com.facebook.litho.displaylist.DisplayListJB: boolean sInitializationFailed> = 1 in <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.displaylist.DisplayListMarshmallow: boolean sInitialized> in <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.view.RenderNode") in <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $r2 = <java.lang.Integer: java.lang.Class TYPE> in <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(null, "alignSelf") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
STATIC edge: r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r11) in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
STATIC edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "margin") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>
STATIC edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "flexGrow") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>
STATIC edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "flex") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>
STATIC edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "positionType") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>
STATIC edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(null, "alignSelf") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>
CLINIT edge: r1 = staticinvoke <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>(", ", r11) in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "margin") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "flexGrow") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "flex") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: r11 = staticinvoke <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)>(r11, "positionType") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r4, 1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>(r5, z1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r4, 1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>(r5, z1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.InternalNode: void <clinit>()> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: <com.facebook.litho.InternalNode: boolean SUPPORTS_RTL> = $z0 in <com.facebook.litho.InternalNode: void <clinit>()> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)>
CLINIT edge: $r10 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r1, 0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.Integer: java.lang.String toString(int)>
STATIC edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r4) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.System: int identityHashCode(java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r2, 0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>
STATIC edge: $r10 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r1, 0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>
CLINIT edge: r14 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>(r4) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.System: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)>(r2, 0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()>() in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()>() in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()>
CLINIT edge: $r0 = staticinvoke <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
STATIC edge: $r0 = staticinvoke <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()>
CLINIT edge: $r8 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_END> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.DrawableMatrix$1: int[] $SwitchMap$android$widget$ImageView$ScaleType> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <com.facebook.litho.DrawableMatrix$1: void <clinit>()>
CLINIT edge: $r6 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_CENTER> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
CLINIT edge: $r7 = <com.facebook.litho.DrawableMatrix$1: int[] $SwitchMap$android$widget$ImageView$ScaleType> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <com.facebook.litho.DrawableMatrix$1: void <clinit>()>
CLINIT edge: $r4 = <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType FIT_START> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.DrawableMatrix$1: int[] $SwitchMap$android$widget$ImageView$ScaleType> in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <com.facebook.litho.DrawableMatrix$1: void <clinit>()>
CLINIT edge: <com.facebook.litho.DrawableMatrix$1: int[] $SwitchMap$android$widget$ImageView$ScaleType> = $r1 in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <com.facebook.litho.DrawableMatrix$1: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.Pools$SimplePool sAnimationStatePool> in <com.facebook.litho.DataFlowTransitionManager: void releaseAnimationState(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.utils.IncrementalMountUtils: android.support.v4.util.Pools$SynchronizedPool sRectPool> in <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.utils.IncrementalMountUtils: android.support.v4.util.Pools$SynchronizedPool sRectPool> in <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()> ==> <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()>
CLINIT edge: $r2 = new android.graphics.Rect in <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: <android.os.Build: java.lang.String ID> = null in <android.os.Build: void <clinit>()> ==> <android.os.Build: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r7) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i2) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i2) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z3) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.String: java.lang.String valueOf(boolean)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r8) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("applyDiffNode") in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: $z1 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f1) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $z0 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r7) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
CLINIT edge: $r12 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z3) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r8) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: i3 = staticinvoke <com.facebook.litho.LayoutState: int getLayoutDirection(android.content.Context)>(r0) in <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)> ==> <com.facebook.litho.LayoutState: int getLayoutDirection(android.content.Context)>
CLINIT edge: i3 = staticinvoke <com.facebook.litho.LayoutState: int getLayoutDirection(android.content.Context)>(r0) in <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, $i3, $i2, i0, i0, i1) in <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, $i13, $i12, $i11, $i10, i1) in <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, $i9, $i8, $i7, i0, i1) in <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>(r0, r1, $i6, $i5, i0, $i4, i1) in <com.facebook.litho.DebugDraw: void drawMountBoundsCorners(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.DebugDraw: int getCornerColor(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.DebugDraw: int getCornerColor(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.DebugDraw: int getBorderColor(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.DebugDraw: int getBorderColor(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r0) in <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>(r0) in <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>(r0) in <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r0) in <com.facebook.litho.DebugDraw: boolean isInteractive(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>
CLINIT edge: $z0 = <com.facebook.litho.displaylist.DisplayListJB: boolean sInitialized> in <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()> ==> <com.facebook.litho.displaylist.DisplayListJB: void <clinit>()>
STATIC edge: $r0 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("android.view.GLES20DisplayList") in <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()> ==> <java.lang.Class: java.lang.Class forName(java.lang.String)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sInternalNodePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sViewNodeInfoPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: z4 = staticinvoke <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>($r4, $r5) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: <java.lang.String: java.util.Comparator CASE_INSENSITIVE_ORDER> = null in <java.lang.String: void <clinit>()> ==> <java.lang.String: void <clinit>()>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.DebugDraw: int sign(float)>($f0) in <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)> ==> <com.facebook.litho.DebugDraw: int sign(float)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCornerLine(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i12, $i11) in <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCornerLine(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>
STATIC edge: $i9 = staticinvoke <com.facebook.litho.DebugDraw: int sign(float)>($f1) in <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)> ==> <com.facebook.litho.DebugDraw: int sign(float)>
STATIC edge: staticinvoke <com.facebook.litho.DebugDraw: void drawCornerLine(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>(r0, r1, i0, i1, $i5, $i8) in <com.facebook.litho.DebugDraw: void drawCorner(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int)> ==> <com.facebook.litho.DebugDraw: void drawCornerLine(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)>($r2, $r3) in <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)>($r2, $r3) in <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable fillInStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String getLocalizedMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void setStackTrace(java.lang.StackTraceElement[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: void printStackTrace(java.io.PrintWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable initCause(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Throwable: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void wait(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],int,int,java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(byte[],java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void <init>(java.lang.StringBuilder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int compareToIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String concat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String copyValueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean endsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean equalsIgnoreCase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getBytes(int,int,byte[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: byte[] getBytes(java.nio.charset.Charset)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean regionMatches(boolean,int,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean startsWith(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: char[] toCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toLowerCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String toUpperCase(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String trim()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contentEquals(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean matches(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String replaceFirst(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String[] split(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: boolean contains(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.String: java.lang.String format(java.util.Locale,java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.String: int compareTo(java.lang.String)>($r2) in <java.lang.String: int compareTo(java.lang.Object)> ==> <java.lang.String: int compareTo(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.RuntimeException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.'annotation'.Annotation[] getAnnotations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getCanonicalName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class[] getDeclaredClasses()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getDeclaredMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getEnumConstants()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field getField(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Field[] getFields()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type[] getGenericInterfaces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Type getGenericSuperclass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method getMethod(java.lang.String,java.lang.Class[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.Method[] getMethods()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String getSimpleName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.security.ProtectionDomain getProtectionDomain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.net.URL getResource(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.io.InputStream getResourceAsStream(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object[] getSigners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.reflect.TypeVariable[] getTypeParameters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isAnnotationPresent(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isEnum()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isLocalClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isMemberClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: boolean isSynthetic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object newInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Package getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Class asSubclass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Class: java.lang.Object cast(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Exception: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>()> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.AbstractStringBuilder: void <init>()>() in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.AbstractStringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.StringBuffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer appendCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: char charAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointBefore(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int codePointCount(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer delete(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer deleteCharAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void ensureCapacity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void getChars(int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int indexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer insert(int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int lastIndexOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: int offsetByCodePoints(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer replace(int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.StringBuffer reverse()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setCharAt(int,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void setLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.CharSequence subSequence(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String substring(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StringBuffer: void trimToSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int lastIndexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int lastIndexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>(r1) in <java.lang.StringBuffer: int indexOf(java.lang.String)> ==> <java.lang.AbstractStringBuilder: int indexOf(java.lang.String)>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int length()>() in <java.lang.StringBuffer: int length()> ==> <java.lang.AbstractStringBuilder: int length()>
SPECIAL edge: $i0 = specialinvoke r0.<java.lang.AbstractStringBuilder: int capacity()>() in <java.lang.StringBuffer: int capacity()> ==> <java.lang.AbstractStringBuilder: int capacity()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>(r1, i0, i1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence,int,int)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>(r1) in <java.lang.StringBuffer: java.lang.Appendable append(java.lang.CharSequence)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.CharSequence)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c0) in <java.lang.StringBuffer: java.lang.Appendable append(char)> ==> <java.lang.StringBuffer: java.lang.StringBuffer append(char)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassNotFoundException: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassFormatError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.LinkageError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String name()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int ordinal()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: int compareTo(java.lang.Enum)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Class getDeclaringClass()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Enum valueOf(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Enum: int compareTo(java.lang.Enum)>($r2) in <java.lang.Enum: int compareTo(java.lang.Object)> ==> <java.lang.Enum: int compareTo(java.lang.Enum)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>()> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Throwable: void <init>()>() in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.Throwable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Error: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(float)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compareTo(java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isInfinite(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: boolean isNaN(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: float parseFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: int compare(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.Float valueOf(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Float: java.lang.String toHexString(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Float: int compareTo(java.lang.Float)>($r2) in <java.lang.Float: int compareTo(java.lang.Object)> ==> <java.lang.Float: int compareTo(java.lang.Float)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(double)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compareTo(java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isInfinite(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: boolean isNaN(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: double parseDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: int compare(double,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.Double valueOf(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Double: java.lang.String toHexString(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Double: int compareTo(java.lang.Double)>($r2) in <java.lang.Double: int compareTo(java.lang.Object)> ==> <java.lang.Double: int compareTo(java.lang.Double)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AssertionError: void <init>(double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(int)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int compareTo(java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer getInteger(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int parseInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toBinaryString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toHexString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toOctalString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.String toString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int highestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int lowestOneBit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfLeadingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int numberOfTrailingZeros(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int bitCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateLeft(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int rotateRight(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverseBytes(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int reverse(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: int signum(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Integer: java.lang.Integer valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Integer: int compareTo(java.lang.Integer)>($r2) in <java.lang.Integer: int compareTo(java.lang.Object)> ==> <java.lang.Integer: int compareTo(java.lang.Integer)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NullPointerException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Character: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char charValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int compareTo(java.lang.Character)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.Character valueOf(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isValidCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSupplementaryCodePoint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isHighSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowSurrogate(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSurrogatePair(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int charCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toCodePoint(char,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointAt(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointBefore(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toChars(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char[] toChars(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int codePointCount(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int offsetByCodePoints(char[],int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int digit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char forDigit(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getNumericValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int getType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: byte getDirectionality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isMirrored(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDefined(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isIdentifierIgnorable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isISOControl(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isJavaLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLetterOrDigit(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isSpaceChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierPart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUnicodeIdentifierStart(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: boolean isWhitespace(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char reverseBytes(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toLowerCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toLowerCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: java.lang.String toString(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toTitleCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toTitleCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: char toUpperCase(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Character: int toUpperCase(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Character: int compareTo(java.lang.Character)>($r2) in <java.lang.Character: int compareTo(java.lang.Object)> ==> <java.lang.Character: int compareTo(java.lang.Character)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(long)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int compareTo(java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long getLong(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long parseLong(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toBinaryString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toHexString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toOctalString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.String toString(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long highestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long lowestOneBit(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfLeadingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int numberOfTrailingZeros(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int bitCount(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateLeft(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long rotateRight(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverseBytes(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: long reverse(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: int signum(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Long: java.lang.Long valueOf(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Long: int compareTo(java.lang.Long)>($r2) in <java.lang.Long: int compareTo(java.lang.Object)> ==> <java.lang.Long: int compareTo(java.lang.Long)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Short: void <init>(short)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: void <init>(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int compareTo(java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short parseShort(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.String toString(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: short reverseBytes(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Short: java.lang.Short valueOf(short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Short: int compareTo(java.lang.Short)>($r2) in <java.lang.Short: int compareTo(java.lang.Object)> ==> <java.lang.Short: int compareTo(java.lang.Short)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: void <init>(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean booleanValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int compareTo(java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: boolean parseBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.String toString(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Boolean: java.lang.Boolean valueOf(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Boolean: int compareTo(java.lang.Boolean)>($r2) in <java.lang.Boolean: int compareTo(java.lang.Object)> ==> <java.lang.Boolean: int compareTo(java.lang.Boolean)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(byte)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Number: void <init>()>() in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.Number: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte byteValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int compareTo(java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: double doubleValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: float floatValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: int intValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: long longValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: byte parseByte(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: short shortValue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.String toString(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Byte: java.lang.Byte valueOf(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<java.lang.Byte: int compareTo(java.lang.Byte)>($r2) in <java.lang.Byte: int compareTo(java.lang.Object)> ==> <java.lang.Byte: int compareTo(java.lang.Byte)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoClassDefFoundError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.StackOverflowError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.AbstractMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IncompatibleClassChangeError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCastException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.VerifyError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchFieldError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalMonitorStateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void <init>(java.lang.ThreadGroup,java.lang.Runnable,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int activeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void checkAccess()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int countStackFrames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread currentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void destroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void dumpStack()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int enumerate(java.lang.Thread[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.util.Map getAllStackTraces()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ClassLoader getContextClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getDefaultUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.StackTraceElement[] getStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$State getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.ThreadGroup getThreadGroup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.Thread$UncaughtExceptionHandler getUncaughtExceptionHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean interrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isDaemon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean isInterrupted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void join(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void resume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setContextClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDaemon(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setDefaultUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setName(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void setUncaughtExceptionHandler(java.lang.Thread$UncaughtExceptionHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void sleep(long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void stop(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void suspend()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: void yield()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Thread: boolean holdsLock(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnknownError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InternalError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArithmeticException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NegativeArraySizeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ClassCircularityError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.NoSuchMethodError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IndexOutOfBoundsException: void <init>()>() in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.IndexOutOfBoundsException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayIndexOutOfBoundsException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Error: void <init>()>() in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.Error: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ThreadDeath: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.InstantiationError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.IncompatibleClassChangeError: void <init>()>() in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.IncompatibleClassChangeError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.IllegalAccessError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.UnsatisfiedLinkError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ArrayStoreException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.LinkageError: void <init>()>() in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.LinkageError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.ExceptionInInitializerError: java.lang.Throwable getCause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.VirtualMachineError: void <init>()>() in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.VirtualMachineError: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.OutOfMemoryError: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility") in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility") in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.Context: java.lang.Object getSystemService(java.lang.String)>("accessibility") in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <android.app.Activity: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r2.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>() in <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)> ==> <android.view.accessibility.AccessibilityManager: boolean isEnabled()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Context: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: java.lang.String getString(int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Context: boolean isRestricted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: void interrupt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: java.util.List getAccessibilityServiceList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: java.util.List getInstalledAccessibilityServiceList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: java.util.List getEnabledAccessibilityServiceList(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.content.res.Resources$NotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$NotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.content.res.Resources$NotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$NotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender$SendIntentException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.pm.PackageManager$NameNotFoundException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager$NameNotFoundException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: java.io.InputStream open(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Resources getSystem()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getQuantityText(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getQuantityString(int,int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getQuantityString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence getText(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.CharSequence[] getTextArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String[] getStringArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int[] getIntArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: float getDimension(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getDimensionPixelOffset(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getDimensionPixelSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: float getFraction(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.drawable.Drawable getDrawableForDensity(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.graphics.Movie getMovie(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.ColorStateList getColorStateList(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: boolean getBoolean(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getInteger(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getLayout(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getAnimation(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.XmlResourceParser getXml(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.io.InputStream openRawResource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.io.InputStream openRawResource(int,android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.AssetFileDescriptor openRawResourceFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValue(int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValueForDensity(int,int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void getValue(java.lang.String,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Resources$Theme newTheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.Configuration getConfiguration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourcePackageName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceTypeName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: java.lang.String getResourceEntryName(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void parseBundleExtras(android.content.res.XmlResourceParser,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void parseBundleExtra(java.lang.String,android.util.AttributeSet,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: android.content.res.AssetManager getAssets()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void flushLayoutCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources: void finishPreloading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentResolver: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.String getType(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.InputStream openInputStream(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.io.OutputStream openOutputStream(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.os.ParcelFileDescriptor openFileDescriptor(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.res.AssetFileDescriptor openAssetFileDescriptor(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderResult[] applyBatch(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.os.Bundle call(android.net.Uri,java.lang.String,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.ContentProviderClient acquireContentProviderClient(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void registerContentObserver(android.net.Uri,boolean,android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void unregisterContentObserver(android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void startSync(android.net.Uri,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void requestSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void validateSyncExtrasBundle(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void cancelSync(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void cancelSync(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.SyncAdapterType[] getSyncAdapterTypes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setSyncAutomatically(android.accounts.Account,java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: int getIsSyncable(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setIsSyncable(android.accounts.Account,java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean getMasterSyncAutomatically()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void setMasterSyncAutomatically(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean isSyncActive(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: android.content.SyncInfo getCurrentSync()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.util.List getCurrentSyncs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: boolean isSyncPending(android.accounts.Account,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: java.lang.Object addStatusChangeListener(int,android.content.SyncStatusObserver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentResolver: void removeStatusChangeListener(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void prepare()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void prepareMainLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.Looper getMainLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void loop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.Looper myLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void setMessageLogging(android.util.Printer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: android.os.MessageQueue myQueue()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void quit()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: java.lang.Thread getThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Looper: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void applyStyle(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: boolean resolveAttribute(int,android.util.TypedValue,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Resources$Theme: void dump(int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int length()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getIndexCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.content.res.Resources getResources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getNonResourceString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean getBoolean(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getInt(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getFloat(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getColor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.content.res.ColorStateList getColorStateList(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getInteger(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getDimension(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getDimensionPixelSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getLayoutDimension(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: float getFraction(int,int,int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: int getResourceId(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.graphics.drawable.Drawable getDrawable(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.CharSequence[] getTextArray(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: boolean hasValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: android.util.TypedValue peekValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String getPositionDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.TypedArray: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ApplicationInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void endTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean inTransaction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContended()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int getVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setVersion(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long getMaximumSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long getPageSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setPageSize(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isOpen()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.drawable.Drawable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setChangingConfigurations(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setDither(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setFilterBitmap(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void invalidateSelf()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void setColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void clearColorFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean isStateful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setState(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int[] getState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void jumpToCurrentState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setLevel(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getLevel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean isVisible()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int resolveOpacity(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getIntrinsicWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getIntrinsicHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getMinimumWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: int getMinimumHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromStream(java.io.InputStream,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,java.lang.String,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromXmlInner(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable createFromPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getDensity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setDensity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean isRecycled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getGenerationId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: byte[] getNinePatchChunk()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean isMutable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledWidth(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getScaledHeight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getRowBytes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getByteCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean hasAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setHasAlpha(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void eraseColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int getPixel(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setPixel(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Bitmap: void prepareToDraw()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String,android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent createChooser(android.content.Intent,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent cloneFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeMainSelectorActivity(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getIntent(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent parseUri(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getIntentOld(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.net.Uri getData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getDataString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getScheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveType(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveType(android.content.ContentResolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String resolveTypeIfNeeded(android.content.ContentResolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.Set getCategories()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent getSelector()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean hasFileDescriptors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean getBooleanExtra(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: byte getByteExtra(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: short getShortExtra(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: char getCharExtra(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int getIntExtra(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: long getLongExtra(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: float getFloatExtra(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: double getDoubleExtra(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getStringExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.CharSequence getCharSequenceExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Parcelable getParcelableExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Parcelable[] getParcelableArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getParcelableArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.io.Serializable getSerializableExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getIntegerArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getStringArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.util.ArrayList getCharSequenceArrayListExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean[] getBooleanArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: byte[] getByteArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: short[] getShortArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: char[] getCharArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int[] getIntArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: long[] getLongArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: float[] getFloatArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: double[] getDoubleArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String[] getStringArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.CharSequence[] getCharSequenceArrayExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Bundle getBundleExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.os.Bundle getExtras()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int getFlags()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.ComponentName getComponent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.graphics.Rect getSourceBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.ComponentName resolveActivity(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.pm.ActivityInfo resolveActivityInfo(android.content.pm.PackageManager,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setData(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent addCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void removeCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setSelector(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Parcelable[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putParcelableArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putIntegerArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putStringArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putCharSequenceArrayListExtra(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,short[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtra(java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtras(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent putExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void removeExtra(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent addFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setPackage(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void setSourceBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int fillIn(android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: boolean filterEquals(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int filterHashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toURI()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: java.lang.String toUri(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent: android.content.Intent parseIntent(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void sendIntent(android.content.Context,int,android.content.Intent,android.content.IntentSender$OnFinished,android.os.Handler,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: java.lang.String getTargetPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.BroadcastReceiver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.os.IBinder peekService(android.content.Context,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultCode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: int getResultCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultData(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: java.lang.String getResultData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean getAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void abortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void clearAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean isOrderedBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setOrderedHint(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: void setDebugUnregister(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver: boolean getDebugUnregister()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Handler$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Handler$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Looper)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Looper)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void handleMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void dispatchMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: java.lang.String getMessageName(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean post(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtTime(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacks(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessage(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessageDelayed(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendEmptyMessageAtTime(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeMessages(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeMessages(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean hasMessages(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: boolean hasMessages(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: android.os.Looper getLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Handler: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(java.lang.ClassLoader)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Bundle: void <init>(android.os.Bundle)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void <init>(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void setClassLoader(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean containsKey(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Object get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void remove(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putAll(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.Set keySet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean hasFileDescriptors()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBoolean(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putByte(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putChar(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putShort(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putFloat(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putDouble(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putString(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putSparseParcelableArray(java.lang.String,android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequenceArrayList(java.lang.String,java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putByteArray(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putShortArray(java.lang.String,short[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharArray(java.lang.String,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putIntArray(java.lang.String,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putLongArray(java.lang.String,long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putFloatArray(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putDoubleArray(java.lang.String,double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putCharSequenceArray(java.lang.String,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean getBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean getBoolean(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: byte getByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.Byte getByte(java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char getChar(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char getChar(java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short getShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short getShort(java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int getInt(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int getInt(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long getLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long getLong(java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float getFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float getFloat(java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double getDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double getDouble(java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String getString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String getString(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence getCharSequence(java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Bundle getBundle(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Parcelable getParcelable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.os.Parcelable[] getParcelableArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getParcelableArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: android.util.SparseArray getSparseParcelableArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.io.Serializable getSerializable(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getIntegerArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getStringArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.util.ArrayList getCharSequenceArrayList(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: boolean[] getBooleanArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: byte[] getByteArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: short[] getShortArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: char[] getCharArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int[] getIntArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: long[] getLongArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: float[] getFloatArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: double[] getDoubleArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String[] getStringArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.CharSequence[] getCharSequenceArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Bundle: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter: void <init>(android.content.IntentFilter)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void <init>(android.content.IntentFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void setPriority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int getPriority()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countActions()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getAction(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean matchAction(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator actionsIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataTypes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getDataType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator typesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataScheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataSchemes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getDataScheme(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataScheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator schemesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataAuthorities()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator authoritiesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addDataPath(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countDataPaths()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasDataPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator pathsIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int matchDataAuthority(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void addCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int countCategories()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String getCategory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: boolean hasCategory(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.util.Iterator categoriesIterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int match(android.content.ContentResolver,android.content.Intent,boolean,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.content.Context,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ComponentName: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getPackageName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String getShortClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String flattenToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String flattenToShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int compareTo(android.content.ComponentName)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.ComponentName: android.content.ComponentName clone()>() in <android.content.ComponentName: java.lang.Object clone()> ==> <android.content.ComponentName: android.content.ComponentName clone()>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.ComponentName: int compareTo(android.content.ComponentName)>($r2) in <android.content.ComponentName: int compareTo(java.lang.Object)> ==> <android.content.ComponentName: int compareTo(android.content.ComponentName)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean isOpaque()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean isAbsolute()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: int compareTo(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri parse(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri fromFile(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.util.Set getQueryParameterNames()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.util.List getQueryParameters(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String getQueryParameter(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String encode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: java.lang.String decode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: int getRecordCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: int getEventType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void setEventType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: long getEventTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void setEventTime(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void initFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseArray: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: android.util.SparseArray clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object get(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object get(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void delete(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void remove(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void removeAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void put(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int keyAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: java.lang.Object valueAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void setValueAt(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int indexOfKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: int indexOfValue(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseArray: void append(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.util.SparseArray: android.util.SparseArray clone()>() in <android.util.SparseArray: java.lang.Object clone()> ==> <android.util.SparseArray: android.util.SparseArray clone()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcel obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByteArray(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByteArray(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStrongInterface(android.os.IInterface)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeByte(byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeMap(java.util.Map)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBundle(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeArray(java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSparseArray(android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBooleanArray(boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: boolean[] createBooleanArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBooleanArray(boolean[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeCharArray(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: char[] createCharArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readCharArray(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeIntArray(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: int[] createIntArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readIntArray(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeLongArray(long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: long[] createLongArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readLongArray(long[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeFloatArray(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: float[] createFloatArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readFloatArray(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeDoubleArray(double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: double[] createDoubleArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readDoubleArray(double[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStringArray(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.String[] createStringArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readStringArray(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBinderArray(android.os.IBinder[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.IBinder[] createBinderArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBinderArray(android.os.IBinder[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeTypedList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeStringList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeBinderList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeTypedArray(android.os.Parcelable[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeValue(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeParcelable(android.os.Parcelable,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeSerializable(java.io.Serializable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeException(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeNoException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readException()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readException(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: byte readByte()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readMap(java.util.Map,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readList(java.util.List,java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.HashMap readHashMap(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Bundle readBundle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readByteArray(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList readArrayList(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object[] readArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.util.SparseArray readSparseArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createTypedArrayList(android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readTypedList(java.util.List,android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createStringArrayList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.util.ArrayList createBinderArrayList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readStringList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readBinderList(java.util.List)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object[] createTypedArray(android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void readTypedArray(java.lang.Object[],android.os.Parcelable$Creator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: void writeParcelableArray(android.os.Parcelable[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.lang.Object readValue(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcelable readParcelable(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: android.os.Parcelable[] readParcelableArray(java.lang.ClassLoader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Parcel: java.io.Serializable readSerializable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionGroupInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: java.lang.CharSequence loadDescription(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PermissionGroupInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ActivityInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: int getThemeResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ActivityInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ServiceInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ServiceInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ProviderInfo: void <init>()> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.ComponentInfo: void <init>()>() in <android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)> ==> <android.content.pm.ComponentInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ProviderInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.FeatureInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ResolveInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: int getIconResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.InstrumentationInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.InstrumentationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.util.AndroidException: void <init>(java.lang.Exception)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.net.Uri$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder opaquePart(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedOpaquePart(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: android.net.Uri build()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.net.Uri$Builder: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Configuration: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.Configuration: void <init>(android.content.res.Configuration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void <init>(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void setTo(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void setToDefaults()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int updateFrom(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int diff(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean needNewResources(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int compareTo(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean equals(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.Configuration: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>($r2) in <android.content.res.Configuration: int compareTo(java.lang.Object)> ==> <android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void <init>(java.lang.String,org.xmlpull.v1.XmlPullParser,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: java.lang.Throwable getDetail()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: int getLineNumber()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: int getColumnNumber()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <org.xmlpull.v1.XmlPullParserException: void printStackTrace()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Canvas: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Canvas: void <init>(android.graphics.Bitmap)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void <init>(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean isHardwareAccelerated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getDensity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setDensity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getMaximumBitmapWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int getMaximumBitmapHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void scale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void rotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void concat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void getMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.Matrix getMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean clipRegion(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: android.graphics.Rect getClipBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRGB(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawARGB(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPaint(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawText(java.lang.CharSequence,int,int,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>(int,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rect: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: java.lang.String flattenToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int width()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int height()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int centerX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int centerY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: float exactCenterX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: float exactCenterY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void set(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void offset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void offsetTo(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void inset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean contains(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersect(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersects(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void union(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void sort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rect: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.ColorFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.ColorFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Region: void <init>(int,int,int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void <init>(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean set(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: android.graphics.Rect getBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean getBounds(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: android.graphics.Path getBoundaryPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean quickContains(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean quickReject(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void translate(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean union(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.TypedValue: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getFloat()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToFloat(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getDimension(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float complexToFraction(int,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: float getFraction(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.CharSequence coerceToString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.String coerceToString(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: void setTo(android.util.TypedValue)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.TypedValue: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.BitmapFactory$Options: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory$Options: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory$Options: void requestCancelDecode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.drawable.Drawable$ConstantState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable$ConstantState: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.Drawable$ConstantState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.sqlite.SQLiteClosable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void acquireReference()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void releaseReference()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.database.SQLException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.SQLException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.database.SQLException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.SQLException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: void execute()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: long executeInsert()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentValues: void <init>(android.content.ContentValues)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void <init>(android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void putAll(android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Integer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void put(java.lang.String,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void putNull(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void remove(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: boolean containsKey(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Object get(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.String getAsString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Long getAsLong(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Integer getAsInteger(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Short getAsShort(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Byte getAsByte(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Double getAsDouble(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Float getAsFloat(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.Boolean getAsBoolean(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: byte[] getAsByteArray(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.util.Set valueSet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.util.Set keySet()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentValues: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.os.RemoteException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.RemoteException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.os.RemoteException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.RemoteException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.Throwable)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(int)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.content.OperationApplicationException: void <init>(java.lang.String,int)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int getFd()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int detachFd()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getStartOffset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: long getDeclaredLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProviderResult: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderResult: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: java.lang.String getType(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int delete(android.net.Uri,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.res.AssetFileDescriptor openTypedAssetFileDescriptor(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: boolean release()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.ContentObserver: void <init>(android.os.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void <init>(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: boolean deliverSelfNotifications()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void onChange(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.ContentObserver: void dispatchChange(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.accounts.Account: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.accounts.Account: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.accounts.Account: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void <init>(java.lang.String,java.lang.String,boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.SyncAdapterType: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean supportsUploading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean isUserVisible()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean allowParallelSyncs()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean isAlwaysSyncable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: java.lang.String getSettingsActivity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: android.content.SyncAdapterType newKey(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Message: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void copyFrom(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: long getWhen()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void setTarget(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Handler getTarget()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: java.lang.Runnable getCallback()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Bundle getData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: android.os.Bundle peekData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void setData(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void sendToTarget()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Message: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentFilter$MalformedMimeTypeException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$MalformedMimeTypeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: int getPort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.PatternMatcher: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.PatternMatcher: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: java.lang.String getPath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: int getType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: boolean match(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultCode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: int getResultCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultData(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResultExtras(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void setResult(int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: boolean getAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void abortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void clearAbortBroadcast()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.BroadcastReceiver$PendingResult: void finish()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadIcon(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadLogo(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: android.content.res.XmlResourceParser loadXmlMetaData(android.content.pm.PackageManager,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>($r4, $r3) in <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.ApplicationInfo$DisplayNameComparator: int compare(android.content.pm.ApplicationInfo,android.content.pm.ApplicationInfo)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent$FilterComparison: void <init>(android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: void <init>(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: android.content.Intent getIntent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$FilterComparison: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Intent$ShortcutIconResource: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: android.content.Intent$ShortcutIconResource fromContext(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Intent$ShortcutIconResource: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.res.ColorStateList: void <init>(int[][],int[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: void <init>(int[][],int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList createFromXml(android.content.res.Resources,org.xmlpull.v1.XmlPullParser)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: boolean isStateful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int getColorForState(int[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int getDefaultColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int getAssetInt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: boolean markSupported()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int available()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void mark(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetManager$AssetInputStream: long skip(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteQuery: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteQuery: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Matrix: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void <init>(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean isIdentity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean rectStaysRect()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void set(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSinCos(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSinCos(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postTranslate(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postScale(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postScale(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postRotate(float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postRotate(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postSkew(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postSkew(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean invert(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[],float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[],float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapPoints(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void mapVectors(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: boolean mapRect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: float mapRadius(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void getValues(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void setValues(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.DisplayMetrics: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: void setToDefaults()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.DisplayMetrics: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void <init>(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void set(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isAntiAlias()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isDither()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isLinearText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isSubpixelText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isUnderlineText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isStrikeThruText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isFakeBoldText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean isFilterBitmap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Style getStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStyle(android.graphics.Paint$Style)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setARGB(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Shader getShader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.ColorFilter getColorFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Xfermode getXfermode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.PathEffect getPathEffect()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Typeface getTypeface()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Rasterizer getRasterizer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setShadowLayer(float,float,float,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void clearShadowLayer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$Align getTextAlign()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float getFontSpacing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(char[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: float measureText(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(char[],int,int,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(java.lang.CharSequence,int,int,boolean,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(char[],int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.CharSequence,int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: int getTextWidths(java.lang.String,float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Movie: void draw(android.graphics.Canvas,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityNodeInfo getSource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getWindowId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: boolean isChecked()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setChecked(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: boolean isPassword()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setPassword(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: boolean isFullScreen()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: boolean isScrollable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getItemCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setItemCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getFromIndex()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setFromIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getToIndex()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setToIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getScrollX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setScrollX(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getScrollY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setScrollY(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getMaxScrollX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getMaxScrollY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getAddedCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setAddedCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: int getRemovedCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: java.util.List getText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityRecord: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseBooleanArray: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.SparseBooleanArray: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean get(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean get(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void delete(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void put(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int size()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int keyAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: boolean valueAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int indexOfKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: int indexOfValue(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.SparseBooleanArray: void append(int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>() in <android.util.SparseBooleanArray: java.lang.Object clone()> ==> <android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.Signature: void <init>(byte[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void <init>(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.Signature: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: char[] toChars()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: char[] toChars(char[],int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: java.lang.String toCharsString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: byte[] toByteArray()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ConfigurationInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ComponentInfo: void <init>()> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.pm.PackageItemInfo: void <init>()>() in <android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)> ==> <android.content.pm.PackageItemInfo: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: java.lang.CharSequence loadLabel(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: int getIconResource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ComponentInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.PatternMatcher: void <init>(android.os.Parcel)>($r1) in <android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <android.os.PatternMatcher: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.PatternMatcher: void <init>(android.os.Parcel)>($r1) in <android.content.pm.PathPermission: void <init>(android.os.Parcel)> ==> <android.os.PatternMatcher: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: java.lang.String getReadPermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: java.lang.String getWritePermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>($r4, $r3) in <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.ResolveInfo$DisplayNameComparator: int compare(android.content.pm.ResolveInfo,android.content.pm.ResolveInfo)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(float,float,float,float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(android.graphics.RectF)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.RectF: void <init>(android.graphics.Rect)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void <init>(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float width()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float height()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float centerX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: float centerY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void setEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void set(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void offset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void offsetTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void inset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean contains(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersect(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersects(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void round(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void roundOut(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void union(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void sort()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.RectF: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Region$Op: android.graphics.Region$Op[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Path: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void <init>(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rewind()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void set(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: android.graphics.Path$FillType getFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void setFillType(android.graphics.Path$FillType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isInverseFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void toggleInverseFillType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isEmpty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: boolean isRect(android.graphics.RectF)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void incReserve(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void moveTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rMoveTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void lineTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rLineTo(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void quadTo(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rQuadTo(float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void cubicTo(float,float,float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void rCubicTo(float,float,float,float,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void arcTo(android.graphics.RectF,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addArc(android.graphics.RectF,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path,float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void offset(float,float,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void offset(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void setLastPoint(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void transform(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.DrawFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.DrawFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$EdgeType: android.graphics.Canvas$EdgeType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Canvas$VertexMode: android.graphics.Canvas$VertexMode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Picture: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void <init>(android.graphics.Picture)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void endRecording()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void draw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void writeToStream(java.io.OutputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.PorterDuff: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PorterDuff: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.BitmapFactory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: int getUniqueId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindNull(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindLong(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void clearBindings()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.CharArrayBuffer: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.CharArrayBuffer: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.CharArrayBuffer: void <init>(char[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.CharArrayBuffer: void <init>(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.database.DataSetObserver: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void onChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.database.DataSetObserver: void onInvalidated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>($r1) in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: long skip(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void mark(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: boolean markSupported()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseInputStream: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>($r1) in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>($r1) in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.io.FileOutputStream: void <init>(java.io.FileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.io.FileInputStream: void <init>(java.io.FileDescriptor)>($r1) in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.io.FileInputStream: void <init>(java.io.FileDescriptor)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ContentProvider: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String getReadPermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String getWritePermission()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onLowMemory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void onTrimMemory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.ParcelFileDescriptor openPipeHelper(android.net.Uri,java.lang.String,android.os.Bundle,java.lang.Object,android.content.ContentProvider$PipeDataWriter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContentProvider: void shutdown()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Messenger: void <init>(android.os.Handler)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void <init>(android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Messenger: void <init>(android.os.IBinder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void <init>(android.os.IBinder)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void send(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: android.os.IBinder getBinder()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>($r4, $r3) in <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(java.lang.Object,java.lang.Object)> ==> <android.content.pm.PackageItemInfo$DisplayNameComparator: int compare(android.content.pm.PackageItemInfo,android.content.pm.PackageItemInfo)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Style: android.graphics.Paint$Style[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Cap: android.graphics.Paint$Cap[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Join: android.graphics.Paint$Join[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Shader: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Xfermode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Xfermode: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.PathEffect: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PathEffect: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.MaskFilter: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.MaskFilter: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: int getStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: boolean isBold()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: boolean isItalic()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface create(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Rasterizer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rasterizer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Paint$Align: android.graphics.Paint$Align[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint$FontMetrics: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetrics: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Paint$FontMetricsInt: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetricsInt: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint$FontMetricsInt: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Matrix$ScaleToFit: android.graphics.Matrix$ScaleToFit[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getVerticalFadingEdgeLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setFadingEdgeLength(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getHorizontalFadingEdgeLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getVerticalScrollbarWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setVerticalScrollbarPosition(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getVerticalScrollbarPosition()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnClickListener(android.view.View$OnClickListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean hasOnClickListeners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnCreateContextMenuListener(android.view.View$OnCreateContextMenuListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean performClick()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean callOnClick()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean performLongClick()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean showContextMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnDragListener(android.view.View$OnDragListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void clearFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean hasFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean hasFocusable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void sendAccessibilityEvent(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void sendAccessibilityEventUnchecked(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onInitializeAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: java.lang.CharSequence getContentDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setContentDescription(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isFocused()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View findFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScrollContainer(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getDrawingCacheQuality()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setDrawingCacheQuality(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean getKeepScreenOn()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setKeepScreenOn(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getNextFocusLeftId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setNextFocusLeftId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getNextFocusRightId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setNextFocusRightId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getNextFocusUpId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setNextFocusUpId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getNextFocusDownId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setNextFocusDownId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getNextFocusForwardId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setNextFocusForwardId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isShown()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setFitsSystemWindows(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean fitsSystemWindows()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getVisibility()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setVisibility(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setFocusable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setFocusableInTouchMode(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setSoundEffectsEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isSoundEffectsEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setHapticFeedbackEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isHapticFeedbackEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setWillNotDraw(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean willNotDraw()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setWillNotCacheDrawing(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean willNotCacheDrawing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isClickable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setClickable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isLongClickable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setLongClickable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setPressed(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isSaveEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setSaveEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean getFilterTouchesWhenObscured()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setFilterTouchesWhenObscured(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isSaveFromParentEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setSaveFromParentEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isFocusable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isFocusableInTouchMode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View focusSearch(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchUnhandledMove(android.view.View,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: java.util.ArrayList getFocusables(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void addFocusables(java.util.ArrayList,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void addFocusables(java.util.ArrayList,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: java.util.ArrayList getTouchables()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void addTouchables(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestFocus(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestFocus(int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean requestFocusFromTouch()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onStartTemporaryDetach()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onFinishTemporaryDetach()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void dispatchWindowFocusChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onWindowFocusChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean hasWindowFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void dispatchDisplayHint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void dispatchWindowVisibilityChanged(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getWindowVisibility()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getWindowVisibleDisplayFrame(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void dispatchConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isInTouchMode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyDown(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyUp(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onCheckIsTextEditor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean checkInputConnectionProxy(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void createContextMenu(android.view.ContextMenu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onHoverEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isHovered()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setHovered(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void onHoverChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void cancelLongPress()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTouchDelegate(android.view.TouchDelegate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.TouchDelegate getTouchDelegate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void bringToFront()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.ViewParent getParent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScrollX(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScrollY(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getScrollX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getScrollY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getDrawingRect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getMeasuredWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getMeasuredWidthAndState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getMeasuredHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getMeasuredHeightAndState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getMeasuredState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.graphics.Matrix getMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setCameraDistance(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getRotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setRotation(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getRotationY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setRotationY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getRotationX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setRotationX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getScaleX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScaleX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getScaleY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScaleY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getPivotX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setPivotX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getPivotY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setPivotY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setAlpha(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getTop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTop(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getBottom()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isDirty()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setBottom(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getLeft()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setLeft(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getRight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setRight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getTranslationX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTranslationX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: float getTranslationY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTranslationY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getHitRect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getFocusedRect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void offsetTopAndBottom(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void offsetLeftAndRight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void scrollTo(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void scrollBy(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void invalidate(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void invalidate(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void invalidate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isOpaque()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.os.Handler getHandler()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean post(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean postDelayed(java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean removeCallbacks(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void postInvalidate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void postInvalidate(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void postInvalidateDelayed(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void postInvalidateDelayed(long,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void computeScroll()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isHorizontalFadingEdgeEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setHorizontalFadingEdgeEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isVerticalFadingEdgeEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setVerticalFadingEdgeEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isHorizontalScrollBarEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setHorizontalScrollBarEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isVerticalScrollBarEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setVerticalScrollBarEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScrollbarFadingEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isScrollbarFadingEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setScrollBarStyle(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getScrollBarStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean canScrollHorizontally(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean canScrollVertically(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.os.IBinder getWindowToken()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.os.IBinder getApplicationWindowToken()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void saveHierarchyState(android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void restoreHierarchyState(android.util.SparseArray)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: long getDrawingTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setDuplicateParentStateEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isDuplicateParentStateEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setLayerType(int,android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getLayerType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void buildLayer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setDrawingCacheEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isDrawingCacheEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.graphics.Bitmap getDrawingCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.graphics.Bitmap getDrawingCache(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void destroyDrawingCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setDrawingCacheBackgroundColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getDrawingCacheBackgroundColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void buildDrawingCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void buildDrawingCache(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isInEditMode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isHardwareAccelerated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void draw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getSolidColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isLayoutRequested()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void layout(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.content.res.Resources getResources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void refreshDrawableState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int[] getDrawableState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void jumpDrawablesToCurrentState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setBackgroundColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setBackgroundResource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.graphics.drawable.Drawable getBackground()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setPadding(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getPaddingTop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getPaddingBottom()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getPaddingLeft()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getPaddingRight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setSelected(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isSelected()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setActivated(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean isActivated()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.ViewTreeObserver getViewTreeObserver()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View getRootView()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getLocationOnScreen(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void getLocationInWindow(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View findViewById(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View findViewWithTag(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: java.lang.Object getTag()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTag(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: java.lang.Object getTag(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setTag(int,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getBaseline()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void requestLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void forceLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void measure(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int combineMeasuredStates(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int resolveSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int resolveSizeAndState(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getDefaultSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setMinimumHeight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setMinimumWidth(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.animation.Animation getAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void startAnimation(android.view.animation.Animation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void clearAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setAnimation(android.view.animation.Animation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void playSoundEffect(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean performHapticFeedback(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean performHapticFeedback(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setSystemUiVisibility(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getSystemUiVisibility()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void dispatchSystemUiVisibilityChanged(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean onDragEvent(android.view.DragEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: boolean dispatchDragEvent(android.view.DragEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: int getOverScrollMode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: void setOverScrollMode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View: android.view.ViewPropertyAnimator animate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: int getWindowId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: int getChildCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getChild(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: int getActions()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void addAction(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean performAction(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.util.List findAccessibilityNodeInfosByText(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo getParent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$FillType: android.graphics.Path$FillType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Path$Direction: android.graphics.Path$Direction[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.graphics.Shader$TileMode: android.graphics.Shader$TileMode[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.util.Property: void <init>(java.lang.Class,java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: void <init>(java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: android.util.Property of(java.lang.Class,java.lang.Class,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: boolean isReadOnly()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: void set(java.lang.Object,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Property: java.lang.Class getType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ActionMode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionMode: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionMode: void setTag(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionMode: java.lang.Object getTag()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View$AccessibilityDelegate: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.KeyEvent$DispatcherState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,long,int,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,long,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,long,int,int,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,long,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(long,java.lang.String,int,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(long,java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(android.view.KeyEvent)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.InputEvent: void <init>()>() in <android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)> ==> <android.view.InputEvent: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getMaxKeyCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getDeadChar(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isSystem()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isGamepadButton(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getDeviceId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getSource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void setSource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getMetaState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getFlags()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getModifierMetaStateMask()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isModifierKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int normalizeMetaState(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean metaStateHasNoModifiers(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean metaStateHasModifiers(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean hasNoModifiers()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean hasModifiers(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isAltPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isShiftPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isSymPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isCtrlPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isMetaPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isFunctionPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isCapsLockOn()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isNumLockOn()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isScrollLockOn()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isCanceled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void startTracking()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isTracking()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isLongPress()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getKeyCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: java.lang.String getCharacters()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getScanCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getRepeatCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: long getDownTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: long getEventTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: char getDisplayLabel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getUnicodeChar()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int getUnicodeChar(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: char getMatch(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: char getMatch(char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: char getNumber()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean isPrintingKey()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: boolean dispatch(android.view.KeyEvent$Callback,android.view.KeyEvent$DispatcherState,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: java.lang.String keyCodeToString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: int keyCodeFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void recycle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getDeviceId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getSource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void setSource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getActionMasked()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getActionIndex()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getFlags()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: long getDownTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: long getEventTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getPressure()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getTouchMajor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getTouchMinor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getToolMajor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getToolMinor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getOrientation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getAxisValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getPointerCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getPointerId(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getToolType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int findPointerIndex(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getX(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getY(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getPressure(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getTouchMajor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getTouchMinor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getToolMajor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getToolMinor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getOrientation(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getAxisValue(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getMetaState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getButtonState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getRawX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getRawY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getXPrecision()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getYPrecision()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getHistorySize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: long getHistoricalEventTime(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalX(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalY(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalPressure(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalTouchMajor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalTouchMinor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalToolMajor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalToolMinor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalOrientation(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalAxisValue(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalX(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalY(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalPressure(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalTouchMajor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalTouchMinor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalToolMajor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalToolMinor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalOrientation(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int getEdgeFlags()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void setEdgeFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void setAction(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void offsetLocation(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void setLocation(float,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void transform(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void addBatch(long,float,float,float,float,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: java.lang.String axisToString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: int axisFromString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.EditorInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.EditorInfo: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.EditorInfo: void makeCompatible(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.EditorInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.EditorInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.TouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Point: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Point: void <init>(int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.Point: void <init>(android.graphics.Point)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void <init>(android.graphics.Point)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void set(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void negate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void offset(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: boolean equals(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Point: void readFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ViewGroup$LayoutParams: void <init>(int,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$LayoutParams: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: boolean isAlive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: void dispatchOnGlobalLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewTreeObserver: boolean dispatchOnPreDraw()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.Animation: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void cancel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean isInitialized()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void initialize(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setInterpolator(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setStartOffset(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setDuration(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void restrictDuration(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void scaleCurrentDuration(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setStartTime(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void startNow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setRepeatMode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setRepeatCount(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean isFillEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setFillEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setFillBefore(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setFillAfter(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setZAdjustment(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setBackgroundColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setDetachWallpaper(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: long getStartTime()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: long getDuration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: long getStartOffset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: int getRepeatMode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: int getRepeatCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean getFillBefore()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean getFillAfter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: int getZAdjustment()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: int getBackgroundColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean getDetachWallpaper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean willChangeTransformationMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean willChangeBounds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: long computeDurationHint()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean hasStarted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: boolean hasEnded()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipData newUri(android.content.ContentResolver,java.lang.CharSequence,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipDescription getDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: void addItem(android.content.ClipData$Item)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: int getItemCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: android.content.ClipData$Item getItemAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View$DragShadowBuilder: void <init>(android.view.View)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$DragShadowBuilder: void <init>(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View$DragShadowBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$DragShadowBuilder: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$DragShadowBuilder: android.view.View getView()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$DragShadowBuilder: void onDrawShadow(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: int getAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: float getX()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: float getY()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: android.content.ClipData getClipData()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: android.content.ClipDescription getClipDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: java.lang.Object getLocalState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: boolean getResult()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.DragEvent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.view.ViewGroup: void <init>(android.content.Context)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: int getDescendantFocusability()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setDescendantFocusability(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void requestChildFocus(android.view.View,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void focusableViewAvailable(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean showContextMenuForChild(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.View focusSearch(android.view.View,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean requestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchUnhandledMove(android.view.View,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void clearChildFocus(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void clearFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.View getFocusedChild()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean hasFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.View findFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean hasFocusable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addFocusables(java.util.ArrayList,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addFocusables(java.util.ArrayList,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void findViewsWithText(java.util.ArrayList,java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchWindowFocusChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addTouchables(java.util.ArrayList)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchDisplayHint(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchWindowVisibilityChanged(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void recomputeViewAttributes(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void bringChildToFront(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchDragEvent(android.view.DragEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchKeyEventPreIme(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean isMotionEventSplittingEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean requestFocus(int,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setPadding(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setClipChildren(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setClipToPadding(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchSetSelected(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchSetActivated(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addView(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addView(android.view.View,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addView(android.view.View,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addView(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeView(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeViewInLayout(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeViewsInLayout(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeViewAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeViews(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeAllViews()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void removeAllViewsInLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void layout(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void startLayoutAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void scheduleLayoutAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean isAnimationCacheEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setAnimationCacheEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: int getPersistentDrawingCache()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setPersistentDrawingCache(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: int indexOfChild(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: int getChildCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.View getChildAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: int getChildMeasureSpec(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void clearDisappearingChildren()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void startViewTransition(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void endViewTransition(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void requestTransparentRegion(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void jumpDrawablesToCurrentState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setAddStatesFromChildren(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean addStatesFromChildren()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void childDrawableStateChanged(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean shouldDelayChildPressedState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: long getDuration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: long getStartDelay()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: void cancel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator x(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator xBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator y(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator yBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotation(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationXBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator rotationYBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationXBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator translationYBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleX(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleXBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleY(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator scaleYBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alpha(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator alphaBy(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.AbsSavedState: void <init>(android.os.Parcel)>($r1) in <android.view.View$BaseSavedState: void <init>(android.os.Parcel)> ==> <android.view.AbsSavedState: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$BaseSavedState: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.AbsSavedState: void <init>(android.os.Parcel)>($r1) in <android.view.View$BaseSavedState: void <init>(android.os.Parcelable)> ==> <android.view.AbsSavedState: void <init>(android.os.Parcel)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$BaseSavedState: void <init>(android.os.Parcelable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.View$MeasureSpec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$MeasureSpec: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$MeasureSpec: int getMode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$MeasureSpec: int getSize(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.View$MeasureSpec: java.lang.String toString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.AbsSavedState: android.os.Parcelable getSuperState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.AbsSavedState: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.AbsSavedState: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.MenuInflater: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MenuInflater: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MenuInflater: void inflate(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.Transformation: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: int getTransformationType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void setTransformationType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void set(android.view.animation.Transformation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void compose(android.view.animation.Transformation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: android.graphics.Matrix getMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: void setAlpha(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: float getAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Transformation: java.lang.String toShortString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ViewDebug: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void stopRecyclerTracing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void stopHierarchyTracing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewDebug: void dumpCapturedView(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipDescription: void <init>(android.content.ClipDescription)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: void <init>(android.content.ClipDescription)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: java.lang.CharSequence getLabel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: boolean hasMimeType(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: int getMimeTypeCount()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: java.lang.String getMimeType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipDescription: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.animation.LayoutTransition: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setDuration(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setStartDelay(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: long getStartDelay(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setDuration(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: long getDuration(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setStagger(int,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: long getStagger(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: android.animation.Animator getAnimator(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: boolean isChangingLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: boolean isRunning()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void addChild(android.view.ViewGroup,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void showChild(android.view.ViewGroup,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void removeChild(android.view.ViewGroup,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void hideChild(android.view.ViewGroup,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.LayoutTransition: java.util.List getTransitionListeners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: int getOrder()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setOrder(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setAnimation(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setInterpolator(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: float getDelay()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void setDelay(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: boolean willOverlap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.LayoutAnimationController: boolean isDone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputEvent: android.view.InputDevice getDevice()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputEvent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: int get(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: char getNumber(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: char getMatch(int,char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: char getMatch(int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: char getDisplayLabel(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: int getDeadChar(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: boolean isPrintingKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: int getKeyboardType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: int getModifierBehavior()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: boolean deviceHasKey(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap: boolean[] deviceHasKeys(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.KeyCharacterMap$KeyData: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap$KeyData: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.ExtractedText: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedText: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedText: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedText: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.ExtractedTextRequest: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedTextRequest: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.ExtractedTextRequest: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: long getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: int getPosition()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CompletionInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: int getOffset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.inputmethod.CorrectionInfo: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData$Item: void <init>(java.lang.CharSequence)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: void <init>(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData$Item: void <init>(android.content.Intent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: void <init>(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData$Item: void <init>(android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: void <init>(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: java.lang.CharSequence getText()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: android.content.Intent getIntent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: android.net.Uri getUri()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ClipData$Item: java.lang.CharSequence coerceToText(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.MotionEvent$PointerProperties: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerProperties: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerProperties: void <init>(android.view.MotionEvent$PointerProperties)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerProperties: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerProperties: void copyFrom(android.view.MotionEvent$PointerProperties)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.MotionEvent$PointerCoords: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: void <init>(android.view.MotionEvent$PointerCoords)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: void clear()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: void copyFrom(android.view.MotionEvent$PointerCoords)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: float getAxisValue(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.MotionEvent$PointerCoords: void setAxisValue(int,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$RecyclerTraceType: android.view.ViewDebug$RecyclerTraceType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.view.ViewDebug$HierarchyTraceType: android.view.ViewDebug$HierarchyTraceType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.animation.Animator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void cancel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void end()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: boolean isStarted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: java.util.ArrayList getListeners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void removeAllListeners()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: android.animation.Animator clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void setupStartValues()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void setupEndValues()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.animation.Animator: void setTarget(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: android.view.InputDevice getDevice(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: int[] getDeviceIds()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: int getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: java.lang.String getName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: int getSources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: int getKeyboardType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: java.util.List getMotionRanges()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidRuntimeException: void <init>()>() in <android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)> ==> <android.util.AndroidRuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.KeyCharacterMap$UnavailableException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ActionProvider: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionProvider: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionProvider: boolean onPerformDefaultAction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionProvider: boolean hasSubMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: int getAxis()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: int getSource()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: float getMin()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: float getMax()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: float getRange()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: float getFlat()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputDevice$MotionRange: float getFuzz()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.util.AndroidRuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidRuntimeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.util.AndroidRuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidRuntimeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.util.AndroidRuntimeException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.AndroidRuntimeException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.BaseComponentsLogger: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LogEvent: void setIsPerformanceEvent(boolean)>(1) in <com.facebook.litho.BaseComponentsLogger: com.facebook.litho.LogEvent newPerformanceEvent(int)> ==> <com.facebook.litho.LogEvent: void setIsPerformanceEvent(boolean)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LogEvent: boolean isPerformanceEvent()>() in <com.facebook.litho.BaseComponentsLogger: void log(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.LogEvent: boolean isPerformanceEvent()>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("eventId = ") in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", isPerformanceEvent = ") in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>($z0) in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", params = ") in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LogEvent: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Enum: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Integer: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.net.Proxy: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.accounts.Account: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Constructor: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.ComponentName: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Method: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <com.facebook.litho.reference.DrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.pm.Signature: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Boolean: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.BitSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Float: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Character: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.graphics.Region: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.ArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.Hashtable: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.graphics.Matrix: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.SyncAdapterType: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Character$Subset: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.security.CodeSigner: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.graphics.Point: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.security.Timestamp: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Long: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.net.NetworkInterface: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.StackTraceElement: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.reflect.Field: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.Date: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.Locale: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Short: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.AbstractMap: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.ContentValues: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.AbstractSet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.util.AbstractList: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.net.InetAddress: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Double: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.IntentSender: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.app.Fragment: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.io.File: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.content.res.Configuration: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.net.URL: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.app.PendingIntent: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.net.URI: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <java.lang.Byte: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke $r9.<java.lang.Object: boolean equals(java.lang.Object)>($r11) in <com.facebook.litho.LogEvent: boolean equals(java.lang.Object)> ==> <android.os.Messenger: boolean equals(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.Diff acquireDiff(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.Diff: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.Diff acquireDiff(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.Diff: void <init>()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.Diff: void init(java.lang.Object,java.lang.Object)>(r0, r1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.Diff acquireDiff(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.Diff: void init(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TreeProps: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TreeProps acquireTreeProps()> ==> <com.facebook.litho.TreeProps: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.LogEvent: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)> ==> <com.facebook.litho.LogEvent: void <init>()>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.LogEvent: void setEventId(int)>(i0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.LogEvent acquireLogEvent(int)> ==> <com.facebook.litho.LogEvent: void setEventId(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.TreeProps: void reset()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.TreeProps: void reset()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Diff: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Diff)> ==> <com.facebook.litho.Diff: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Diff)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: void clear()>() in <com.facebook.litho.ComponentsPools: void clearAll()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: void clear()>() in <com.facebook.litho.ComponentsPools: void clearAll()> ==> <java.util.WeakHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: void clear()>() in <com.facebook.litho.ComponentsPools: void clearAll()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r0.<java.util.Map: void clear()>() in <com.facebook.litho.ComponentsPools: void clearAll()> ==> <java.util.HashMap: void clear()>
VIRTUAL edge: r1 = virtualinvoke r0.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.DisplayListDrawable: void <init>(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>(r0, r2) in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.DisplayListDrawable: void <init>(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>(r0, r2) in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.DisplayListDrawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.DisplayListDrawable: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("BorderColorDrawable", 10, 1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.BorderColorDrawable: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()> ==> <com.facebook.litho.BorderColorDrawable: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayDeque: void <init>()>() in <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()> ==> <java.util.ArrayDeque: void <init>()>
VIRTUAL edge: virtualinvoke r0.<java.util.ArrayDeque: void clear()>() in <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)> ==> <java.util.ArrayDeque: void clear()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LogEvent: void reset()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.LogEvent: void reset()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LogEvent)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.RenderState: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()> ==> <com.facebook.litho.RenderState: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.RenderState: void reset()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)> ==> <com.facebook.litho.RenderState: void reset()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.RenderState)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r4.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(i0) in <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<android.support.v4.util.Pools$SimplePool: void <init>(int)>(i0) in <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)> ==> <android.support.v4.util.Pools$SimplePool: void <init>(int)>
INTERFACE edge: r7 = interfaceinvoke $r4.<android.support.v4.util.Pools$Pool: java.lang.Object acquire()>() in <com.facebook.litho.RecyclePool: java.lang.Object acquire()> ==> <android.support.v4.util.Pools$Pool: java.lang.Object acquire()>
INTERFACE edge: r7 = interfaceinvoke $r1.<android.support.v4.util.Pools$Pool: java.lang.Object acquire()>() in <com.facebook.litho.RecyclePool: java.lang.Object acquire()> ==> <android.support.v4.util.Pools$Pool: java.lang.Object acquire()>
INTERFACE edge: interfaceinvoke $r5.<android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>(r1) in <com.facebook.litho.RecyclePool: void release(java.lang.Object)> ==> <android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>(r1) in <com.facebook.litho.RecyclePool: void release(java.lang.Object)> ==> <android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>(r1, null, null, null) in <com.facebook.litho.ComponentContext: void <init>(android.content.Context)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.ResourceCache: com.facebook.litho.ResourceCache getLatest(android.content.res.Configuration)>($r5) in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ResourceCache: com.facebook.litho.ResourceCache getLatest(android.content.res.Configuration)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>(r1, null, null, r2) in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>(r1, r2, r3, null) in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()>() in <com.facebook.litho.ComponentContext: void updateState(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.ComponentContext: void updateState(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentTree: void updateState(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>($r4, r5) in <com.facebook.litho.ComponentContext: void updateState(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentTree: void updateState(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()>() in <com.facebook.litho.ComponentContext: void updateStateAsync(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.ComponentContext: void updateStateAsync(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentTree: void updateStateAsync(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>($r4, r5) in <com.facebook.litho.ComponentContext: void updateStateAsync(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentTree: void updateStateAsync(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.ComponentContext: void updateStateLazy(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentTree: void updateStateLazy(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>($r4, r5) in <com.facebook.litho.ComponentContext: void updateStateLazy(com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentTree: void updateStateLazy(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentContext: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, r1, $i2, $i1) in <com.facebook.litho.ComponentContext: android.content.res.TypedArray obtainStyledAttributes(int[],int)> ==> <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
SPECIAL edge: $r3 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.InternalNode: void setIsPaddingPercent(com.facebook.yoga.YogaEdge,boolean)>(r1, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: void setIsPaddingPercent(com.facebook.yoga.YogaEdge,boolean)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>(r1, $f1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>() in <com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()>
SPECIAL edge: $r3 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Edges getNestedTreePadding()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.InternalNode: void setIsPaddingPercent(com.facebook.yoga.YogaEdge,boolean)>(r1, 1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: void setIsPaddingPercent(com.facebook.yoga.YogaEdge,boolean)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>(r1, $f1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $i1 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>(r2, $f0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.Edges: boolean set(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $i2 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.ResourceResolver: int dipsToPixels(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>(r1, $i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: void addChildAt(com.facebook.litho.InternalNode,int)>($r4, $i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)> ==> <com.facebook.litho.InternalNode: void addChildAt(com.facebook.litho.InternalNode,int)>
INTERFACE edge: $r3 = interfaceinvoke r0.<com.facebook.litho.ComponentLayout$Builder: com.facebook.litho.ComponentLayout build()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout build()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.Component$Builder: com.facebook.litho.Component build()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)>
CLINIT edge: r5 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r5) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>($r6, r4, r0) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>
STATIC edge: r5 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>($r2, r0) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRectPool> in <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r0 = new android.graphics.Rect in <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sRectPool> in <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.reference.Reference$Builder: com.facebook.litho.reference.Reference build()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.reference.Reference$Builder: com.facebook.litho.reference.Reference build()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.DrawableReference$PropsBuilder drawable(android.graphics.drawable.Drawable)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.DrawableReference$PropsBuilder drawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r5) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r5) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentContext: android.content.res.Resources getResources()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)> ==> <android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)> ==> <android.graphics.drawable.ColorDrawable: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>($r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>($i2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, 0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(null) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(null) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)> ==> <android.content.res.Resources: android.graphics.drawable.Drawable getDrawable(int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.drawable.ColorDrawable: void <init>(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)> ==> <android.graphics.drawable.ColorDrawable: void <init>(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>($r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>($r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setClickHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setClickHandler(com.facebook.litho.EventHandler)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()>() in <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()>() in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()>() in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sNodeInfoPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setLongClickHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setLongClickHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setTouchHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setTouchHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setInterceptTouchHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setInterceptTouchHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusable(boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setFocusable(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusable(boolean)> ==> <com.facebook.litho.NodeInfo: void setFocusable(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setContentDescription(java.lang.CharSequence)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.NodeInfo: void setContentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: java.lang.String getString(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)> ==> <android.content.res.Resources: java.lang.String getString(int)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>(i0, r1) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])> ==> <android.content.res.Resources: java.lang.String getString(int,java.lang.Object[])>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r3) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setViewTag(java.lang.Object)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)> ==> <com.facebook.litho.NodeInfo: void setViewTag(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setViewTags(android.util.SparseArray)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)> ==> <com.facebook.litho.NodeInfo: void setViewTags(android.util.SparseArray)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setDispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setDispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setOnInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setOnInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setOnInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setOnInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setOnPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setOnPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setOnRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setOnRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setPerformAccessibilityActionHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setPerformAccessibilityActionHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.NodeInfo: void setSendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NodeInfo: void setSendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode testKey(java.lang.String)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder testKey(java.lang.String)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode testKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder sendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder performAccessibilityActionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTag(java.lang.Object)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTag(java.lang.Object)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder interceptTouchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder longClickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrapInView()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrapInView()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignContent(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignContent(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignItems(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignItems(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder justifyContent(com.facebook.yoga.YogaJustify)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder justifyContent(com.facebook.yoga.YogaJustify)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrap(com.facebook.yoga.YogaWrap)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrap(com.facebook.yoga.YogaWrap)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchExpansionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchExpansionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchExpansionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchExpansionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode aspectRatio(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder aspectRatio(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode aspectRatio(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder duplicateParentState(boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder duplicateParentState(boolean)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder importantForAccessibility(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder importantForAccessibility(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexShrink(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexShrink(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexGrow(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexGrow(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flex(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flex(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventUncheckedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder sendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode sendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder performAccessibilityActionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode performAccessibilityActionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onRequestSendAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityNodeInfoHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode onInitializeAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode dispatchPopulateAccessibilityEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode testKey(java.lang.String)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder testKey(java.lang.String)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode testKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder transitionKey(java.lang.String)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder transitionKey(java.lang.String)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder viewTag(java.lang.Object)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder viewTag(java.lang.Object)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>(i0, r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int,java.lang.Object[])> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>(i0, r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int,java.lang.Object[])> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleWidthRatio(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder visibleWidthRatio(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleWidthRatio(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleHeightRatio(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder visibleHeightRatio(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleHeightRatio(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusable(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder focusable(boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusable(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder interceptTouchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode interceptTouchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder longClickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode longClickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder wrapInView()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder wrapInView()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundColor(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchExpansionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchExpansionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchExpansionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder touchExpansionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode touchExpansionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode aspectRatio(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder aspectRatio(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode aspectRatio(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder heightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder widthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder duplicateParentState(boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder duplicateParentState(boolean)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder importantForAccessibility(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder importantForAccessibility(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPercent(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisDip(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisRes(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPx(int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexShrink(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexShrink(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexGrow(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flexGrow(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flex(float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder flex(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout$Builder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
SPECIAL edge: $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()> ==> <java.lang.Object: java.lang.Object clone()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.Throwable)>($r2) in <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()> ==> <java.lang.RuntimeException: void <init>(java.lang.Throwable)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Component: void releaseCachedLayout()>() in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: void releaseCachedLayout()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.InternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.NoOpInternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.InternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.NoOpInternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i3 = virtualinvoke $r5.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i3 = virtualinvoke $r5.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.Component: void measure(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r2, 1) in <com.facebook.litho.Component: void releaseCachedLayout()> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r2, 1) in <com.facebook.litho.Component: void releaseCachedLayout()> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null) in <com.facebook.litho.ComponentHost: void <init>(android.content.Context)> ==> <com.facebook.litho.ComponentHost: void <init>(android.content.Context,android.util.AttributeSet)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ComponentContext: void <init>(android.content.Context)>(r2) in <com.facebook.litho.ComponentHost: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>($r1, r3) in <com.facebook.litho.ComponentHost: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>(r1, null) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>(r1, r2) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.view.ViewGroup: void <init>(android.content.Context,android.util.AttributeSet)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void setWillNotDraw(boolean)>(0) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.view.View: void setWillNotDraw(boolean)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void setChildrenDrawingOrderEnabled(boolean)>(1) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>($z0) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r4.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r5.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r6.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r7.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost$1)>(r0, null) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost$1)>
SPECIAL edge: specialinvoke $r9.<java.util.ArrayList: void <init>(int)>(3) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <java.util.ArrayList: void <init>(int)>
SPECIAL edge: specialinvoke $r11.<com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View)>(r0) in <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>(r0, $r10) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>(r1, $r11) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: int getFlags()>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)>(i0, r0, r5) in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void mountView(android.view.View,int)>($r4, $i1) in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)>(i0, r0) in <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)>(r0, $r11, r6, $i1, $r7) in <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountItem: boolean isDuplicateParentState(int)>(i0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <com.facebook.litho.MountItem: boolean isDuplicateParentState(int)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost: void finishTemporaryDetach(android.view.View)>(r0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <com.facebook.litho.ComponentHost: void finishTemporaryDetach(android.view.View)>
CLINIT edge: $r8 = new com.facebook.litho.TouchExpansionDelegate in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)>(r1, r0, i1, r2) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void dispatchFinishTemporaryDetach(android.view.View)>(r0) in <com.facebook.litho.ComponentHost: void finishTemporaryDetach(android.view.View)> ==> <android.support.v4.view.ViewCompat: void dispatchFinishTemporaryDetach(android.view.View)>
CLINIT edge: $r0 = new android.graphics.Rect in <com.facebook.litho.TouchExpansionDelegate: void <clinit>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: <com.facebook.litho.TouchExpansionDelegate: android.graphics.Rect IGNORED_RECT> = $r0 in <com.facebook.litho.TouchExpansionDelegate: void <clinit>()> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountItem: boolean isDuplicateParentState(int)>(i0) in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.MountItem: boolean isDuplicateParentState(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)>(i0, r0) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void unmountView(android.view.View)>($r3) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmountView(android.view.View)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>(i0, r0) in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>() in <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>(i0, $r6) in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>(i0, $r8) in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)>(r2) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>($r5) in <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>($r3) in <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()> ==> <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>($r5) in <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()> ==> <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)>($r3) in <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void dispatchStartTemporaryDetach(android.view.View)>(r0) in <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)> ==> <android.support.v4.view.ViewCompat: void dispatchStartTemporaryDetach(android.view.View)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sMountItemScrapArrayPool> in <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>(int)>($i0) in <com.facebook.litho.ComponentHost: java.util.List getDrawables()> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9) in <com.facebook.litho.ComponentHost: java.util.List getDrawables()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: java.util.List getDrawables()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>() in <com.facebook.litho.ComponentHost: void setContentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void setImportantForAccessibility(int)>(i0) in <com.facebook.litho.ComponentHost: void setImportantForAccessibility(int)> ==> <android.view.ViewGroup: void setImportantForAccessibility(int)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void setTag(int,java.lang.Object)>(i0, r1) in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.ComponentHost: android.content.Context getContext()>() in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>($z0) in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentAccessibilityDelegate: void setNodeInfo(com.facebook.litho.NodeInfo)>($r2) in <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void setNodeInfo(com.facebook.litho.NodeInfo)>
SPECIAL edge: $z0 = specialinvoke r0.<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>(r2) in <com.facebook.litho.ComponentHost: boolean onInterceptTouchEvent(android.view.MotionEvent)> ==> <android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentHost: boolean implementsVirtualViews()>() in <com.facebook.litho.ComponentHost: boolean dispatchHoverEvent(android.view.MotionEvent)> ==> <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()>
SPECIAL edge: $z2 = specialinvoke r0.<android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>(r2) in <com.facebook.litho.ComponentHost: boolean dispatchHoverEvent(android.view.MotionEvent)> ==> <android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r8) in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>(r9) in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: r8 = virtualinvoke r7.<com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>() in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>
VIRTUAL edge: r9 = virtualinvoke r2.<com.facebook.litho.ComponentHost: java.lang.CharSequence getContentDescription()>() in <com.facebook.litho.ComponentHost: java.util.List getContentDescriptions()> ==> <com.facebook.litho.ComponentHost: java.lang.CharSequence getContentDescription()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>(r1) in <com.facebook.litho.ComponentHost: void dispatchDraw(android.graphics.Canvas)> ==> <android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)>
INTERFACE edge: $z0 = interfaceinvoke r5.<com.facebook.litho.Touchable: boolean shouldHandleTouchEvent(android.view.MotionEvent)>(r2) in <com.facebook.litho.ComponentHost: boolean onTouchEvent(android.view.MotionEvent)> ==> <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)>
INTERFACE edge: $z1 = interfaceinvoke r5.<com.facebook.litho.Touchable: boolean onTouchEvent(android.view.MotionEvent,android.view.View)>(r2, r0) in <com.facebook.litho.ComponentHost: boolean onTouchEvent(android.view.MotionEvent)> ==> <com.facebook.litho.MatrixDrawable: boolean onTouchEvent(android.view.MotionEvent,android.view.View)>
SPECIAL edge: z2 = specialinvoke r0.<android.view.ViewGroup: boolean onTouchEvent(android.view.MotionEvent)>(r2) in <com.facebook.litho.ComponentHost: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.View: boolean onTouchEvent(android.view.MotionEvent)>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.facebook.litho.ComponentHost: boolean shouldRequestLayout()>() in <com.facebook.litho.ComponentHost: void requestLayout()> ==> <com.facebook.litho.LithoView: boolean shouldRequestLayout()>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.facebook.litho.ComponentHost: boolean shouldRequestLayout()>() in <com.facebook.litho.ComponentHost: void requestLayout()> ==> <com.facebook.litho.ComponentHost: boolean shouldRequestLayout()>
INTERFACE edge: r2 = interfaceinvoke r2.<android.view.ViewParent: android.view.ViewParent getParent()>() in <com.facebook.litho.ComponentHost: void requestLayout()> ==> <android.view.View: android.view.ViewParent getParent()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void requestLayout()>() in <com.facebook.litho.ComponentHost: void requestLayout()> ==> <android.view.View: void requestLayout()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void jumpDrawablesToCurrentState()>() in <com.facebook.litho.ComponentHost: void jumpDrawablesToCurrentState()> ==> <android.view.ViewGroup: void jumpDrawablesToCurrentState()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void jumpDrawablesToCurrentState()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void setVisibility(int)>(i0) in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <android.view.View: void setVisibility(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r6.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHost: void setVisibility(int)> ==> <android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<android.view.ViewGroup: java.lang.Object getTag()>() in <com.facebook.litho.ComponentHost: java.lang.Object getTag()> ==> <android.view.View: java.lang.Object getTag()>
VIRTUAL edge: r4 = virtualinvoke $r3.<android.util.SparseArray: java.lang.Object get(int)>(i0) in <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)> ==> <android.util.SparseArray: java.lang.Object get(int)>
SPECIAL edge: $r2 = specialinvoke r0.<android.view.ViewGroup: java.lang.Object getTag(int)>(i0) in <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)> ==> <android.view.View: java.lang.Object getTag(int)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void invalidate(android.graphics.Rect)>(r1) in <com.facebook.litho.ComponentHost: void invalidate(android.graphics.Rect)> ==> <android.view.View: void invalidate(android.graphics.Rect)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void invalidate(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.ComponentHost: void invalidate(int,int,int,int)> ==> <android.view.View: void invalidate(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void invalidate()>() in <com.facebook.litho.ComponentHost: void invalidate()> ==> <android.view.View: void invalidate()>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>(r1) in <com.facebook.litho.ComponentHost: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)> ==> <android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LayoutOutput: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.LayoutOutput: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.VisibilityItem: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.EventHandler: void <init>(com.facebook.litho.HasEventDispatcher,int,java.lang.Object[])> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventHandler: void dispatchEvent(java.lang.Object)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r0, r3) in <com.facebook.litho.EventHandler: void dispatchEvent(java.lang.Object)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TestItem: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.TestItem: void <init>()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.TestItem: java.util.List getTextItems()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <com.facebook.litho.TestItem: java.util.List getTextItems()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>($r6) in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.CharSequence)>
VIRTUAL edge: $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r5 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.TestItem: java.lang.String getTextContent()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.facebook.litho.TextContent: java.util.List getTextItems()>() in <com.facebook.litho.TestItem: java.util.List getTextItems()> ==> <com.facebook.litho.ComponentHostUtils$1: java.util.List getTextItems()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<com.facebook.litho.TextContent: java.util.List getTextItems()>() in <com.facebook.litho.TestItem: java.util.List getTextItems()> ==> <com.facebook.litho.TextContent$1: java.util.List getTextItems()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Output: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Diff: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper,com.facebook.litho.ComponentTree$1)>(r0, null) in <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutThreadLooper(android.os.Looper)> ==> <com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper,com.facebook.litho.ComponentTree$1)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>(r1) in <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()> ==> <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)>($r4, r0) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.ComponentTree: int generateComponentTreeId()>() in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree: int generateComponentTreeId()>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.ComponentTree$Builder: int access$1300(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: int access$1300(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.ComponentTree$Builder: int access$1300(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: int access$1300(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r12 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.RenderState access$1200(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.RenderState access$1200(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r11 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.RenderState access$1200(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.RenderState access$1200(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r16 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>(null) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>
STATIC edge: r10 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.StateHandler access$1100(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.StateHandler access$1100(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r15 = staticinvoke <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()>() in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.ComponentTree$Builder: boolean access$900(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: boolean access$900(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.ComponentTree$Builder: boolean access$800(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: boolean access$800(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r8 = staticinvoke <com.facebook.litho.ComponentTree$Builder: java.lang.Object access$700(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: java.lang.Object access$700(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r7 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.LayoutHandler access$600(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.LayoutHandler access$600(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ComponentTree$Builder: boolean access$500(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: boolean access$500(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentTree$Builder: boolean access$400(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: boolean access$400(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.Component access$300(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.Component access$300(com.facebook.litho.ComponentTree$Builder)>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)>($r4, r0) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentContext access$200(com.facebook.litho.ComponentTree$Builder)>(r3) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentContext access$200(com.facebook.litho.ComponentTree$Builder)>
CLINIT edge: $i1 = staticinvoke <com.facebook.litho.ComponentTree: int generateComponentTreeId()>() in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $r16 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>(null) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r15 = staticinvoke <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()>() in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentTree: android.os.Looper sDefaultLayoutThreadLooper> in <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.ComponentContext in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>(null) in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>(null) in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.StateHandler: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: boolean isEmpty()> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: boolean isEmpty()> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: boolean isEmpty()> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: boolean isEmpty()> ==> <java.util.WeakHashMap: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TreeProps: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.ArrayMap: void <init>()>() in <com.facebook.litho.TreeProps: void <init>()> ==> <android.support.v4.util.ArrayMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Edges: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: $z1 = virtualinvoke $r11.<com.facebook.litho.displaylist.DisplayList: boolean isValid()>() in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: boolean isValid()>
VIRTUAL edge: r15 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $i0 = virtualinvoke r15.<android.graphics.Rect: int width()>() in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i1 = virtualinvoke r15.<android.graphics.Rect: int height()>() in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)>($i0, $i1) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f1, $f0) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void translate(float,float)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f3, $f2) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void translate(float,float)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)>(r4) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>($i11, $i10, $i9, $i8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>
VIRTUAL edge: $z2 = virtualinvoke $r16.<com.facebook.litho.displaylist.DisplayList: boolean isValid()>() in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: boolean isValid()>
VIRTUAL edge: virtualinvoke $r10.<com.facebook.litho.displaylist.DisplayList: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayList: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r8) in <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setChangingConfigurations(int)> ==> <com.facebook.litho.DisplayListDrawable: void setChangingConfigurations(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setChangingConfigurations(int)> ==> <com.facebook.litho.MatrixDrawable: void setChangingConfigurations(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setChangingConfigurations(int)> ==> <android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()> ==> <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()> ==> <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.Drawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.InsetDrawable: int getChangingConfigurations()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setDither(boolean)> ==> <com.facebook.litho.DisplayListDrawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setDither(boolean)> ==> <com.facebook.litho.MatrixDrawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setDither(boolean)> ==> <android.graphics.drawable.Drawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setFilterBitmap(boolean)> ==> <com.facebook.litho.DisplayListDrawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setFilterBitmap(boolean)> ==> <com.facebook.litho.MatrixDrawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.DisplayListDrawable: void setFilterBitmap(boolean)> ==> <android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setAlpha(int)> ==> <com.facebook.litho.DisplayListDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setAlpha(int)> ==> <com.facebook.litho.MatrixDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setAlpha(int)> ==> <android.graphics.drawable.ColorDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setAlpha(int)> ==> <com.facebook.litho.BorderColorDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.DisplayListDrawable: void setAlpha(int)> ==> <android.graphics.drawable.InsetDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1) in <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1) in <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1) in <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1) in <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.BorderColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r1) in <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.DisplayListDrawable: boolean isStateful()> ==> <com.facebook.litho.DisplayListDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.DisplayListDrawable: boolean isStateful()> ==> <com.facebook.litho.MatrixDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.DisplayListDrawable: boolean isStateful()> ==> <android.graphics.drawable.Drawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.DisplayListDrawable: boolean isStateful()> ==> <android.graphics.drawable.InsetDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1) in <com.facebook.litho.DisplayListDrawable: boolean setState(int[])> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1) in <com.facebook.litho.DisplayListDrawable: boolean setState(int[])> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setState(int[])>(r1) in <com.facebook.litho.DisplayListDrawable: boolean setState(int[])> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.DisplayListDrawable: int[] getState()> ==> <com.facebook.litho.DisplayListDrawable: int[] getState()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.DisplayListDrawable: int[] getState()> ==> <com.facebook.litho.MatrixDrawable: int[] getState()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.DisplayListDrawable: int[] getState()> ==> <android.graphics.drawable.Drawable: int[] getState()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable getCurrent()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getCurrent()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
SPECIAL edge: $z2 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)> ==> <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)> ==> <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r1.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.DisplayListDrawable: int getOpacity()> ==> <com.facebook.litho.DisplayListDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.DisplayListDrawable: int getOpacity()> ==> <com.facebook.litho.MatrixDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.DisplayListDrawable: int getOpacity()> ==> <android.graphics.drawable.ColorDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.DisplayListDrawable: int getOpacity()> ==> <com.facebook.litho.BorderColorDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.DisplayListDrawable: int getOpacity()> ==> <android.graphics.drawable.InsetDrawable: int getOpacity()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.Region getTransparentRegion()> ==> <com.facebook.litho.DisplayListDrawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.Region getTransparentRegion()> ==> <com.facebook.litho.MatrixDrawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.Region getTransparentRegion()> ==> <android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()> ==> <android.graphics.drawable.Drawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()> ==> <android.graphics.drawable.Drawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumWidth()> ==> <com.facebook.litho.DisplayListDrawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumWidth()> ==> <com.facebook.litho.MatrixDrawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumWidth()> ==> <android.graphics.drawable.Drawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumHeight()> ==> <com.facebook.litho.DisplayListDrawable: int getMinimumHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumHeight()> ==> <com.facebook.litho.MatrixDrawable: int getMinimumHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.DisplayListDrawable: int getMinimumHeight()> ==> <android.graphics.drawable.Drawable: int getMinimumHeight()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1) in <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)> ==> <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1) in <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)> ==> <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1) in <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)> ==> <android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r1) in <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)> ==> <android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable mutate()> ==> <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable mutate()>
VIRTUAL edge: r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable mutate()> ==> <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
VIRTUAL edge: r2 = virtualinvoke r1.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>() in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable mutate()> ==> <android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable mutate()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>(r2, $r3) in <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable mutate()> ==> <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void invalidateSelf()>() in <com.facebook.litho.DisplayListDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <android.graphics.drawable.Drawable: void invalidateSelf()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void setBounds(android.graphics.Rect)>($r2) in <com.facebook.litho.DisplayListDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.DisplayListDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void scheduleSelf(java.lang.Runnable,long)>(r1, l0) in <com.facebook.litho.DisplayListDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> ==> <android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void unscheduleSelf(java.lang.Runnable)>(r1) in <com.facebook.litho.DisplayListDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> ==> <android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void setTintList(android.content.res.ColorStateList)>($r1) in <com.facebook.litho.DisplayListDrawable: void setTint(int)> ==> <com.facebook.litho.DisplayListDrawable: void setTintList(android.content.res.ColorStateList)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setTintList(android.content.res.ColorStateList)>(r1) in <com.facebook.litho.DisplayListDrawable: void setTintList(android.content.res.ColorStateList)> ==> <com.facebook.litho.DisplayListDrawable: void setTintList(android.content.res.ColorStateList)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setTintMode(android.graphics.PorterDuff$Mode)>(r1) in <com.facebook.litho.DisplayListDrawable: void setTintMode(android.graphics.PorterDuff$Mode)> ==> <com.facebook.litho.DisplayListDrawable: void setTintMode(android.graphics.PorterDuff$Mode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.DisplayListDrawable: void release()> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.DisplayListDrawable: void release()> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.displaylist.DisplayList: void <init>(com.facebook.litho.displaylist.PlatformDisplayList)>(r2) in <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayList: void <init>(com.facebook.litho.displaylist.PlatformDisplayList)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t start a DisplayList that is already started") in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r4) in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: android.graphics.Canvas start(int,int)>(i0, i1) in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: android.graphics.Canvas start(int,int)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: android.graphics.Canvas start(int,int)>(i0, i1) in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: android.graphics.Canvas start(int,int)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: android.graphics.Canvas start(int,int)>(i0, i1) in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListJB: android.graphics.Canvas start(int,int)>
INTERFACE edge: r2 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: android.graphics.Canvas start(int,int)>(i0, i1) in <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: android.graphics.Canvas start(int,int)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Can\'t end a DisplayList that is not started") in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r4) in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void end(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListJB: void end(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void end(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: void end(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void end(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void end(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void end(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: void end(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void clear()>() in <com.facebook.litho.displaylist.DisplayList: void clear()> ==> <com.facebook.litho.displaylist.DisplayListJB: void clear()>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void clear()>() in <com.facebook.litho.displaylist.DisplayList: void clear()> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: void clear()>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void clear()>() in <com.facebook.litho.displaylist.DisplayList: void clear()> ==> <com.facebook.litho.displaylist.DisplayListNougat: void clear()>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void clear()>() in <com.facebook.litho.displaylist.DisplayList: void clear()> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void clear()>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void clear()>() in <com.facebook.litho.displaylist.DisplayList: void clear()> ==> <com.facebook.litho.displaylist.DisplayListLollipop: void clear()>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void draw(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListJB: void draw(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void draw(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void draw(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.displaylist.PlatformDisplayList: void draw(android.graphics.Canvas)>(r1) in <com.facebook.litho.displaylist.DisplayList: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: void draw(android.graphics.Canvas)>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)> ==> <com.facebook.litho.displaylist.DisplayListJB: void setBounds(int,int,int,int)>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: void setBounds(int,int,int,int)>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void setBounds(int,int,int,int)>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: void setBounds(int,int,int,int)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: boolean isValid()>() in <com.facebook.litho.displaylist.DisplayList: boolean isValid()> ==> <com.facebook.litho.displaylist.DisplayListJB: boolean isValid()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: boolean isValid()>() in <com.facebook.litho.displaylist.DisplayList: boolean isValid()> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: boolean isValid()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<com.facebook.litho.displaylist.PlatformDisplayList: boolean isValid()>() in <com.facebook.litho.displaylist.DisplayList: boolean isValid()> ==> <com.facebook.litho.displaylist.DisplayListLollipop: boolean isValid()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Paint: void setColor(int)>(i0) in <com.facebook.litho.BorderColorDrawable: void init(int,float,float,float,float)> ==> <android.graphics.Paint: void setColor(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.BorderColorDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>(r2, $f32, $f33, $f34, $f35) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>(r2, $f24, $f25, $f26, $f27) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>(r2, $f16, $f19, $f18, $f17) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>(r2, $f8, $f9, $f11, $f10) in <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)>
CLINIT edge: $r0 = <com.facebook.litho.BorderColorDrawable: android.graphics.RectF mBorderBounds> in <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)> ==> <com.facebook.litho.BorderColorDrawable: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.internal.ArraySet: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.internal.ArraySet: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.internal.ArraySet: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>(int)>(i0) in <com.facebook.litho.internal.ArraySet: void <init>(int)> ==> <android.support.v4.util.SimpleArrayMap: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.internal.ArraySet: void <init>(java.util.Collection)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>(r2) in <com.facebook.litho.internal.ArraySet: void <init>(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.internal.ArraySet: void <init>(java.util.Collection)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: void ensureCapacity(int)>($i2) in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: void ensureCapacity(int)>
VIRTUAL edge: i4 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r6) in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.ArrayDeque: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r1.<java.util.Collection: int size()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke r1.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.internal.ArraySet: void clearAndAddAll(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>(r1) in <com.facebook.litho.internal.ArraySet: void clearAndAddAll(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: $z1 = virtualinvoke r2.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>($r3) in <com.facebook.litho.internal.ArraySet: boolean containsAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: i2 = virtualinvoke r1.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i3) in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Set: int size()>() in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <java.util.HashSet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Set: int size()>() in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
INTERFACE edge: $i1 = interfaceinvoke r2.<java.util.Set: int size()>() in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArraySet: int size()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.internal.ArraySet: boolean equals(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i3) in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Enum: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Integer: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.net.Proxy: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.accounts.Account: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.AbstractSet: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.reflect.Constructor: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.ComponentName: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.reflect.Method: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.reference.DrawableReference$State: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.pm.Signature: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Boolean: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Package: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.BitSet: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Float: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Character: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.ArrayList: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.String: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.Hashtable: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.SyncAdapterType: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Character$Subset: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.security.CodeSigner: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.graphics.Point: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.security.Timestamp: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Long: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.net.NetworkInterface: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.concurrent.CopyOnWriteArrayList: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.StackTraceElement: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.reflect.Field: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.DrawableComponent$State: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.Intent$FilterComparison: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.Date: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.Locale: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Short: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.AbstractMap: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.ContentValues: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.util.AbstractList: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <com.facebook.litho.internal.ArraySet: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.net.InetAddress: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Double: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.IntentSender: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.app.Fragment: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.io.File: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.content.res.Configuration: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.net.URL: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.app.PendingIntent: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.net.URI: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <java.lang.Byte: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.view.accessibility.AccessibilityNodeInfo: int hashCode()>
VIRTUAL edge: $i1 = virtualinvoke r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.internal.ArraySet: int hashCode()> ==> <android.os.Messenger: int hashCode()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.internal.ArraySet$ArraySetIterator: void <init>(com.facebook.litho.internal.ArraySet)>(r1) in <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: void <init>(com.facebook.litho.internal.ArraySet)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int indexOf(java.lang.Object)>(r1) in <com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int indexOf(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>(i0) in <com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r1 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: r2 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: $z1 = virtualinvoke r3.<com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>(r2) in <com.facebook.litho.internal.ArraySet: boolean removeAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i1) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>(i1) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.ArrayDeque: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.LinkedList: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean contains(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.Collection: boolean contains(java.lang.Object)>($r2) in <com.facebook.litho.internal.ArraySet: boolean retainAll(java.util.Collection)> ==> <java.util.ArrayList: boolean contains(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i3) in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: $r2 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.Class getComponentType()>() in <com.facebook.litho.internal.ArraySet: java.lang.Object[] toArray(java.lang.Object[])> ==> <java.lang.Class: java.lang.Class getComponentType()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean isEmpty()>() in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <com.facebook.litho.internal.ArraySet: boolean isEmpty()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: r6 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i2) in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i1) in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(123) in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r6) in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(this Set)") in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(125) in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(char)>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.internal.ArraySet: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.RenderState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.RenderState: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.RenderState: void <init>()> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build$VERSION: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build$VERSION: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build$VERSION_CODES: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build$VERSION_CODES: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.config.ComponentsConfiguration: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r1) in <android.app.Application: void <init>()> ==> <android.content.ContextWrapper: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void onCreate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void onTerminate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void onConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void onLowMemory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void onTrimMemory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.Context: void <init>()>() in <android.content.ContextWrapper: void <init>(android.content.Context)> ==> <android.content.Context: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.Context getBaseContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.res.AssetManager getAssets()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.res.Resources getResources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.pm.PackageManager getPackageManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.ContentResolver getContentResolver()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.os.Looper getMainLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.Context getApplicationContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void setTheme(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.ClassLoader getClassLoader()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.String getPackageName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.String getPackageResourcePath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.String getPackageCodePath()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean deleteFile(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.String[] fileList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getFilesDir()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getObbDir()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getCacheDir()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getExternalCacheDir()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.String[] databaseList()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.graphics.drawable.Drawable getWallpaper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.graphics.drawable.Drawable peekWallpaper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int getWallpaperDesiredMinimumWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int getWallpaperDesiredMinimumHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void setWallpaper(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void setWallpaper(java.io.InputStream)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void clearWallpaper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void startActivity(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void startActivities(android.content.Intent[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendBroadcast(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendBroadcast(android.content.Intent,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendStickyBroadcast(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void removeStickyBroadcast(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void unregisterReceiver(android.content.BroadcastReceiver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.ComponentName startService(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean stopService(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void unbindService(android.content.ServiceConnection)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkPermission(java.lang.String,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkCallingPermission(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkCallingOrSelfPermission(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforcePermission(java.lang.String,int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceCallingPermission(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceCallingOrSelfPermission(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void grantUriPermission(java.lang.String,android.net.Uri,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void revokeUriPermission(android.net.Uri,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkUriPermission(android.net.Uri,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkCallingUriPermission(android.net.Uri,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkCallingOrSelfUriPermission(android.net.Uri,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: android.content.Context createPackageContext(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.ContextWrapper: boolean isRestricted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ContextThemeWrapper: void <init>()>() in <android.app.Activity: void <init>()> ==> <android.view.ContextThemeWrapper: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.content.Intent getIntent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setIntent(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.Application getApplication()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean isChild()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.Activity getParent()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.WindowManager getWindowManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.Window getWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.LoaderManager getLoaderManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.View getCurrentFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.CharSequence onCreateDescription()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: int getChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.Object getLastNonConfigurationInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onLowMemory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onTrimMemory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.FragmentManager getFragmentManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onAttachFragment(android.app.Fragment)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.database.Cursor managedQuery(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startManagingCursor(android.database.Cursor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void stopManagingCursor(android.database.Cursor)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.View findViewById(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.ActionBar getActionBar()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setContentView(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setContentView(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setFinishOnTouchOutside(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setDefaultKeyMode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onKeyDown(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onKeyUp(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onBackPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onUserInteraction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onContentChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onWindowFocusChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onAttachedToWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onDetachedFromWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean hasWindowFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.View onCreatePanelView(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onMenuOpened(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onPanelClosed(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void invalidateOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onOptionsMenuClosed(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void openOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void closeOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void registerForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void unregisterForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void openContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void closeContextMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onContextMenuClosed(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void showDialog(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean showDialog(int,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void dismissDialog(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void removeDialog(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean onSearchRequested()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startSearch(java.lang.String,boolean,android.os.Bundle,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void triggerSearch(java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void takeKeyEvents(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean requestWindowFeature(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setFeatureDrawableResource(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setFeatureDrawableAlpha(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.LayoutInflater getLayoutInflater()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.MenuInflater getMenuInflater()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startActivityForResult(android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startIntentSenderForResult(android.content.IntentSender,int,android.content.Intent,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startActivity(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startActivities(android.content.Intent[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean startActivityIfNeeded(android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean startNextMatchingActivity(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startActivityFromChild(android.app.Activity,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startActivityFromFragment(android.app.Fragment,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void startIntentSenderFromChild(android.app.Activity,android.content.IntentSender,int,android.content.Intent,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void overridePendingTransition(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setResult(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setResult(int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.String getCallingPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.content.ComponentName getCallingActivity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setVisible(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean isFinishing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean isChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void recreate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void finish()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void finishFromChild(android.app.Activity)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void finishActivity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void finishActivityFromChild(android.app.Activity,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.app.PendingIntent createPendingResult(int,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setRequestedOrientation(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: int getRequestedOrientation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: int getTaskId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean isTaskRoot()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: boolean moveTaskToBack(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.String getLocalClassName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.content.ComponentName getComponentName()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.content.SharedPreferences getPreferences(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.Object getSystemService(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setTitle(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setTitle(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setTitleColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: java.lang.CharSequence getTitle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: int getTitleColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setProgressBarVisibility(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setProgressBarIndeterminate(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setProgress(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setSecondaryProgress(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void setVolumeControlStream(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: int getVolumeControlStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void runOnUiThread(java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.View onCreateView(android.view.View,java.lang.String,android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.ActionMode startActionMode(android.view.ActionMode$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onActionModeStarted(android.view.ActionMode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Activity: void onActionModeFinished(android.view.ActionMode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.Component$Builder: com.facebook.litho.Component build()>() in <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component,boolean)>(r1, 0) in <com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component,boolean)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root component can\'t be null") in <com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r0, -1, -1, 0, z0, null) in <com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
CLINIT edge: $z13 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i6, $i7, i0, i1, $f0, $f1) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $z13 = staticinvoke <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>($i6, $i7, i0, i1, $f0, $f1) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: boolean hasCompatibleSizeSpec(int,int,int,int,float,float)>
VIRTUAL edge: r9 = virtualinvoke $r7.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.LayoutState: void preAllocateMountContent()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.LayoutState: void preAllocateMountContent()>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: r12 = virtualinvoke $r4.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: virtualinvoke r13.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r6) in <com.facebook.litho.ComponentTree: void preAllocateMountContent()> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r7) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>($r11, r8, $r12) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)>($r9, r8) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r7) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: $z3 = staticinvoke <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)>($r9, r8) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)>($r30) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r17, 0) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)>($r18) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>($r19) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)>($r24) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)>($r27) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)>($r30) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r17, 0) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)>($r18) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>($r19) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)>($r24) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)>($r27) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: java.lang.Object mountContentLock> in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentsPools: java.util.Map sMountContentPoolsByContext> in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLayoutStatePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTransitionContextPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDiffNodePool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTestOutputPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sVisibilityOutputPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLayoutOutputPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root component can\'t be null") in <com.facebook.litho.ComponentTree: void setRootAsync(com.facebook.litho.Component)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r0, -1, -1, 1, 0, null) in <com.facebook.litho.ComponentTree: void setRootAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void setSizeSpec(int,int,com.facebook.litho.Size)>(i0, i1, null) in <com.facebook.litho.ComponentTree: void setSizeSpec(int,int)> ==> <com.facebook.litho.ComponentTree: void setSizeSpec(int,int,com.facebook.litho.Size)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(null, i0, i1, 0, 0, r1) in <com.facebook.litho.ComponentTree: void setSizeSpec(int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(null, i0, i1, 1, 0, null) in <com.facebook.litho.ComponentTree: void setSizeSpecAsync(int,int)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecAsync(com.facebook.litho.Component,int,int,boolean)>(r1, i0, i1, 0) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecAsync(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecAsync(com.facebook.litho.Component,int,int,boolean)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root component can\'t be null") in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecAsync(com.facebook.litho.Component,int,int,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r0, i0, i1, 1, z0, null) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecAsync(com.facebook.litho.Component,int,int,boolean)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,boolean)>(r1, i0, i1, 0) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,boolean)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root component can\'t be null") in <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r0, i0, i1, 0, z0, null) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,boolean)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Root component can\'t be null") in <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,com.facebook.litho.Size)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r0, i0, i1, 0, 0, r2) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpec(com.facebook.litho.Component,int,int,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>(null) in <com.facebook.litho.ComponentTree: void release()> ==> <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void release()> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void release()> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: $i0 = virtualinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.facebook.litho.ComponentTree: int generateComponentTreeId()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>(java.lang.Throwable)>(r1) in <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)> ==> <java.lang.Exception: void <init>(java.lang.Throwable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.os.Build: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.Build: java.lang.String getRadioVersion()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Size: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Size: void <init>(int,int)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ResourceResolver: void <init>()>() in <com.facebook.litho.Component$Builder: void <init>()> ==> <com.facebook.litho.ResourceResolver: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout$Builder withLayout()>() in <com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout buildWithLayout()> ==> <com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout$Builder withLayout()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.facebook.litho.ComponentLayout$Builder: com.facebook.litho.ComponentLayout build()>() in <com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout buildWithLayout()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout build()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.Component$Builder: com.facebook.litho.Component build()>() in <com.facebook.litho.Component$Builder: com.facebook.litho.ComponentLayout$Builder withLayout()> ==> <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>(i0, i1) in <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r0, $r1) in <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r0, $r1) in <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.ComponentLifecycle$1: float baseline(com.facebook.yoga.YogaNode,float,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.ComponentLifecycle$1: float baseline(com.facebook.yoga.YogaNode,float,float)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentLifecycle$1: float baseline(com.facebook.yoga.YogaNode,float,float)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.litho.ComponentLifecycle: int onMeasureBaseline(com.facebook.litho.ComponentContext,int,int)>($r5, $i1, $i0) in <com.facebook.litho.ComponentLifecycle$1: float baseline(com.facebook.yoga.YogaNode,float,float)> ==> <com.facebook.litho.ComponentLifecycle: int onMeasureBaseline(com.facebook.litho.ComponentContext,int,int)>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.facebook.litho.InternalNode: boolean areCachedMeasuresValid()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: boolean areCachedMeasuresValid()>
VIRTUAL edge: $r26 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: r4 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: $z2 = virtualinvoke r2.<com.facebook.litho.InternalNode: boolean hasNestedTree()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: boolean hasNestedTree()>
VIRTUAL edge: $r30 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r19 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $r20 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $r21 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $r22 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $r23 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>($f6) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>($f6) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>($f7) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>($f7) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: void setLastMeasuredHeight(float)>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("measure:") in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r29 = virtualinvoke r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r16 = virtualinvoke r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: i5 = virtualinvoke r27.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: i5 = virtualinvoke r27.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: i6 = virtualinvoke r27.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: i6 = virtualinvoke r27.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: $i3 = virtualinvoke $r26.<com.facebook.litho.DiffNode: int getLastWidthSpec()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: int getLastWidthSpec()>
VIRTUAL edge: $i4 = virtualinvoke $r26.<com.facebook.litho.DiffNode: int getLastHeightSpec()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: int getLastHeightSpec()>
VIRTUAL edge: $f4 = virtualinvoke $r26.<com.facebook.litho.DiffNode: float getLastMeasuredWidth()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: float getLastMeasuredWidth()>
VIRTUAL edge: $f5 = virtualinvoke $r26.<com.facebook.litho.DiffNode: float getLastMeasuredHeight()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: float getLastMeasuredHeight()>
SPECIAL edge: r28 = specialinvoke r12.<com.facebook.litho.ComponentLifecycle$2: com.facebook.litho.Size acquireSize(int)>(-2147483648) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentLifecycle$2: com.facebook.litho.Size acquireSize(int)>
SPECIAL edge: specialinvoke r12.<com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)>(r28) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)>
SPECIAL edge: specialinvoke r12.<com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)>(r28) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)>
VIRTUAL edge: virtualinvoke $r29.<com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)>($r30, r2, i0, i1, r28, r4) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r29.<com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)>($r30, r2, i0, i1, r28, r4) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MeasureOutput not set, ComponentLifecycle is: ") in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r16) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r18) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r20.<com.facebook.litho.DiffNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke $r21.<com.facebook.litho.DiffNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: void setLastHeightSpec(int)>
VIRTUAL edge: virtualinvoke $r22.<com.facebook.litho.DiffNode: void setLastMeasuredWidth(float)>($f2) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: virtualinvoke $r23.<com.facebook.litho.DiffNode: void setLastMeasuredHeight(float)>($f3) in <com.facebook.litho.ComponentLifecycle$2: long measure(com.facebook.yoga.YogaNode,float,com.facebook.yoga.YogaMeasureMode,float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.litho.DiffNode: void setLastMeasuredHeight(float)>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>(r3, $i0, $z1) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>(r3, r5, r12) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>(r3, $i0, $z1) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)>(r3) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r1) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: java.lang.Object mountContentLock> in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $i1 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.os.Build$VERSION: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)>(r0) in <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)> ==> <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ContextUtils: boolean isActivityDestroyed(android.app.Activity)>(r1) in <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)> ==> <com.facebook.litho.ContextUtils: boolean isActivityDestroyed(android.app.Activity)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)>($r2) in <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)> ==> <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.ContextUtils: boolean isActivityDestroyed(android.app.Activity)> ==> <android.os.Build$VERSION: void <clinit>()>
INTERFACE edge: interfaceinvoke $r0.<com.facebook.litho.ComponentsSystrace$Systrace: void beginSection(java.lang.String)>(r1) in <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)> ==> <com.facebook.litho.DefaultComponentsSystrace: void beginSection(java.lang.String)>
INTERFACE edge: interfaceinvoke $r0.<com.facebook.litho.ComponentsSystrace$Systrace: void endSection()>() in <com.facebook.litho.ComponentsSystrace: void endSection()> ==> <com.facebook.litho.DefaultComponentsSystrace: void endSection()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.reference.ReferenceLifecycle: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r1, r0) in <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.reference.ReferenceLifecycle: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r1, r0) in <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.DrawableReference: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.reference.ReferenceLifecycle: void onRelease(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>(r1, r2, r0) in <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.reference.ReferenceLifecycle: void onRelease(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>(r1, r2, r0) in <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.ReferenceLifecycle: void onRelease(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.reference.ReferenceLifecycle: boolean shouldReferenceUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>(r0, r1) in <com.facebook.litho.reference.Reference: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldReferenceUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$attr: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$attr: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.reference.DrawableReference: void <init>()>() in <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference get()> ==> <com.facebook.litho.reference.DrawableReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.reference.DrawableReference$State: void <init>()>() in <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()> ==> <com.facebook.litho.reference.DrawableReference$State: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.reference.DrawableReference$PropsBuilder: void <init>(com.facebook.litho.reference.DrawableReference$State)>($r1) in <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()> ==> <com.facebook.litho.reference.DrawableReference$PropsBuilder: void <init>(com.facebook.litho.reference.DrawableReference$State)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference get()>() in <com.facebook.litho.reference.DrawableReference$State: void <init>()> ==> <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference get()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.os.Looper: java.lang.Thread getThread()>() in <com.facebook.litho.ThreadUtils: boolean isMainThread()> ==> <android.os.Looper: java.lang.Thread getThread()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.Window: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.content.res.TypedArray getWindowStyle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setContainer(android.view.Window)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.view.Window getContainer()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: boolean hasChildren()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setWindowManager(android.view.WindowManager,android.os.IBinder,java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.view.WindowManager getWindowManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setCallback(android.view.Window$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.view.Window$Callback getCallback()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setLayout(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setGravity(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setType(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setFormat(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setWindowAnimations(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setSoftInputMode(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void addFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void clearFlags(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setFlags(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setDimAmount(float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setAttributes(android.view.WindowManager$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.view.WindowManager$LayoutParams getAttributes()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: boolean requestFeature(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void makeActive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: boolean isActive()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: android.view.View findViewById(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setBackgroundDrawableResource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: boolean hasFeature(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setUiOptions(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Window: void setUiOptions(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ContextUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MeasureComparisonUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference$Builder: void <init>()>() in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void <init>()> ==> <com.facebook.litho.reference.Reference$Builder: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()>() in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool access$000()>() in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool access$000()>() in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool access$000()>
CLINIT edge: $r0 = <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.reference.BorderColorDrawableReference: android.support.v4.util.Pools$SynchronizedPool access$000()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.DrawableComponent$State: void <init>(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.DrawableComponent: com.facebook.litho.Component create(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.DrawableComponent$State: void <init>(com.facebook.litho.reference.Reference)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.DrawableComponent: com.facebook.litho.DrawableComponent get()>() in <com.facebook.litho.DrawableComponent$State: void <init>(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.DrawableComponent get()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.SizeSpec: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected size mode: ") in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i6) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r4) in <com.facebook.litho.SizeSpec: int resolveSize(int,int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.yoga.YogaMeasureMode: int ordinal()>() in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <com.facebook.yoga.YogaMeasureMode: int ordinal()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unexpected YogaMeasureMode: ") in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) in <com.facebook.litho.SizeSpec: int makeSizeSpecFromCssSpec(float,com.facebook.yoga.YogaMeasureMode)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DisplayListPrefetcher: void setHostingView(android.view.View)> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r2.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r3) in <com.facebook.litho.DisplayListPrefetcher: void setHostingView(android.view.View)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DisplayListPrefetcher: void initIfNeeded(android.view.View)>(r3) in <com.facebook.litho.DisplayListPrefetcher: void setHostingView(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: void initIfNeeded(android.view.View)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $l2 = virtualinvoke r3.<android.view.View: long getDrawingTime()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <android.view.View: long getDrawingTime()>
VIRTUAL edge: l3 = virtualinvoke $r4.<java.util.concurrent.TimeUnit: long toNanos(long)>($l2) in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <java.util.concurrent.TimeUnit: long toNanos(long)>
SPECIAL edge: r5 = specialinvoke r0.<com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.DisplayListPrefetcher: boolean canPrefetchOnTime(java.lang.String,long,long)>(r8, l6, l5) in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.DisplayListPrefetcher: boolean canPrefetchOnTime(java.lang.String,long,long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DisplayListPrefetcher: void updateAveragePrefetchDuration(java.lang.String,long)>(r8, l8) in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.DisplayListPrefetcher: void updateAveragePrefetchDuration(java.lang.String,long)>
VIRTUAL edge: r6 = virtualinvoke r5.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)>(r6) in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: $r7 = virtualinvoke r6.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r9 = virtualinvoke r6.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.DisplayListPrefetcher: void run()> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
CLINIT edge: $r1 = <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration sAverageDLPrefetchDurationNs> in <com.facebook.litho.DisplayListPrefetcher: boolean canPrefetchOnTime(java.lang.String,long,long)> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration sAverageDLPrefetchDurationNs> in <com.facebook.litho.DisplayListPrefetcher: void updateAveragePrefetchDuration(java.lang.String,long)> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r6) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>(r12, r7, r20) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>
STATIC edge: r14 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r11, r0) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
STATIC edge: $r13 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>(r12, $i0) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: r10 = staticinvoke <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)>($r9) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.displaylist.DisplayList: com.facebook.litho.displaylist.DisplayList createDisplayList(java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r6) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>(r12, r7, r20) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r14 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r11, r0) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r13 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>(r12, $i0) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r1, r4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r1, r4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>(r0, i0, 1) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>(r0, i0, 1) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)> ==> <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.DisplayListPrefetcher: boolean hasPrefetchItems()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.DisplayListPrefetcher: boolean hasPrefetchItems()> ==> <java.util.AbstractCollection: boolean isEmpty()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void getChars(java.lang.CharSequence,int,int,char[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,char,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int lastIndexOf(java.lang.CharSequence,char,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int indexOf(java.lang.CharSequence,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean regionMatches(java.lang.CharSequence,int,java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String substring(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String[] split(java.lang.String,java.util.regex.Pattern)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence stringOrSpannedString(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void writeToParcel(java.lang.CharSequence,android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence replace(java.lang.CharSequence,java.lang.String[],java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence expandTemplate(java.lang.CharSequence,java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: void copySpansFrom(android.text.Spanned,int,int,java.lang.Class,android.text.Spannable,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence ellipsize(java.lang.CharSequence,android.text.TextPaint,float,android.text.TextUtils$TruncateAt,boolean,android.text.TextUtils$EllipsizeCallback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence commaEllipsize(java.lang.CharSequence,android.text.TextPaint,float,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: java.lang.CharSequence concat(java.lang.CharSequence[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isGraphic(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference$Builder: void <init>()>() in <com.facebook.litho.reference.DrawableReference$PropsBuilder: void <init>(com.facebook.litho.reference.DrawableReference$State)> ==> <com.facebook.litho.reference.Reference$Builder: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.reference.BorderColorDrawableReference: void <init>()>() in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference get()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.reference.BorderColorDrawableReference$State: void <init>()>() in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: void <init>()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference get()>() in <com.facebook.litho.reference.BorderColorDrawableReference$State: void <init>()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference get()>() in <com.facebook.litho.reference.BorderColorDrawableReference$State: void <init>()> ==> <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference get()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)>($r4, $r3) in <com.facebook.litho.LayoutState$2: int compare(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.LayoutState$2: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)>($r4, $r3) in <com.facebook.litho.LayoutState$1: int compare(java.lang.Object,java.lang.Object)> ==> <com.facebook.litho.LayoutState$1: int compare(com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutOutput)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()>() in <com.facebook.litho.Transition$Builder: com.facebook.litho.Transition$Builder animate(com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()>
CLINIT edge: $r2 = new com.facebook.litho.Transition in <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()> ==> <com.facebook.litho.Transition: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()>() in <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()> ==> <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()>
CLINIT edge: <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator DEFAULT_ANIMATOR> = $r0 in <com.facebook.litho.Transition: void <clinit>()> ==> <com.facebook.litho.Transition: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator DEFAULT_ANIMATOR> in <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()> ==> <com.facebook.litho.Transition: void <clinit>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.FloatValue: void <init>(float)>(f0) in <com.facebook.litho.Transition$Builder: com.facebook.litho.Transition$Builder appearFrom(float)> ==> <com.facebook.litho.animation.FloatValue: void <init>(float)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.FloatValue: void <init>(float)>(f0) in <com.facebook.litho.Transition$Builder: com.facebook.litho.Transition$Builder disappearTo(float)> ==> <com.facebook.litho.animation.FloatValue: void <init>(float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode transitionKey(java.lang.String)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder transitionKey(java.lang.String)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode transitionKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder viewTag(java.lang.Object)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrapInView()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foregroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder backgroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.Component)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder child(com.facebook.litho.ComponentLayout)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode child(com.facebook.litho.ComponentLayout)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignContent(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignItems(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder justifyContent(com.facebook.yoga.YogaJustify)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder wrap(com.facebook.yoga.YogaWrap)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder heightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder maxWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder minWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder widthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder duplicateParentState(boolean)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder importantForAccessibility(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexBasisPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexShrink(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flexGrow(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder flex(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$ContainerBuilder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode transitionKey(java.lang.String)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder transitionKey(java.lang.String)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode transitionKey(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder viewTags(android.util.SparseArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTags(android.util.SparseArray)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder viewTag(java.lang.Object)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode viewTag(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>(i0, r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int,java.lang.Object[])> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int,java.lang.Object[])>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder contentDescription(java.lang.CharSequence)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder invisibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode invisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder fullImpressionHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode fullImpressionHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder unfocusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode unfocusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder focusedHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode focusedHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder visibleHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode visibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder touchHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode touchHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder clickHandler(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode clickHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>() in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder wrapInView()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrapInView()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder foregroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder foregroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder foregroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder foreground(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foreground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder backgroundColor(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder backgroundRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder backgroundAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundAttr(int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder background(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference$Builder)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference$Builder)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder background(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode background(com.facebook.litho.reference.Reference)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minHeightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder heightPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder maxWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder minWidthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder widthPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder borderWidthPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder paddingPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginAuto(com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r1, f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginPercent(com.facebook.yoga.YogaEdge,float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginDip(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginDip(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginRes(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginRes(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>(r1, i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginAttr(com.facebook.yoga.YogaEdge,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAttr(com.facebook.yoga.YogaEdge,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r1, i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder marginPx(com.facebook.yoga.YogaEdge,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>(z0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder duplicateParentState(boolean)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder importantForAccessibility(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPercent(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisDip(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisDip(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisRes(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisRes(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>(i0, i1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisAttr(int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisAttr(int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>(i0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexBasisPx(int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexShrink(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flexGrow(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder flex(float)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder positionType(com.facebook.yoga.YogaPositionType)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder alignSelf(com.facebook.yoga.YogaAlign)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>(r1) in <com.facebook.litho.NoOpInternalNode: com.facebook.litho.ComponentLayout$Builder layoutDirection(com.facebook.yoga.YogaDirection)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityNodeInfoHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityNodeInfoHandler()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityNodeInfoHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityNodeInfoHandler()>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>(r4, r5) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>(r4, r5) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
VIRTUAL edge: r6 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r6.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.ComponentLifecycle: void onPopulateAccessibilityNode(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,com.facebook.litho.Component)>(r5, r6) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <com.facebook.litho.ComponentLifecycle: void onPopulateAccessibilityNode(android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,com.facebook.litho.Component)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.ComponentAccessibilityDelegate: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentAccessibilityDelegate: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.facebook.litho.ComponentLifecycle: boolean implementsExtraAccessibilityNodes()>() in <com.facebook.litho.ComponentAccessibilityDelegate: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> ==> <com.facebook.litho.ComponentLifecycle: boolean implementsExtraAccessibilityNodes()>
SPECIAL edge: $r6 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)>(r5) in <com.facebook.litho.ComponentAccessibilityDelegate: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)> ==> <android.support.v4.widget.ExploreByTouchHelper: android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityEventHandler()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnInitializeAccessibilityEventHandler()>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventHandler()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventHandler()>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEvent(android.view.View,int)>(r2, i0) in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEvent(android.view.View,int)> ==> <android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEvent(android.view.View,int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventUncheckedHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventUncheckedHandler()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventUncheckedHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getSendAccessibilityEventUncheckedHandler()>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>(r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getDispatchPopulateAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getDispatchPopulateAccessibilityEventHandler()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getDispatchPopulateAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getDispatchPopulateAccessibilityEventHandler()>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnPopulateAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnPopulateAccessibilityEventHandler()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnPopulateAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnPopulateAccessibilityEventHandler()>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnRequestSendAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnRequestSendAccessibilityEventHandler()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnRequestSendAccessibilityEventHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getOnRequestSendAccessibilityEventHandler()>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>(r2, r3, r4) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getPerformAccessibilityActionHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getPerformAccessibilityActionHandler()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getPerformAccessibilityActionHandler()>() in <com.facebook.litho.ComponentAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getPerformAccessibilityActionHandler()>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>(r2, i0, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
VIRTUAL edge: $z0 = virtualinvoke r4.<com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>(r5) in <com.facebook.litho.TouchExpansionDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.internal.ArraySet$ArraySetIterator: void <init>(com.facebook.litho.internal.ArraySet)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i2 = virtualinvoke $r1.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>() in <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
SPECIAL edge: specialinvoke $r3.<java.util.NoSuchElementException: void <init>()>() in <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()> ==> <java.util.NoSuchElementException: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>($i2) in <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>()>() in <com.facebook.litho.internal.ArraySet$ArraySetIterator: void remove()> ==> <java.lang.IllegalStateException: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>($i0) in <com.facebook.litho.internal.ArraySet$ArraySetIterator: void remove()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object removeAt(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ResourceResolver: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: android.content.res.Resources getResources()>() in <com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.ComponentContext: android.content.res.Resources$Theme getTheme()>() in <com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)> ==> <android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.ResourceResolver: int dipsToPixels(float)>($f0) in <com.facebook.litho.ResourceResolver: int sipsToPixels(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f2) in <com.facebook.litho.ResourceResolver: int dipsToPixels(float)> ==> <com.facebook.litho.FastMath: int round(float)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentContext: android.content.res.Resources$Theme getTheme()>() in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: r5 = virtualinvoke $r3.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r4) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
VIRTUAL edge: $i2 = virtualinvoke r5.<android.content.res.TypedArray: int getResourceId(int,int)>(0, i1) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <android.content.res.TypedArray: int getResourceId(int,int)>
VIRTUAL edge: virtualinvoke r5.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r5.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
SPECIAL edge: r6 = specialinvoke r0.<com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayRes(int)>($i2) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayRes(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentContext: android.content.res.Resources$Theme getTheme()>() in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
VIRTUAL edge: r5 = virtualinvoke $r3.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r4) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
VIRTUAL edge: $i2 = virtualinvoke r5.<android.content.res.TypedArray: int getResourceId(int,int)>(0, i1) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <android.content.res.TypedArray: int getResourceId(int,int)>
VIRTUAL edge: virtualinvoke r5.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r5.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
SPECIAL edge: r6 = specialinvoke r0.<com.facebook.litho.ResourceResolver: int[] resolveIntArrayRes(int)>($i2) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int[] resolveIntArrayRes(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ResourceResolver: void <init>()>() in <com.facebook.litho.reference.Reference$Builder: void <init>()> ==> <com.facebook.litho.ResourceResolver: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>() in <com.facebook.litho.reference.Reference$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>(r1, $r2) in <com.facebook.litho.reference.Reference$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <android.graphics.drawable.ColorDrawable: void <init>()> ==> <android.graphics.drawable.Drawable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <android.graphics.drawable.ColorDrawable: void <init>(int)> ==> <android.graphics.drawable.Drawable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: int getChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: int getColor()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void setColor(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: int getAlpha()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void setAlpha(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: int getOpacity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)>(r0, i0, i1) in <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)>(r0, i0, i1) in <com.facebook.litho.Layout: com.facebook.litho.ComponentLayout$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)>
CLINIT edge: $r7 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.LithoView)> ==> <com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState getMainThreadLayoutState()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState getMainThreadLayoutState()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.LayoutState: com.facebook.litho.InternalNode getLayoutRoot()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode getLayoutRoot()>
VIRTUAL edge: $r3 = virtualinvoke $r6.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getRootInstance(com.facebook.litho.ComponentTree)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()>() in <com.facebook.litho.DebugComponent: java.lang.String getName()> ==> <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getName()>() in <com.facebook.litho.DebugComponent: java.lang.String getName()> ==> <java.lang.Class: java.lang.String getName()>
CLINIT edge: $r11 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaFlexDirection> in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> = $r1 in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
STATIC edge: $r10 = staticinvoke <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection[] values()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection[] values()>
STATIC edge: $r0 = staticinvoke <com.facebook.yoga.YogaUnit: com.facebook.yoga.YogaUnit[] values()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaUnit: com.facebook.yoga.YogaUnit[] values()>
CLINIT edge: $r19 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaFlexDirection> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r17 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaFlexDirection> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r15 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaFlexDirection> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaFlexDirection> = $r11 in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r7 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()>() in <com.facebook.litho.DebugComponent: java.lang.String getSimpleName()> ==> <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.Class: java.lang.String getSimpleName()>() in <com.facebook.litho.DebugComponent: java.lang.String getSimpleName()> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>($r6) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: i9 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: r14 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i8) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.facebook.litho.InternalNode: boolean hasNestedTree()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: boolean hasNestedTree()>
VIRTUAL edge: r15 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
VIRTUAL edge: $r7 = virtualinvoke r14.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $i4 = interfaceinvoke $r7.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i4 = interfaceinvoke $r7.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i4 = interfaceinvoke $r7.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: i12 = virtualinvoke r15.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: r16 = virtualinvoke r15.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i11) in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: $r5 = virtualinvoke r16.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $i1 = interfaceinvoke $r5.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r5.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke $r5.<java.util.List: int size()>() in <com.facebook.litho.DebugComponent: java.util.List getChildComponents()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: android.view.View getMountedView()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r7 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.DebugComponent: android.view.View getMountedView()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
SPECIAL edge: $r5 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()>() in <com.facebook.litho.DebugComponent: android.view.View getMountedView()> ==> <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: android.graphics.drawable.Drawable getMountedDrawable()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r7 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.DebugComponent: android.graphics.drawable.Drawable getMountedDrawable()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
SPECIAL edge: $r5 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()>() in <com.facebook.litho.DebugComponent: android.graphics.drawable.Drawable getMountedDrawable()> ==> <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r6 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.ComponentTree: com.facebook.litho.LithoView getLithoView()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LithoView getLithoView()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r5.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: i0 = specialinvoke r0.<com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)>(r3) in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)>
SPECIAL edge: i1 = specialinvoke r0.<com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)>(r3) in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
SPECIAL edge: specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, $i3, $i5) in <com.facebook.litho.DebugComponent: android.graphics.Rect getBoundsInLithoView()> ==> <android.graphics.Rect: void <init>(int,int,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <java.lang.ref.Reference: java.lang.Object get()>
SPECIAL edge: specialinvoke $r5.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: i0 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: i1 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: i1 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
SPECIAL edge: specialinvoke $r4.<android.graphics.Rect: void <init>(int,int,int,int)>(i0, i1, $i3, $i5) in <com.facebook.litho.DebugComponent: android.graphics.Rect getBounds()> ==> <android.graphics.Rect: void <init>(int,int,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.DebugComponent: boolean isLayoutNode()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.DebugComponent: boolean isLayoutNode()>
SPECIAL edge: $r12 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r10, $r11) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
SPECIAL edge: $r15 = specialinvoke r0.<com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)>($r14) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)>
SPECIAL edge: specialinvoke $r91.<android.support.v4.util.ArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <android.support.v4.util.ArrayMap: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: r10 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r11 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.reference.Reference getBackground()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.reference.Reference getBackground()>
VIRTUAL edge: $r14 = virtualinvoke r3.<com.facebook.litho.InternalNode: android.graphics.drawable.Drawable getForeground()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <com.facebook.litho.InternalNode: android.graphics.drawable.Drawable getForeground()>
INTERFACE edge: interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("background", $r12) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("background", $r12) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("background", $r12) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r96.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("background", $r12) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r97.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foreground", $r15) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r97.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foreground", $r15) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r97.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foreground", $r15) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r97.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("foreground", $r15) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("direction", $r17) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("direction", $r17) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("direction", $r17) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r98.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("direction", $r17) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-direction", $r19) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-direction", $r19) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-direction", $r19) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r99.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-direction", $r19) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r100.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("justify-content", $r21) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r100.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("justify-content", $r21) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r100.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("justify-content", $r21) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r100.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("justify-content", $r21) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r101.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-items", $r23) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r101.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-items", $r23) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r101.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-items", $r23) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r101.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-items", $r23) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r102.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-self", $r25) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r102.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-self", $r25) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r102.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-self", $r25) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r102.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-self", $r25) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-content", $r27) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-content", $r27) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-content", $r27) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r103.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("align-content", $r27) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r104.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("position", $r29) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r104.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("position", $r29) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r104.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("position", $r29) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r104.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("position", $r29) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-grow", $r31) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-grow", $r31) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-grow", $r31) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r105.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-grow", $r31) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-shrink", $r33) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-shrink", $r33) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-shrink", $r33) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r106.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-shrink", $r33) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r107.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-basis", $r35) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r107.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-basis", $r35) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r107.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-basis", $r35) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r107.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("flex-basis", $r35) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r108.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("width", $r37) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r108.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("width", $r37) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r108.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("width", $r37) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r108.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("width", $r37) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r109.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-width", $r39) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r109.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-width", $r39) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r109.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-width", $r39) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r109.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-width", $r39) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r110.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-width", $r41) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r110.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-width", $r41) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r110.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-width", $r41) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r110.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-width", $r41) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r111.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("height", $r43) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r111.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("height", $r43) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r111.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("height", $r43) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r111.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("height", $r43) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-height", $r45) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-height", $r45) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-height", $r45) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r112.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("min-height", $r45) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-height", $r47) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-height", $r47) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-height", $r47) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r113.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("max-height", $r47) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r92.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r73 = virtualinvoke $r92.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("margin-") in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r75 = virtualinvoke $r74.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r76 = virtualinvoke $r73.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r75) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r81 = virtualinvoke $r76.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, $r77) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, $r77) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, $r77) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r114.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r81, $r77) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r93.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r66 = virtualinvoke $r93.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding-") in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r69 = virtualinvoke $r66.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r68) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r84 = virtualinvoke $r69.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r84, $r70) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r84, $r70) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r84, $r70) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r115.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r84, $r70) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r94.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r59 = virtualinvoke $r94.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position-") in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r62 = virtualinvoke $r59.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r61) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r87 = virtualinvoke $r62.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r87, $r63) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r87, $r63) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r87, $r63) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r116.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r87, $r63) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r95.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r50 = virtualinvoke $r95.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("border-") in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r52 = virtualinvoke $r51.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r53 = virtualinvoke $r50.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r52) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r90 = virtualinvoke $r53.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.lang.StringBuilder: java.lang.String toString()>
INTERFACE edge: interfaceinvoke $r117.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r90, $r54) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r117.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r90, $r54) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r117.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r90, $r54) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r117.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r90, $r54) in <com.facebook.litho.DebugComponent: java.util.Map getStyles()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r3, r0) in <com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r1 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r17 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
VIRTUAL edge: $r18 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r17.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r19 = interfaceinvoke $r18.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r24.<android.support.v4.util.ArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <android.support.v4.util.ArrayMap: void <init>()>
VIRTUAL edge: r7 = virtualinvoke $r21.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>
VIRTUAL edge: $r8 = virtualinvoke $r21.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
VIRTUAL edge: virtualinvoke r10.<java.lang.reflect.Field: void setAccessible(boolean)>(1) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.reflect.Field: void setAccessible(boolean)>
VIRTUAL edge: $r11 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/facebook/litho/annotations/Prop;") in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: r12 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r4) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r13 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.String getName()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.reflect.Field: java.lang.String getName()>
SPECIAL edge: specialinvoke $r25.<android.support.v4.util.Pair: void <init>(java.lang.Object,java.lang.Object)>(r22, r12) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <android.support.v4.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r25) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r25) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r25) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r25) in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r27.<java.lang.IllegalAccessException: void printStackTrace()>() in <com.facebook.litho.DebugComponent: java.util.Map getProps()> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r16 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
VIRTUAL edge: $r17 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z1 = interfaceinvoke $r16.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>($i1) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r5 = virtualinvoke $r20.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>
SPECIAL edge: specialinvoke $r23.<android.support.v4.util.ArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <android.support.v4.util.ArrayMap: void <init>()>
VIRTUAL edge: r9 = virtualinvoke $r8.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>
VIRTUAL edge: virtualinvoke r10.<java.lang.reflect.Field: void setAccessible(boolean)>(1) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.reflect.Field: void setAccessible(boolean)>
VIRTUAL edge: $r11 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>(class "Lcom/facebook/litho/annotations/State;") in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.reflect.Field: java.lang.'annotation'.Annotation getAnnotation(java.lang.Class)>
VIRTUAL edge: r21 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke r10.<java.lang.reflect.Field: java.lang.String getName()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.reflect.Field: java.lang.String getName()>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r21) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r21) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r21) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, r21) in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r25.<java.lang.IllegalAccessException: void printStackTrace()>() in <com.facebook.litho.DebugComponent: java.util.Map getState()> ==> <java.lang.Throwable: void printStackTrace()>
SPECIAL edge: specialinvoke $r8.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void setStyleOverride(java.lang.String,java.lang.Object)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>() in <com.facebook.litho.DebugComponent: void setStyleOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.LithoView: void forceRelayout()>() in <com.facebook.litho.DebugComponent: void setStyleOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.LithoView: void forceRelayout()>
SPECIAL edge: specialinvoke $r8.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void setPropOverride(java.lang.String,java.lang.Object)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>() in <com.facebook.litho.DebugComponent: void setPropOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.LithoView: void forceRelayout()>() in <com.facebook.litho.DebugComponent: void setPropOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.LithoView: void forceRelayout()>
SPECIAL edge: specialinvoke $r8.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void setStateOverride(java.lang.String,java.lang.Object)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>() in <com.facebook.litho.DebugComponent: void setStateOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.LithoView getLithoView()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.LithoView: void forceRelayout()>() in <com.facebook.litho.DebugComponent: void setStateOverride(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.LithoView: void forceRelayout()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.ComponentContext getContext()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.ComponentContext getContext()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: boolean isLayoutNode()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: boolean isLayoutNode()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: boolean isLayoutNode()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: boolean isLayoutNode()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: boolean isLayoutNode()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.DebugComponent: boolean isLayoutNode()>() in <com.facebook.litho.DebugComponent: java.lang.String getTestKey()> ==> <com.facebook.litho.DebugComponent: boolean isLayoutNode()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.lang.String getTestKey()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.InternalNode: java.lang.String getTestKey()>() in <com.facebook.litho.DebugComponent: java.lang.String getTestKey()> ==> <com.facebook.litho.InternalNode: java.lang.String getTestKey()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r8 = virtualinvoke r7.<com.facebook.litho.Component: java.lang.String getKey()>() in <com.facebook.litho.DebugComponent: java.lang.String getKey()> ==> <com.facebook.litho.Component: java.lang.String getKey()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: boolean isClickable()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.facebook.litho.InternalNode: boolean isClickable()>() in <com.facebook.litho.DebugComponent: boolean isClickable()> ==> <com.facebook.litho.InternalNode: boolean isClickable()>
SPECIAL edge: specialinvoke $r6.<java.lang.ClassCastException: void <init>()>() in <com.facebook.litho.displaylist.DisplayListLollipop: void draw(android.graphics.Canvas)> ==> <java.lang.ClassCastException: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r6) in <com.facebook.litho.displaylist.DisplayListLollipop: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
SPECIAL edge: specialinvoke $r6.<java.lang.ClassCastException: void <init>()>() in <com.facebook.litho.displaylist.DisplayListJB: void draw(android.graphics.Canvas)> ==> <java.lang.ClassCastException: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r6) in <com.facebook.litho.displaylist.DisplayListJB: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
SPECIAL edge: specialinvoke $r6.<java.lang.ClassCastException: void <init>()>() in <com.facebook.litho.displaylist.DisplayListMarshmallow: void draw(android.graphics.Canvas)> ==> <java.lang.ClassCastException: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r6) in <com.facebook.litho.displaylist.DisplayListMarshmallow: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
SPECIAL edge: specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r1) in <android.view.ContextThemeWrapper: void <init>()> ==> <android.content.ContextWrapper: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ContextThemeWrapper: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r1) in <android.view.ContextThemeWrapper: void <init>(android.content.Context,int)> ==> <android.content.ContextWrapper: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ContextThemeWrapper: void <init>(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ContextThemeWrapper: void setTheme(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ContextThemeWrapper: java.lang.Object getSystemService(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.LoaderManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.LoaderManager: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.LoaderManager: void enableDebugLogging(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.FragmentManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.FragmentManager: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.FragmentManager: void enableDebugLogging(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.FragmentManager: void invalidateOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.Fragment: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: int getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: java.lang.String getTag()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setArguments(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.os.Bundle getArguments()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setTargetFragment(android.app.Fragment,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.Fragment getTargetFragment()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: int getTargetRequestCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.Activity getActivity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.content.res.Resources getResources()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: java.lang.CharSequence getText(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: java.lang.String getString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: java.lang.String getString(int,java.lang.Object[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.FragmentManager getFragmentManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isAdded()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isDetached()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isRemoving()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isInLayout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isResumed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isVisible()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean isHidden()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onHiddenChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setRetainInstance(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean getRetainInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setHasOptionsMenu(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setMenuVisibility(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void setUserVisibleHint(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean getUserVisibleHint()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.app.LoaderManager getLoaderManager()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void startActivity(android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void startActivityForResult(android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onActivityResult(int,int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onAttach(android.app.Activity)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onCreate(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: android.view.View getView()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onActivityCreated(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onStart()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onResume()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onSaveInstanceState(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onPause()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onStop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onLowMemory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onTrimMemory(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onDestroyView()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onDestroy()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onDetach()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onDestroyOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void registerForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void unregisterForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.ActionBar: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar: void setHomeButtonEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar: android.content.Context getThemedContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>()> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(int,int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(int,int,int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(int,int,int,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)> ==> <android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void setTitle(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$LayoutParams: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.Dialog: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.Dialog: void <init>(android.content.Context,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void <init>(android.content.Context,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.app.ActionBar getActionBar()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setOwnerActivity(android.app.Activity)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.app.Activity getOwnerActivity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean isShowing()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void show()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void hide()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void dismiss()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.os.Bundle onSaveInstanceState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onRestoreInstanceState(android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.Window getWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.View getCurrentFocus()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.View findViewById(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setContentView(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setContentView(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setTitle(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setTitle(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onKeyUp(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onBackPressed()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onContentChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onWindowFocusChanged(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onAttachedToWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onDetachedFromWindow()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchKeyEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchTouchEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.View onCreatePanelView(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onPanelClosed(int,android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void openOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void closeOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void invalidateOptionsMenu()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void registerForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void unregisterForContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void openContextMenu(android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onContextMenuClosed(android.view.Menu)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean onSearchRequested()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.ActionMode onWindowStartingActionMode(android.view.ActionMode$Callback)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onActionModeStarted(android.view.ActionMode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void onActionModeFinished(android.view.ActionMode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void takeKeyEvents(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: boolean requestWindowFeature(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setFeatureDrawableResource(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setFeatureDrawableAlpha(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: android.view.LayoutInflater getLayoutInflater()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setCancelable(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setCanceledOnTouchOutside(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void cancel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setCancelMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setDismissMessage(android.os.Message)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setVolumeControlStream(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: int getVolumeControlStream()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.LayoutInflater$Factory getFactory()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.LayoutInflater$Factory2 getFactory2()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: void setFactory(android.view.LayoutInflater$Factory)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: void setFactory2(android.view.LayoutInflater$Factory2)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.LayoutInflater$Filter getFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: void setFilter(android.view.LayoutInflater$Filter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.View inflate(int,android.view.ViewGroup,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.View inflate(org.xmlpull.v1.XmlPullParser,android.view.ViewGroup,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.LayoutInflater: android.view.View createView(java.lang.String,java.lang.String,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.app.PendingIntent getActivity(android.content.Context,int,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.app.PendingIntent getActivities(android.content.Context,int,android.content.Intent[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.app.PendingIntent getBroadcast(android.content.Context,int,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.app.PendingIntent getService(android.content.Context,int,android.content.Intent,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.content.IntentSender getIntentSender()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void cancel()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send(int,android.app.PendingIntent$OnFinished,android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void send(android.content.Context,int,android.content.Intent,android.app.PendingIntent$OnFinished,android.os.Handler,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: java.lang.String getTargetPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: boolean equals(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: int hashCode()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r38) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r6) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r7) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r9) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r10) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r11) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r12) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r13) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r14) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r15) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r16) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r17) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r18) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r19) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r20) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r21) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r22) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r23) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r24) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r25) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r26) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r27) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r28) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r29) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r35) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r34) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r0.<java.util.List: boolean add(java.lang.Object)>($r33) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r36 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r36 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: i0 = virtualinvoke r37.<android.util.SparseArray: int size()>() in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <android.util.SparseArray: int size()>
VIRTUAL edge: $r38 = virtualinvoke r37.<android.util.SparseArray: java.lang.Object valueAt(int)>(i1) in <com.facebook.litho.LithoDebugInfo: java.util.List getPools()> ==> <android.util.SparseArray: java.lang.Object valueAt(int)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context)>(r1) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(android.content.Context,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke $r0.<com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>($r5) in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: com.facebook.litho.LithoView create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree build()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void <init>(android.content.Context,android.util.AttributeSet)>(r1, null) in <com.facebook.litho.LithoView: void <init>(android.content.Context)> ==> <com.facebook.litho.LithoView: void <init>(android.content.Context,android.util.AttributeSet)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ComponentContext: void <init>(android.content.Context)>(r2) in <com.facebook.litho.LithoView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>($r1, r3) in <com.facebook.litho.LithoView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>(r1, null) in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)>(r1, r2, 0) in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)> ==> <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>(r1, r2) in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView,com.facebook.litho.LithoView$1)>(r0, null) in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView,com.facebook.litho.LithoView$1)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)>(r0) in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.facebook.litho.ComponentContext: java.lang.Object getSystemService(java.lang.String)>("accessibility") in <com.facebook.litho.LithoView: void <init>(com.facebook.litho.ComponentContext,android.util.AttributeSet,boolean)> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void onStartTemporaryDetach()>() in <com.facebook.litho.LithoView: void onStartTemporaryDetach()> ==> <android.view.View: void onStartTemporaryDetach()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void onDetach()>() in <com.facebook.litho.LithoView: void onStartTemporaryDetach()> ==> <com.facebook.litho.LithoView: void onDetach()>
STATIC edge: staticinvoke <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener)>($r3, $r6) in <com.facebook.litho.LithoView: void onDetach()> ==> <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void onFinishTemporaryDetach()>() in <com.facebook.litho.LithoView: void onFinishTemporaryDetach()> ==> <android.view.View: void onFinishTemporaryDetach()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void onAttach()>() in <com.facebook.litho.LithoView: void onFinishTemporaryDetach()> ==> <com.facebook.litho.LithoView: void onAttach()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>($r2) in <com.facebook.litho.LithoView: void onAttach()> ==> <com.facebook.litho.AccessibilityUtils: void <clinit>()>
STATIC edge: staticinvoke <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener)>($r4, $r6) in <com.facebook.litho.LithoView: void onAttach()> ==> <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager,android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListener)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>($r2) in <com.facebook.litho.LithoView: void onAttach()> ==> <com.facebook.litho.AccessibilityUtils: boolean isAccessibilityEnabled(android.content.Context)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.LithoView: android.content.Context getContext()>() in <com.facebook.litho.LithoView: com.facebook.litho.ComponentContext getComponentContext()> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void rebind()>() in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.LithoView: void rebind()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void setMountStateDirty()>() in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.LithoView: void setMountStateDirty()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.ComponentTree: void detach()>() in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: void detach()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ComponentTree: void clearLithoView()>() in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: void clearLithoView()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)>(r0) in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentTree: void attach()>() in <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: void attach()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void detach()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void clearLithoView()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)>($r15, $r16) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)>($r15, $r16) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>($r6, i0, i1, i2) in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>($r6, i0, i1, i2) in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)>(r0) in <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)>(r2) in <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)> ==> <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)>(r0) in <com.facebook.litho.ComponentTree: boolean hasSameBaseContext(android.content.Context,android.content.Context)> ==> <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LithoView: com.facebook.litho.ComponentContext getComponentContext()>() in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: com.facebook.litho.ComponentContext getComponentContext()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>($r6) in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree build()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component)>(r2) in <com.facebook.litho.LithoView: void setComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void setRoot(com.facebook.litho.Component)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LithoView: com.facebook.litho.ComponentContext getComponentContext()>() in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: com.facebook.litho.ComponentContext getComponentContext()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>($r6) in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree build()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>() in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree build()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.ComponentTree: void setRootAsync(com.facebook.litho.Component)>(r2) in <com.facebook.litho.LithoView: void setComponentAsync(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree: void setRootAsync(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.MountState: void rebind()>() in <com.facebook.litho.LithoView: void rebind()> ==> <com.facebook.litho.MountState: void rebind()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>(r9, $i1, $i2, $i3, $i4, 1) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>(r9, $i1, $i2, $i3, $i4, 1) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: $i15 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i14, 1073741824) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
STATIC edge: $i13 = staticinvoke <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>($i12, 1073741824) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.MountState: void unbind()>() in <com.facebook.litho.LithoView: void unbind()> ==> <com.facebook.litho.MountState: void unbind()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: void setHasTransientState(boolean)> ==> <com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>(null) in <com.facebook.litho.LithoView: void setHasTransientState(boolean)> ==> <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void setHasTransientState(boolean)>(z0) in <com.facebook.litho.LithoView: void setHasTransientState(boolean)> ==> <com.facebook.litho.ComponentHost: void setHasTransientState(boolean)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void offsetTopAndBottom(int)>(i0) in <com.facebook.litho.LithoView: void offsetTopAndBottom(int)> ==> <android.view.View: void offsetTopAndBottom(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>() in <com.facebook.litho.LithoView: void offsetTopAndBottom(int)> ==> <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>
CLINIT edge: $z3 = <com.facebook.litho.config.ComponentsConfiguration: boolean isIncrementalMountOnOffsetOrTranslationChangeEnabled> in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r6) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r6) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: $i22 = staticinvoke <java.lang.Math: int min(int,int)>(i7, i1) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i20 = staticinvoke <java.lang.Math: int min(int,int)>(i11, i0) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i19 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i18) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i17 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i16) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r6 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
CLINIT edge: r6 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void offsetLeftAndRight(int)>(i0) in <com.facebook.litho.LithoView: void offsetLeftAndRight(int)> ==> <android.view.View: void offsetLeftAndRight(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>() in <com.facebook.litho.LithoView: void offsetLeftAndRight(int)> ==> <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void setTranslationX(float)>(f0) in <com.facebook.litho.LithoView: void setTranslationX(float)> ==> <android.view.View: void setTranslationX(float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>() in <com.facebook.litho.LithoView: void setTranslationX(float)> ==> <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void setTranslationY(float)>(f0) in <com.facebook.litho.LithoView: void setTranslationY(float)> ==> <android.view.View: void setTranslationY(float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>() in <com.facebook.litho.LithoView: void setTranslationY(float)> ==> <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>(r4) in <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("To perform incremental mounting, you need first to enable it when creating the ComponentTree.") in <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: void performIncrementalMount()> ==> <com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ComponentTree: void incrementalMountComponent()>() in <com.facebook.litho.LithoView: void performIncrementalMount()> ==> <com.facebook.litho.ComponentTree: void incrementalMountComponent()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("To perform incremental mounting, you need first to enable it when creating the ComponentTree.") in <com.facebook.litho.LithoView: void performIncrementalMount()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r1) in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: r1 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()> ==> <com.facebook.litho.ComponentTree: boolean isIncrementalMountEnabled()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.ComponentTree: void release()>() in <com.facebook.litho.LithoView: void release()> ==> <com.facebook.litho.ComponentTree: void release()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>()>() in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void handleMessage(android.os.Message)> ==> <java.lang.IllegalArgumentException: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <android.os.HandlerThread: void <init>(java.lang.String)> ==> <java.lang.Thread: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Thread: void <init>()>() in <android.os.HandlerThread: void <init>(java.lang.String,int)> ==> <java.lang.Thread: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: android.os.Looper getLooper()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: boolean quit()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.HandlerThread: int getThreadId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DefaultComponentsSystrace: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.reference.ReferenceLifecycle: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldReferenceUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldReferenceUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke r4.<com.facebook.litho.reference.ReferenceLifecycle: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>(r0, r1) in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldReferenceUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.lang.Object: int hashCode()>() in <com.facebook.litho.reference.DrawableReference$State: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.DrawableReference$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.DrawableReference$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.BorderColorDrawableReference$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.reference.BorderColorDrawableReference$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <com.facebook.litho.MatrixDrawable: void <init>()> ==> <android.graphics.drawable.Drawable: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: virtualinvoke $r11.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0) in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: $z2 = virtualinvoke $r10.<com.facebook.litho.DrawableMatrix: boolean shouldClipRect()>() in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)> ==> <com.facebook.litho.DrawableMatrix: boolean shouldClipRect()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MatrixDrawable: void invalidateSelf()>() in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)> ==> <android.graphics.drawable.Drawable: void invalidateSelf()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)>(r1, null) in <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable)> ==> <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable,com.facebook.litho.DrawableMatrix)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.MatrixDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MatrixDrawable: void bind(int,int)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.MatrixDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MatrixDrawable: void bind(int,int)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>($i2, $i3) in <com.facebook.litho.MatrixDrawable: void bind(int,int)> ==> <com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.MatrixDrawable: void setBounds(int,int,int,int)> ==> <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>(i0, i1) in <com.facebook.litho.MatrixDrawable: void setBounds(int,int,int,int)> ==> <com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>(r1) in <com.facebook.litho.MatrixDrawable: void setBounds(android.graphics.Rect)> ==> <android.graphics.drawable.Drawable: void setBounds(android.graphics.Rect)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>($i1, $i0) in <com.facebook.litho.MatrixDrawable: void setBounds(android.graphics.Rect)> ==> <com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.MatrixDrawable: void unmount()> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.MatrixDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: i1 = virtualinvoke r4.<android.graphics.Canvas: int save()>() in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: int save()>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void translate(float,float)>($f1, $f0) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void translate(float,float)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void concat(android.graphics.Matrix)>($r6) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void concat(android.graphics.Matrix)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void restoreToCount(int)>(i1) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void restoreToCount(int)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: int save()>() in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: int save()>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Canvas: void restore()>() in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.Canvas: void restore()>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r4) in <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setChangingConfigurations(int)> ==> <com.facebook.litho.DisplayListDrawable: void setChangingConfigurations(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setChangingConfigurations(int)> ==> <com.facebook.litho.MatrixDrawable: void setChangingConfigurations(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setChangingConfigurations(int)> ==> <android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()> ==> <com.facebook.litho.DisplayListDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()> ==> <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.Drawable: int getChangingConfigurations()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getChangingConfigurations()>() in <com.facebook.litho.MatrixDrawable: int getChangingConfigurations()> ==> <android.graphics.drawable.InsetDrawable: int getChangingConfigurations()>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setDither(boolean)> ==> <com.facebook.litho.DisplayListDrawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setDither(boolean)> ==> <com.facebook.litho.MatrixDrawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setDither(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setDither(boolean)> ==> <android.graphics.drawable.Drawable: void setDither(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setFilterBitmap(boolean)> ==> <com.facebook.litho.DisplayListDrawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setFilterBitmap(boolean)> ==> <com.facebook.litho.MatrixDrawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>(z0) in <com.facebook.litho.MatrixDrawable: void setFilterBitmap(boolean)> ==> <android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setAlpha(int)> ==> <com.facebook.litho.DisplayListDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setAlpha(int)> ==> <com.facebook.litho.MatrixDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setAlpha(int)> ==> <android.graphics.drawable.ColorDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setAlpha(int)> ==> <com.facebook.litho.BorderColorDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.drawable.Drawable: void setAlpha(int)>(i0) in <com.facebook.litho.MatrixDrawable: void setAlpha(int)> ==> <android.graphics.drawable.InsetDrawable: void setAlpha(int)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r2) in <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.DisplayListDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r2) in <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r2) in <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r2) in <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <com.facebook.litho.BorderColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.drawable.Drawable: void setColorFilter(android.graphics.ColorFilter)>(r2) in <com.facebook.litho.MatrixDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.MatrixDrawable: boolean isStateful()> ==> <com.facebook.litho.DisplayListDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.MatrixDrawable: boolean isStateful()> ==> <com.facebook.litho.MatrixDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.MatrixDrawable: boolean isStateful()> ==> <android.graphics.drawable.Drawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.MatrixDrawable: boolean isStateful()> ==> <android.graphics.drawable.InsetDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r2) in <com.facebook.litho.MatrixDrawable: boolean setState(int[])> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r2) in <com.facebook.litho.MatrixDrawable: boolean setState(int[])> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean setState(int[])>(r2) in <com.facebook.litho.MatrixDrawable: boolean setState(int[])> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.MatrixDrawable: int[] getState()> ==> <com.facebook.litho.DisplayListDrawable: int[] getState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.MatrixDrawable: int[] getState()> ==> <com.facebook.litho.MatrixDrawable: int[] getState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int[] getState()>() in <com.facebook.litho.MatrixDrawable: int[] getState()> ==> <android.graphics.drawable.Drawable: int[] getState()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <com.facebook.litho.DisplayListDrawable: android.graphics.drawable.Drawable getCurrent()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getCurrent()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>() in <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getCurrent()> ==> <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
SPECIAL edge: $z2 = specialinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)> ==> <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)> ==> <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $z3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>(z0, z1) in <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)> ==> <android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.MatrixDrawable: int getOpacity()> ==> <com.facebook.litho.DisplayListDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.MatrixDrawable: int getOpacity()> ==> <com.facebook.litho.MatrixDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.MatrixDrawable: int getOpacity()> ==> <android.graphics.drawable.ColorDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.MatrixDrawable: int getOpacity()> ==> <com.facebook.litho.BorderColorDrawable: int getOpacity()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getOpacity()>() in <com.facebook.litho.MatrixDrawable: int getOpacity()> ==> <android.graphics.drawable.InsetDrawable: int getOpacity()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.MatrixDrawable: android.graphics.Region getTransparentRegion()> ==> <com.facebook.litho.DisplayListDrawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.MatrixDrawable: android.graphics.Region getTransparentRegion()> ==> <com.facebook.litho.MatrixDrawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>() in <com.facebook.litho.MatrixDrawable: android.graphics.Region getTransparentRegion()> ==> <android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()> ==> <android.graphics.drawable.Drawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()> ==> <android.graphics.drawable.Drawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.MatrixDrawable: int getMinimumWidth()> ==> <com.facebook.litho.DisplayListDrawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.MatrixDrawable: int getMinimumWidth()> ==> <com.facebook.litho.MatrixDrawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumWidth()>() in <com.facebook.litho.MatrixDrawable: int getMinimumWidth()> ==> <android.graphics.drawable.Drawable: int getMinimumWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.MatrixDrawable: int getMinimumHeight()> ==> <com.facebook.litho.DisplayListDrawable: int getMinimumHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.MatrixDrawable: int getMinimumHeight()> ==> <com.facebook.litho.MatrixDrawable: int getMinimumHeight()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.Drawable: int getMinimumHeight()>() in <com.facebook.litho.MatrixDrawable: int getMinimumHeight()> ==> <android.graphics.drawable.Drawable: int getMinimumHeight()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)> ==> <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)> ==> <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)> ==> <android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r2) in <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)> ==> <android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MatrixDrawable: void invalidateSelf()>() in <com.facebook.litho.MatrixDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <android.graphics.drawable.Drawable: void invalidateSelf()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MatrixDrawable: void scheduleSelf(java.lang.Runnable,long)>(r1, l0) in <com.facebook.litho.MatrixDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> ==> <android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MatrixDrawable: void unscheduleSelf(java.lang.Runnable)>(r1) in <com.facebook.litho.MatrixDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> ==> <android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MatrixDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MatrixDrawable: boolean onTouchEvent(android.view.MotionEvent,android.view.View)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $f0 = virtualinvoke r2.<android.view.MotionEvent: float getX()>() in <com.facebook.litho.MatrixDrawable: boolean onTouchEvent(android.view.MotionEvent,android.view.View)> ==> <android.view.MotionEvent: float getX()>
VIRTUAL edge: $f1 = virtualinvoke r2.<android.view.MotionEvent: float getY()>() in <com.facebook.litho.MatrixDrawable: boolean onTouchEvent(android.view.MotionEvent,android.view.View)> ==> <android.view.MotionEvent: float getY()>
VIRTUAL edge: $i1 = virtualinvoke r3.<android.view.MotionEvent: int getActionMasked()>() in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: int getActionMasked()>
VIRTUAL edge: $f0 = virtualinvoke r3.<android.view.MotionEvent: float getX()>() in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: float getX()>
VIRTUAL edge: $f1 = virtualinvoke r3.<android.view.MotionEvent: float getY()>() in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: float getY()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.MatrixDrawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $z1 = virtualinvoke $r4.<android.graphics.Rect: boolean contains(int,int)>($i2, $i3) in <com.facebook.litho.MatrixDrawable: boolean shouldHandleTouchEvent(android.view.MotionEvent)> ==> <android.graphics.Rect: boolean contains(int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.reference.Reference: java.lang.String getSimpleName()>() in <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.reference.Reference: java.lang.String getSimpleName()>() in <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()> ==> <com.facebook.litho.reference.DrawableReference$State: java.lang.String getSimpleName()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.DrawableComponent$State: int hashCode()> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.DrawableComponent$State: int hashCode()> ==> <com.facebook.litho.reference.DrawableReference$State: int hashCode()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() in <com.facebook.litho.DrawableComponent$State: int hashCode()> ==> <java.lang.Object: int hashCode()>
VIRTUAL edge: $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r3 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)> ==> <com.facebook.litho.reference.DrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r6.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: int getDisplayId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: void getSize(android.graphics.Point)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: void getRectSize(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: int getWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: int getHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: int getRotation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: int getPixelFormat()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: float getRefreshRate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Display: void getMetrics(android.util.DisplayMetrics)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>()> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>(int)> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.Paint: void <init>()>() in <android.text.TextPaint: void <init>(android.graphics.Paint)> ==> <android.graphics.Paint: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void <init>(android.graphics.Paint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextPaint: void set(android.text.TextPaint)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.text.TextUtils$TruncateAt: android.text.TextUtils$TruncateAt[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.text.TextUtils$SimpleStringSplitter: void <init>(char)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void <init>(char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: java.util.Iterator iterator()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: java.lang.String next()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.TextUtils$SimpleStringSplitter: void remove()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>() in <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.Transition$Builder: void <init>(java.lang.String)>(r1) in <com.facebook.litho.Transition: com.facebook.litho.Transition$Builder create(java.lang.String)> ==> <com.facebook.litho.Transition$Builder: void <init>(java.lang.String)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()>() in <com.facebook.litho.Transition$Builder: void <init>(java.lang.String)> ==> <com.facebook.litho.Transition: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()>() in <com.facebook.litho.Transition$Builder: void <init>(java.lang.String)> ==> <com.facebook.litho.Transition: com.facebook.litho.Transition$TransitionAnimator access$000()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])>(r1) in <com.facebook.litho.Transition: com.facebook.litho.TransitionSet createSet(com.facebook.litho.Transition$Builder[])> ==> <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])>
CLINIT edge: $r2 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Transition: void <init>(java.lang.String,com.facebook.litho.animation.AnimatedProperty,com.facebook.litho.Transition$TransitionAnimator,com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.FloatValue: void <init>(float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ClickEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LongClickEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TouchEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.InterceptTouchEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.VisibleEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.InvisibleEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.FocusedVisibleEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.UnfocusedVisibleEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.FullImpressionVisibleEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DispatchPopulateAccessibilityEventEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.OnInitializeAccessibilityEventEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.OnInitializeAccessibilityNodeInfoEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.OnPopulateAccessibilityEventEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.OnRequestSendAccessibilityEventEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.PerformAccessibilityActionEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.SendAccessibilityEventEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.SendAccessibilityEventUncheckedEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int v(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int d(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int i(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int w(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int e(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.Log: int println(int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.LongSparseArray: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.support.v4.util.LongSparseArray: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.MountState$PrepareMountStats: void <init>(com.facebook.litho.MountState$1)>(null) in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.MountState$PrepareMountStats: void <init>(com.facebook.litho.MountState$1)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.MountState$MountStats: void <init>(com.facebook.litho.MountState$1)>(null) in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <com.facebook.litho.MountState$MountStats: void <init>(com.facebook.litho.MountState$1)>
SPECIAL edge: specialinvoke $r5.<java.util.HashMap: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke $r6.<android.support.v4.util.LongSparseArray: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.support.v4.util.LongSparseArray: void <init>()>
SPECIAL edge: specialinvoke $r7.<android.support.v4.util.LongSparseArray: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.support.v4.util.LongSparseArray: void <init>()>
SPECIAL edge: specialinvoke $r8.<android.support.v4.util.LongSparseArray: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.support.v4.util.LongSparseArray: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke r9.<com.facebook.litho.LithoView: android.content.Context getContext()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <android.view.View: android.content.Context getContext()>
SPECIAL edge: specialinvoke $r17.<java.util.HashMap: void <init>()>() in <com.facebook.litho.MountState: void <init>(com.facebook.litho.LithoView)> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.WindowManager$BadTokenException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$BadTokenException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.WindowManager$BadTokenException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.WindowManager$BadTokenException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.app.PendingIntent$CanceledException: void <init>()> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent$CanceledException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.app.PendingIntent$CanceledException: void <init>(java.lang.String)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent$CanceledException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidException: void <init>()>() in <android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)> ==> <android.util.AndroidException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.PendingIntent$CanceledException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.FragmentTransaction: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.FragmentTransaction: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment$SavedState: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment$SavedState: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.content.Loader: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void deliverResult(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: android.content.Context getContext()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: int getId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: boolean isStarted()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: boolean isAbandoned()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: boolean isReset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void startLoading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void forceLoad()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void stopLoading()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void abandon()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void reset()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: boolean takeContentChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void onContentChanged()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: java.lang.String dataToString(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.util.AndroidRuntimeException: void <init>()>() in <android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)> ==> <android.util.AndroidRuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(int,int)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(int,int,int)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(int)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(android.app.ActionBar$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>($r1) in <android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.app.ActionBar$Tab: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.app.ActionBar$Tab: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.InflateException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InflateException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.InflateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InflateException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.InflateException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InflateException: void <init>(java.lang.Throwable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.LithoView: void refreshAccessibilityDelegatesIfNeeded(boolean)>(z0) in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)> ==> <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.LithoView: void requestLayout()>() in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void onAccessibilityStateChanged(boolean)> ==> <com.facebook.litho.ComponentHost: void requestLayout()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$animator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$animator: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$interpolator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$interpolator: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$style: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$style: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$xml: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$xml: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$raw: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$raw: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$color: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$color: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$fraction: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$fraction: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$anim: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$anim: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$array: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$array: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$plurals: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$plurals: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$string: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$string: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$mipmap: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$mipmap: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$id: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$id: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$integer: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$integer: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$layout: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$layout: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$drawable: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$drawable: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$dimen: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$dimen: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$menu: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$menu: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.R$bool: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.R$bool: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicWidth()>
VIRTUAL edge: i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicWidth()>
VIRTUAL edge: i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.drawable.Drawable: int getIntrinsicWidth()>
VIRTUAL edge: i0 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicWidth()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.DisplayListDrawable: int getIntrinsicHeight()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.MatrixDrawable: int getIntrinsicHeight()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.drawable.Drawable: int getIntrinsicHeight()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.graphics.drawable.Drawable: int getIntrinsicHeight()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.DrawableMatrix: void <init>()>() in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <com.facebook.litho.DrawableMatrix: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: void setTranslate(float,float)>($f28, $f29) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: void setTranslate(float,float)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: void setScale(float,float)>(f32, f32) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: void setScale(float,float)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: boolean postTranslate(float,float)>($f16, $f17) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: boolean postTranslate(float,float)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: void setScale(float,float)>(f33, f33) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: void setScale(float,float)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: boolean postTranslate(float,float)>(f39, f45) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: boolean postTranslate(float,float)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DrawableMatrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>(r13, r14, $r8) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
VIRTUAL edge: virtualinvoke r13.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f1, $f0) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.RectF: void set(float,float,float,float)>
VIRTUAL edge: virtualinvoke r14.<android.graphics.RectF: void set(float,float,float,float)>(0.0F, 0.0F, $f3, $f2) in <com.facebook.litho.DrawableMatrix: com.facebook.litho.DrawableMatrix create(android.graphics.drawable.Drawable,android.widget.ImageView$ScaleType,int,int)> ==> <android.graphics.RectF: void set(float,float,float,float)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)> ==> <android.graphics.drawable.Drawable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)> ==> <android.graphics.drawable.Drawable: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void <init>(android.graphics.drawable.Drawable,int,int,int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: int getChangingConfigurations()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void setAlpha(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: void setColorFilter(android.graphics.ColorFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: int getOpacity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: boolean isStateful()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable mutate()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.text.Spannable$Factory: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.text.Spannable$Factory: android.text.Spannable newSpannable(java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.animation.AnimatedComponent: java.lang.String getKey()>() in <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()> ==> <com.facebook.litho.animation.AnimatedComponent: java.lang.String getKey()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.animation.AnimatedPropertyNode: void <init>(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: void <init>(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: void setMountItem(java.lang.Object)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: z0 = virtualinvoke r0.<com.facebook.litho.animation.AnimatedPropertyNode: boolean hasInput()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: boolean hasInput()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.animation.AnimatedPropertyNode: com.facebook.litho.dataflow.ValueNode getInput()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()>
VIRTUAL edge: $f2 = virtualinvoke r0.<com.facebook.litho.animation.AnimatedPropertyNode: float getValue()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.animation.AnimatedPropertyNode: com.facebook.litho.dataflow.ValueNode getInput()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()>
VIRTUAL edge: $f3 = virtualinvoke $r6.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f1 = interfaceinvoke $r5.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r2) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)>
VIRTUAL edge: f0 = virtualinvoke $r3.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>(r2, f0) in <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)>($r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>(r1, r2, r3) in <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>(r1, r2) in <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)> ==> <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void setupBinding(com.facebook.litho.animation.Resolver)>(r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void setupBinding(com.facebook.litho.animation.Resolver)>(r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void setupBinding(com.facebook.litho.animation.Resolver)>(r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.GraphBinding: void activate()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.GraphBinding: void activate()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.GraphBinding: void deactivate()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void stop()> ==> <com.facebook.litho.dataflow.GraphBinding: void deactivate()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.facebook.litho.dataflow.GraphBinding: boolean isActive()>() in <com.facebook.litho.animation.TransitionAnimationBinding: boolean isActive()> ==> <com.facebook.litho.dataflow.GraphBinding: boolean isActive()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.animation.TransitionAnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>(r1) in <com.facebook.litho.animation.DisappearingComponent: void <init>(java.lang.String)> ==> <com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty width()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty height()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingPositionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>(r1, $r2, $r3) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.DisappearingPositionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingFloatComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty scale()> ==> <com.facebook.litho.animation.DisappearingFloatComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DisappearingFloatComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty alpha()> ==> <com.facebook.litho.animation.DisappearingFloatComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty alpha()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.FloatComponentProperty alpha()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty alpha()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty scale()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.FloatComponentProperty scale()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingFloatComponentProperty scale()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingPositionComponentProperty xy()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.PositionComponentProperty xy()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingPositionComponentProperty xy()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty height()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty height()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty height()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty width()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty width()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty width()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty y()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty y()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()>() in <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty x()> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DisappearingDimensionComponentProperty x()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>(r1) in <com.facebook.litho.animation.ChangingComponent: void <init>(java.lang.String)> ==> <com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty x()> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty y()> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty width()> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty height()> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty x()>() in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.PositionComponentProperty xy()> ==> <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty x()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty y()>() in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.PositionComponentProperty xy()> ==> <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty y()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>(r1, $r2, $r3) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.PositionComponentProperty xy()> ==> <com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.FloatComponentProperty scale()> ==> <com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.FloatComponentProperty alpha()> ==> <com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Transition$SpringTransitionAnimator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.SpringTransition: void <init>(com.facebook.litho.animation.ComponentProperty)>(r1) in <com.facebook.litho.Transition$SpringTransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.SpringTransition: void <init>(com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>(r1) in <com.facebook.litho.animation.AppearingComponent: void <init>(java.lang.String)> ==> <com.facebook.litho.animation.AnimatedComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty width()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty height()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingPositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>(r1, $r2, $r3) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingPositionComponentProperty xy()> ==> <com.facebook.litho.animation.AppearingPositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingFloatComponentProperty: void <init>(com.facebook.litho.animation.AppearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty scale()> ==> <com.facebook.litho.animation.AppearingFloatComponentProperty: void <init>(com.facebook.litho.animation.AppearingComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AppearingFloatComponentProperty: void <init>(com.facebook.litho.animation.AppearingComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, $r2) in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty alpha()> ==> <com.facebook.litho.animation.AppearingFloatComponentProperty: void <init>(com.facebook.litho.animation.AppearingComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty alpha()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.FloatComponentProperty alpha()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty alpha()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty scale()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.FloatComponentProperty scale()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingFloatComponentProperty scale()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingPositionComponentProperty xy()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.PositionComponentProperty xy()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingPositionComponentProperty xy()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty height()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty height()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty height()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty width()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty width()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty width()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty y()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty y()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()>() in <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty x()> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.AppearingDimensionComponentProperty x()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)>(r0, null) in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)>(r0, null) in <com.facebook.litho.DataFlowTransitionManager: void <init>()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id: [") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l0) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>($l1) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(long)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], lifecycle: [") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], index: [") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i3) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("], lastDuplicatedIdIndex: [") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" - ") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i5) in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got animation complete callback for wrong mount item (expected ") in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", got ") in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r17) in <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.ViewConfiguration: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScrollBarSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledScrollBarSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScrollBarFadeDuration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScrollDefaultDelay()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getFadingEdgeLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledFadingEdgeLength()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getPressedStateDuration()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getLongPressTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getKeyRepeatTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getKeyRepeatDelay()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getTapTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getJumpTapTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getDoubleTapTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getEdgeSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledEdgeSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getTouchSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledTouchSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledPagingTouchSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledDoubleTapSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getWindowTouchSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledWindowTouchSlop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getMinimumFlingVelocity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getMaximumFlingVelocity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getMaximumDrawingCacheSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledOverscrollDistance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: int getScaledOverflingDistance()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: long getZoomControlsTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: long getGlobalActionKeyTimeout()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: float getScrollFriction()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewConfiguration: boolean hasPermanentMenuKey()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.database.ContentObserver: void <init>(android.os.Handler)>($r2) in <android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)> ==> <android.database.ContentObserver: void <init>(android.os.Handler)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.content.Loader$ForceLoadContentObserver: void onChange(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.Surface: void <init>(android.graphics.SurfaceTexture)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface: void <init>(android.graphics.SurfaceTexture)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface: java.lang.String toString()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.SurfaceHolder$BadSurfaceTypeException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <android.widget.ImageView$ScaleType: android.widget.ImageView$ScaleType[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)>($r1) in <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.dataflow.GraphBinding create()> ==> <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)>
CLINIT edge: $r2 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)>(r1) in <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.dataflow.GraphBinding create(com.facebook.litho.dataflow.DataFlowGraph)> ==> <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to add binding after DataFlowGraph has already been activated.") in <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.dataflow.GraphBinding$Bindings: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>(r1, r2, r3) in <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>(r1, r2, "default_input") in <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)> ==> <com.facebook.litho.dataflow.GraphBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()>() in <com.facebook.litho.dataflow.GraphBinding: void activate()> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)>(r0) in <com.facebook.litho.dataflow.GraphBinding: void activate()> ==> <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)>(r0) in <com.facebook.litho.dataflow.GraphBinding: void deactivate()> ==> <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()>() in <com.facebook.litho.dataflow.GraphBinding: void deactivate()> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Overriding existing listener!") in <com.facebook.litho.dataflow.GraphBinding: void setListener(com.facebook.litho.dataflow.BindingListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>(r1, r2, r3) in <com.facebook.litho.animation.DisappearingPositionComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.DisappearingFloatComponentProperty: void <init>(com.facebook.litho.animation.DisappearingComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.CompositeComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent)>(r1) in <com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.CompositeComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>() in <com.facebook.litho.animation.SpringTransition: void <init>(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>($r2) in <com.facebook.litho.animation.SpringTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.AppearingDimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.DimensionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>(r1, r2, r3) in <com.facebook.litho.animation.AppearingPositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.PositionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.animation.AppearingFloatComponentProperty: void <init>(com.facebook.litho.animation.AppearingComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.FloatComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: i0 = virtualinvoke r5.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i4) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r12.<com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>(r3) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>("Some animation bookkeeping is wrong: tried to remove an animation from the list of active animations, but it wasn\'t there.") in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r13.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $i3 = virtualinvoke $r16.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i5) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r20.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r19) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r7 = virtualinvoke r3.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke $r7.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>($r8) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r9 = virtualinvoke r3.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
VIRTUAL edge: $f0 = virtualinvoke $r11.<java.lang.Float: float floatValue()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.Float: float floatValue()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: void clear()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void reset()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void reset()>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.view.Surface$OutOfResourcesException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface$OutOfResourcesException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.graphics.SurfaceTexture: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void <init>(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void setDefaultBufferSize(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void updateTexImage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void getTransformMatrix(float[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: long getTimestamp()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void release()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.widget.ImageView: void <init>(android.content.Context)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void <init>(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>($r2, $r1, 0) in <android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <android.view.View: void <init>(android.content.Context,android.util.AttributeSet,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void <init>(android.content.Context,android.util.AttributeSet,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void jumpDrawablesToCurrentState()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setAdjustViewBounds(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setMaxWidth(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setMaxHeight(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageResource(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageURI(android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageDrawable(android.graphics.drawable.Drawable)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageBitmap(android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageState(int[],boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setSelected(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageLevel(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setScaleType(android.widget.ImageView$ScaleType)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: android.graphics.Matrix getImageMatrix()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setImageMatrix(android.graphics.Matrix)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: int[] onCreateDrawableState(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: int getBaseline()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setBaseline(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setBaselineAlignBottom(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: boolean getBaselineAlignBottom()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setColorFilter(int,android.graphics.PorterDuff$Mode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setColorFilter(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void clearColorFilter()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setColorFilter(android.graphics.ColorFilter)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setAlpha(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.ImageView: void setVisibility(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph getInstance()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.ChoreographerTimingSource: void setDataFlowGraph(com.facebook.litho.dataflow.DataFlowGraph)>($r5) in <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph getInstance()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void setDataFlowGraph(com.facebook.litho.dataflow.DataFlowGraph)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)>($r2) in <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph getInstance()> ==> <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)>
CLINIT edge: $r3 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)>(r1) in <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph create(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)>
INTERFACE edge: interfaceinvoke r1.<com.facebook.litho.dataflow.TimingSource: void setDataFlowGraph(com.facebook.litho.dataflow.DataFlowGraph)>($r0) in <com.facebook.litho.dataflow.DataFlowGraph: com.facebook.litho.dataflow.DataFlowGraph create(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void setDataFlowGraph(com.facebook.litho.dataflow.DataFlowGraph)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.GraphBinding: boolean isActive()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.dataflow.GraphBinding: boolean isActive()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.internal.ArraySet getAllNodes()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.dataflow.GraphBinding: com.facebook.litho.internal.ArraySet getAllNodes()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected added GraphBinding to be active: ") in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r12) in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r0) in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: interfaceinvoke $r7.<com.facebook.litho.dataflow.TimingSource: void start()>() in <com.facebook.litho.dataflow.DataFlowGraph: void register(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void start()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to unregister non-existent binding") in <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.internal.ArraySet: boolean remove(java.lang.Object)>
VIRTUAL edge: $z2 = virtualinvoke $r6.<java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>() in <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: interfaceinvoke $r7.<com.facebook.litho.dataflow.TimingSource: void stop()>() in <com.facebook.litho.dataflow.DataFlowGraph: void unregister(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void stop()>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r3) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r11 = virtualinvoke r7.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>(r10) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.dataflow.ValueNode: void setInput(java.lang.String,com.facebook.litho.dataflow.ValueNode)>(r10, r4) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <com.facebook.litho.dataflow.ValueNode: void setInput(java.lang.String,com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.dataflow.ValueNode: void addOutput(com.facebook.litho.dataflow.ValueNode)>(r7) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void applyBindings()> ==> <com.facebook.litho.dataflow.ValueNode: void addOutput(com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r11 = virtualinvoke r7.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>(r10) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void removeBindings()> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>($r2, $r1) in <com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.view.View: int getHeight()>() in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: int getHeight()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting height in animations is not supported yet.") in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void set(java.lang.Object,float)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setY(float)>($f2) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setY(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setTranslationY(float)>(0.0F) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setTranslationY(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setTranslationY(float)>(0.0F) in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.LithoView: void setTranslationY(float)>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setX(float)>($f2) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setX(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setTranslationX(float)>(0.0F) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setTranslationX(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setTranslationX(float)>(0.0F) in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)> ==> <com.facebook.litho.LithoView: void setTranslationX(float)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.view.View: int getWidth()>() in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: int getWidth()>
SPECIAL edge: specialinvoke $r0.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Setting width in animations is not supported yet.") in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void set(java.lang.Object,float)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
VIRTUAL edge: $f0 = virtualinvoke $r2.<android.view.View: float getScaleY()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: float getScaleY()>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setScaleY(float)>(f0) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setScaleY(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setScaleY(float)>(1.0F) in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setScaleY(float)>
VIRTUAL edge: f0 = virtualinvoke r2.<android.view.View: float getScaleX()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: float getScaleX()>
VIRTUAL edge: $f1 = virtualinvoke r2.<android.view.View: float getScaleY()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: float getScaleY()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to get scale of view, but scaleX and scaleY are different") in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setScaleX(float)>(f0) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setScaleX(float)>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setScaleY(float)>(f0) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setScaleY(float)>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setScaleX(float)>(1.0F) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setScaleX(float)>
VIRTUAL edge: virtualinvoke r2.<android.view.View: void setScaleY(float)>(1.0F) in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setScaleY(float)>
VIRTUAL edge: $f0 = virtualinvoke $r2.<android.view.View: float getScaleX()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: float getScaleX()>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setScaleX(float)>(f0) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setScaleX(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setScaleX(float)>(1.0F) in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setScaleX(float)>
VIRTUAL edge: $f0 = virtualinvoke $r2.<android.view.View: float getAlpha()>() in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)> ==> <android.view.View: float getAlpha()>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setAlpha(float)>(f0) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)> ==> <android.view.View: void setAlpha(float)>
VIRTUAL edge: virtualinvoke $r2.<android.view.View: void setAlpha(float)>(1.0F) in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)> ==> <android.view.View: void setAlpha(float)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>() in <com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidth(float)>(-100.0F) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidthLeft()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidth(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidth(float)>(100.0F) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidthRight()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByWidth(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeight(float)>(-100.0F) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeightAbove()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeight(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeight(float)>(100.0F) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetDownByHeight()> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder toOffsetByHeight(float)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)>($r1) in <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.animation.AnimatedComponent: java.lang.String getKey()>() in <com.facebook.litho.animation.CompositeComponentProperty: java.lang.String getTransitionKey()> ==> <com.facebook.litho.animation.AnimatedComponent: java.lang.String getKey()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>() in <com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.FloatValue: void <init>(float)>(f0) in <com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder 'to'(float)> ==> <com.facebook.litho.animation.FloatValue: void <init>(float)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)>($r1) in <com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>() in <com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.dataflow.ConstantNode: void <init>(float)> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.dataflow.SpringNode: void <init>()> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.dataflow.springs.Spring: void <init>()>() in <com.facebook.litho.dataflow.SpringNode: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.dataflow.SpringNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("initial") in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.dataflow.SpringNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("end") in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.dataflow.SpringNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("end") in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.SpringNode: boolean isFinished()>() in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.SpringNode: boolean isFinished()>
VIRTUAL edge: f1 = virtualinvoke $r6.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: f2 = virtualinvoke $r7.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: virtualinvoke $r8.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double)>($d3) in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double)>
VIRTUAL edge: virtualinvoke $r10.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)>($d4) in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)>
VIRTUAL edge: f3 = virtualinvoke $r1.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)>($d0) in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.dataflow.springs.Spring: void advance(double)>(d5) in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.springs.Spring: void advance(double)>
VIRTUAL edge: $d2 = virtualinvoke $r5.<com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>() in <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>() in <com.facebook.litho.dataflow.SpringNode: boolean isFinished()> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.FloatValue: void <init>(float)>(f0) in <com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder 'from'(float)> ==> <com.facebook.litho.animation.FloatValue: void <init>(float)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)>($r1) in <com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>($r2, $r1) in <com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidth(float)>(-100.0F) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidthLeft()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidth(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidth(float)>(100.0F) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidthRight()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByWidth(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeight(float)>(-100.0F) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeightAbove()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeight(float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeight(float)>(100.0F) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetDownByHeight()> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder fromOffsetByHeight(float)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)>($r1) in <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture$OutOfResourcesException: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Exception: void <init>()>() in <android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)> ==> <java.lang.Exception: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture$OutOfResourcesException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.BadGraphSetupException: void <init>(java.lang.String)>(r1) in <com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)> ==> <com.facebook.litho.dataflow.BadGraphSetupException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.dataflow.ChoreographerTimingSource$1: void <init>(com.facebook.litho.dataflow.ChoreographerTimingSource)>(r0) in <com.facebook.litho.dataflow.ChoreographerTimingSource: void <init>()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource$1: void <init>(com.facebook.litho.dataflow.ChoreographerTimingSource)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Must set a binding graph first.") in <com.facebook.litho.dataflow.ChoreographerTimingSource: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to start but was already running.") in <com.facebook.litho.dataflow.ChoreographerTimingSource: void start()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerTimingSource: void postFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void start()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void postFrameCallback()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to stop but wasn\'t running.") in <com.facebook.litho.dataflow.ChoreographerTimingSource: void stop()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerTimingSource: void stopFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void stop()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void stopFrameCallback()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.Animated$AbstractPointBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.AppearingPositionComponentProperty)> ==> <com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.PositionComponentProperty)> ==> <com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.DisappearingPositionComponentProperty)> ==> <com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractPointBuilder)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.Animated$AbstractBuilder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.AppearingDimensionComponentProperty)> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.AppearingFloatComponentProperty)> ==> <com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.FloatComponentProperty)> ==> <com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.DimensionComponentProperty)> ==> <com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.DisappearingDimensionComponentProperty)> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>(r0) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder animate(com.facebook.litho.animation.DisappearingFloatComponentProperty)> ==> <com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: void <init>(com.facebook.litho.animation.Animated$AbstractBuilder)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>($r1, f0) in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue absolute(float)> ==> <com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>($r1, f0) in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetPx(float)> ==> <com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>() in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetDip(android.content.Context,int)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue offsetDip(android.content.Context,int)> ==> <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>($r1, f0) in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue widthPercentageOffset(float)> ==> <com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>($r1, f0) in <com.facebook.litho.animation.DimensionValue: com.facebook.litho.animation.DimensionValue heightPercentageOffset(float)> ==> <com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)>
INTERFACE edge: f0 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>(r1) in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f6 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r8) in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f1 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r6) in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.facebook.litho.animation.DimensionValue$Type: int ordinal()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedComponent getAnimatedComponent()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedComponent getAnimatedComponent()>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedComponent getAnimatedComponent()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedComponent getAnimatedComponent()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty width()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty width()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty width()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty width()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty width()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty width()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty height()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.ChangingComponent: com.facebook.litho.animation.DimensionComponentProperty height()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty height()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.AppearingComponent: com.facebook.litho.animation.DimensionComponentProperty height()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.animation.AnimatedComponent: com.facebook.litho.animation.DimensionComponentProperty height()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.DisappearingComponent: com.facebook.litho.animation.DimensionComponentProperty height()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Missing RuntimeValue type: ") in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r12) in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14) in <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setSpringConfig(com.facebook.litho.dataflow.springs.SpringConfig)>($r9) in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setSpringConfig(com.facebook.litho.dataflow.springs.SpringConfig)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>(null) in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>(null) in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>(null) in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)>
SPECIAL edge: specialinvoke $r4.<java.util.concurrent.CopyOnWriteArraySet: void <init>()>() in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.util.concurrent.CopyOnWriteArraySet: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("spring:") in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.springs.Spring: void <init>()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: void clear()>() in <com.facebook.litho.dataflow.springs.Spring: void destroy()> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("springConfig is required") in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setSpringConfig(com.facebook.litho.dataflow.springs.SpringConfig)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)>(d0, 1) in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)>
VIRTUAL edge: r3 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setCurrentValue(double,boolean)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setAtRest()>
SPECIAL edge: $d0 = specialinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getDisplacementDistanceForState(com.facebook.litho.dataflow.springs.Spring$PhysicsState)>($r1) in <com.facebook.litho.dataflow.springs.Spring: double getCurrentDisplacementDistance()> ==> <com.facebook.litho.dataflow.springs.Spring: double getDisplacementDistanceForState(com.facebook.litho.dataflow.springs.Spring$PhysicsState)>
STATIC edge: $d3 = staticinvoke <java.lang.Math: double abs(double)>($d2) in <com.facebook.litho.dataflow.springs.Spring: double getDisplacementDistanceForState(com.facebook.litho.dataflow.springs.Spring$PhysicsState)> ==> <java.lang.Math: double abs(double)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>
VIRTUAL edge: $d2 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setEndValue(double)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: $d7 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>() in <com.facebook.litho.dataflow.springs.Spring: boolean isOvershooting()> ==> <com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>
VIRTUAL edge: $d5 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>() in <com.facebook.litho.dataflow.springs.Spring: boolean isOvershooting()> ==> <com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>
VIRTUAL edge: z4 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.springs.Spring: void interpolate(double)>($d11) in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.dataflow.springs.Spring: void interpolate(double)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean isOvershooting()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isOvershooting()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setVelocity(double)>(0.0) in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring setVelocity(double)>
VIRTUAL edge: r14 = virtualinvoke $r13.<java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z8 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z8 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.dataflow.springs.Spring: void advance(double)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: boolean systemShouldAdvance()> ==> <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: boolean wasAtRest()>() in <com.facebook.litho.dataflow.springs.Spring: boolean systemShouldAdvance()> ==> <com.facebook.litho.dataflow.springs.Spring: boolean wasAtRest()>
SPECIAL edge: $d3 = specialinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getDisplacementDistanceForState(com.facebook.litho.dataflow.springs.Spring$PhysicsState)>($r2) in <com.facebook.litho.dataflow.springs.Spring: boolean isAtRest()> ==> <com.facebook.litho.dataflow.springs.Spring: double getDisplacementDistanceForState(com.facebook.litho.dataflow.springs.Spring$PhysicsState)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("newListener is required") in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring addListener(com.facebook.litho.dataflow.springs.SpringListener)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>(r0) in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring addListener(com.facebook.litho.dataflow.springs.SpringListener)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("listenerToRemove is required") in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring removeListener(com.facebook.litho.dataflow.springs.SpringListener)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>(r0) in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring removeListener(com.facebook.litho.dataflow.springs.SpringListener)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean remove(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArraySet: void clear()>() in <com.facebook.litho.dataflow.springs.Spring: com.facebook.litho.dataflow.springs.Spring removeAllListeners()> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
VIRTUAL edge: $d0 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>() in <com.facebook.litho.dataflow.springs.Spring: boolean currentValueIsApproximately(double)> ==> <com.facebook.litho.dataflow.springs.Spring: double getCurrentValue()>
VIRTUAL edge: $d4 = virtualinvoke r0.<com.facebook.litho.dataflow.springs.Spring: double getRestDisplacementThreshold()>() in <com.facebook.litho.dataflow.springs.Spring: boolean currentValueIsApproximately(double)> ==> <com.facebook.litho.dataflow.springs.Spring: double getRestDisplacementThreshold()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.widget.RemoteViews: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.widget.RemoteViews: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: android.widget.RemoteViews clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: java.lang.String getPackage()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: int getLayoutId()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void removeAllViews(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void showNext(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void showPrevious(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setDisplayedChild(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setViewVisibility(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setImageViewResource(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setEmptyView(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setTextColor(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setScrollPosition(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setRelativeScrollPosition(int,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setByte(int,java.lang.String,byte)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setShort(int,java.lang.String,short)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setInt(int,java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setLong(int,java.lang.String,long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setFloat(int,java.lang.String,float)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setDouble(int,java.lang.String,double)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setChar(int,java.lang.String,char)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void setContentDescription(int,java.lang.CharSequence)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: android.view.View apply(android.content.Context,android.view.ViewGroup)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void reapply(android.content.Context,android.view.View)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: int describeContents()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews: void writeToParcel(android.os.Parcel,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.widget.RemoteViews: android.widget.RemoteViews clone()>() in <android.widget.RemoteViews: java.lang.Object clone()> ==> <android.widget.RemoteViews: android.widget.RemoteViews clone()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <com.facebook.litho.dataflow.BadGraphSetupException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat: void choreographerPostFrameCallback(android.view.Choreographer$FrameCallback)>($r4) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void choreographerPostFrameCallback(android.view.Choreographer$FrameCallback)>
VIRTUAL edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.ComponentTree$1: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.DisplayListPrefetcher: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.ComponentTree$2: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, 0L) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <android.os.HandlerThread: void run()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat: void choreographerPostFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>($r4, l0) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void choreographerPostFrameCallbackDelayed(android.view.Choreographer$FrameCallback,long)>
VIRTUAL edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.DisplayListPrefetcher: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.ComponentTree$1: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <android.os.HandlerThread: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.ComponentTree$2: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: virtualinvoke $r2.<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>($r3, $l1) in <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat: void choreographerRemoveFrameCallback(android.view.Choreographer$FrameCallback)>($r4) in <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void choreographerRemoveFrameCallback(android.view.Choreographer$FrameCallback)>
VIRTUAL edge: virtualinvoke $r2.<android.os.Handler: void removeCallbacks(java.lang.Runnable)>($r3) in <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <android.os.Handler: void removeCallbacks(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])>($r2) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding sequence(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])>(0, $r2) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding parallel(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])>(i0, $r2) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding stagger(int,com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.Animated$SpringBuilder: void <init>()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.Animated$SpringBuilder spring()> ==> <com.facebook.litho.animation.Animated$SpringBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.Animated$TimingBuilder: void <init>()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.Animated$TimingBuilder timing()> ==> <com.facebook.litho.animation.Animated$TimingBuilder: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.Animated$BezierBuilder: void <init>()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.Animated$BezierBuilder bezier()> ==> <com.facebook.litho.animation.Animated$BezierBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.lang.Object: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.lang.Enum: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.content.ComponentName: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.BitSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.ArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.Hashtable: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.ArrayDeque: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.os.Bundle: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.Date: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.Locale: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.widget.RemoteViews: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.AbstractMap: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.HashSet: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.LinkedList: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.util.SparseBooleanArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.util.SparseArray: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <android.content.Intent: java.lang.Object clone()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() in <com.facebook.litho.animation.DimensionValue$Type: com.facebook.litho.animation.DimensionValue$Type[] values()> ==> <java.util.HashMap: java.lang.Object clone()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.springs.SpringConfig: void <init>(double,double)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>()>() in <android.widget.RemoteViews$ActionException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.widget.RemoteViews$ActionException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void doFrame(long)>(l0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$1: void doFrame(long)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource$1: void doFrame(long)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void doFrame(long)>(l0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$1: void doFrame(long)> ==> <com.facebook.litho.animation.ParallelBinding$2: void doFrame(long)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void doFrame(long)>($l0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource$1: void doFrame(long)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void doFrame(long)>($l0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()> ==> <com.facebook.litho.animation.ParallelBinding$2: void doFrame(long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: void <init>()>() in <com.facebook.litho.animation.Animated$SpringBuilder: void <init>()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: void <init>()>() in <com.facebook.litho.animation.Animated$TimingBuilder: void <init>()> ==> <com.facebook.litho.animation.Animated$AbstractBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.Animated$AbstractPointBuilder: void <init>()>() in <com.facebook.litho.animation.Animated$BezierBuilder: void <init>()> ==> <com.facebook.litho.animation.Animated$AbstractPointBuilder: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty binding sequence") in <com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.animation.SequenceBinding$1: void <init>(com.facebook.litho.animation.SequenceBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void <init>(com.facebook.litho.animation.AnimationBinding[])> ==> <com.facebook.litho.animation.SequenceBinding$1: void <init>(com.facebook.litho.animation.SequenceBinding)>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>("Already started") in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r11.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding$1: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r11.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding$1: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r11.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke $r6.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke $r6.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke $r6.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke $r9.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r8) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke $r9.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r8) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke $r9.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r8) in <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.SequenceBinding: void stop()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void stop()>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.SequenceBinding: void stop()> ==> <com.facebook.litho.animation.ParallelBinding: void stop()>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.SequenceBinding: void stop()> ==> <com.facebook.litho.animation.SequenceBinding: void stop()>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.TimingTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.SpringTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.BezierTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.animation.SequenceBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.animation.SequenceBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.HashSet: void <init>()>() in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <java.util.HashSet: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Empty binding parallel") in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.animation.ParallelBinding$1: void <init>(com.facebook.litho.animation.ParallelBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <com.facebook.litho.animation.ParallelBinding$1: void <init>(com.facebook.litho.animation.ParallelBinding)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.animation.ParallelBinding$2: void <init>(com.facebook.litho.animation.ParallelBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void <init>(int,com.facebook.litho.animation.AnimationBinding[])> ==> <com.facebook.litho.animation.ParallelBinding$2: void <init>(com.facebook.litho.animation.ParallelBinding)>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Starting binding multiple times") in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r11 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r12.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r12.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding$1: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r12.<com.facebook.litho.animation.AnimationBindingListener: void onStart(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding$1: void onStart(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r14.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r14.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r14.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()>() in <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>() in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>() in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: com.facebook.litho.dataflow.ChoreographerCompat getInstance()>
INTERFACE edge: $z1 = interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: boolean isActive()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: boolean isActive()>
INTERFACE edge: $z1 = interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: boolean isActive()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.ParallelBinding: boolean isActive()>
INTERFACE edge: $z1 = interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: boolean isActive()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.SequenceBinding: boolean isActive()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void stop()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.ParallelBinding: void stop()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.animation.AnimationBinding: void stop()>() in <com.facebook.litho.animation.ParallelBinding: void stop()> ==> <com.facebook.litho.animation.SequenceBinding: void stop()>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.TimingTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.SpringTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.animation.BezierTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke $r4.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>(r3) in <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)> ==> <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.animation.ParallelBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.animation.ParallelBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>() in <com.facebook.litho.animation.TimingTransition: void <init>(int,com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>($r2) in <com.facebook.litho.animation.TimingTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>() in <com.facebook.litho.animation.BezierTransition: void <init>(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty,float,float)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>($r2) in <com.facebook.litho.animation.BezierTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>($r3) in <com.facebook.litho.animation.BezierTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.dataflow.TimingNode: void <init>(int)> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.dataflow.TimingNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("initial") in <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.dataflow.TimingNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("end") in <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
VIRTUAL edge: f1 = virtualinvoke r0.<com.facebook.litho.dataflow.TimingNode: float getValue()>() in <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: $f8 = virtualinvoke $r2.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: f0 = virtualinvoke $r1.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.animation.BezierTransition$BezierNode: void <init>(float,float,float)> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)>(i0, r1, null) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources)> ==> <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)>(10) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)>
VIRTUAL edge: $r4 = virtualinvoke r13.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>() in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $i1 = virtualinvoke r13.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: int getPoolSize()>() in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: int getPoolSize()>
VIRTUAL edge: virtualinvoke r13.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>($r6) in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke r14.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>() in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
VIRTUAL edge: $r5 = virtualinvoke r14.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>() in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
VIRTUAL edge: $r5 = virtualinvoke r14.<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>() in <com.facebook.litho.reference.DrawableResourcesCache: android.graphics.drawable.Drawable get(int,android.content.res.Resources,android.content.res.Resources$Theme)> ==> <android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)>(10) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.DisplayListDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.MatrixDrawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.graphics.drawable.Drawable: boolean isStateful()>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.graphics.drawable.InsetDrawable: boolean isStateful()>
VIRTUAL edge: virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>($r5) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>($r5) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r4.<android.graphics.drawable.Drawable: boolean setState(int[])>($r5) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r4.<android.graphics.drawable.Drawable: void jumpToCurrentState()>() in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <android.graphics.drawable.Drawable: void jumpToCurrentState()>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>(r4) in <com.facebook.litho.reference.DrawableResourcesCache: void release(android.graphics.drawable.Drawable,int)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(i0) in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: void <init>(int)> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: r1 = specialinvoke r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
SPECIAL edge: z0 = specialinvoke r0.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r1) in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int get()>() in <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: int getPoolSize()> ==> <java.util.concurrent.atomic.AtomicInteger: int get()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.StateSet: boolean isWildCard(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.StateSet: boolean stateSetMatches(int[],int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.StateSet: boolean stateSetMatches(int[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.StateSet: int[] trimStateSet(int[],int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.util.StateSet: java.lang.String dump(int[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.internal.MutableInt: void <init>(int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.RuntimeException: void <init>(java.lang.String)>(r1) in <com.facebook.litho.dataflow.IllegalValueException: void <init>(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: void <init>()>() in <com.facebook.litho.dataflow.SimpleNode: void <init>()> ==> <com.facebook.litho.dataflow.ValueNode: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.dataflow.SimpleNode: com.facebook.litho.dataflow.ValueNode getInput()>() in <com.facebook.litho.dataflow.SimpleNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()>
VIRTUAL edge: $f0 = virtualinvoke $r1.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.dataflow.SimpleNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>(i0, i1) in <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.ColumnReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder customAttribute(java.lang.String,java.lang.Object)>("is_sticky", $r1) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder isSticky(boolean)> ==> <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder customAttribute(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder customAttribute(java.lang.String,java.lang.Object)>("span_size", $r1) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder spanSize(int)> ==> <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder customAttribute(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo$Builder customAttribute(java.lang.String,java.lang.Object)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder,com.facebook.litho.ComponentInfo$1)>(r1, null) in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo build()> ==> <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder,com.facebook.litho.ComponentInfo$1)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentInfo$Builder: void release()>() in <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.ComponentInfo build()> ==> <com.facebook.litho.ComponentInfo$Builder: void release()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool access$400()>() in <com.facebook.litho.ComponentInfo$Builder: void release()> ==> <com.facebook.litho.ComponentInfo: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool access$400()>() in <com.facebook.litho.ComponentInfo$Builder: void release()> ==> <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool access$400()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool sBuilderPool> in <com.facebook.litho.ComponentInfo: android.support.v4.util.Pools$Pool access$400()> ==> <com.facebook.litho.ComponentInfo: void <clinit>()>
INTERFACE edge: $r1 = interfaceinvoke $r0.<android.support.v4.util.Pools$Pool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentInfo: com.facebook.litho.ComponentInfo$Builder create()> ==> <android.support.v4.util.Pools$Pool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentInfo$Builder: void <init>(com.facebook.litho.ComponentInfo$1)>(null) in <com.facebook.litho.ComponentInfo: com.facebook.litho.ComponentInfo$Builder create()> ==> <com.facebook.litho.ComponentInfo$Builder: void <init>(com.facebook.litho.ComponentInfo$1)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.ComponentInfo: boolean isSticky()> ==> <java.lang.Boolean: boolean booleanValue()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<java.lang.Integer: int intValue()>() in <com.facebook.litho.ComponentInfo: int getSpanSize()> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onContextDestroyed method not called for: ") in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r6) in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<android.os.Handler: void <init>(android.os.Looper)>($r4) in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()> ==> <android.os.Handler: void <init>(android.os.Looper)>
VIRTUAL edge: virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r5) in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void <init>(com.facebook.litho.ComponentsLifecycles$LeakDetector,android.content.Context)>(r0, r2) in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void <init>(com.facebook.litho.ComponentsLifecycles$LeakDetector,android.content.Context)>
EXECUTOR edge: virtualinvoke $r3.<android.os.Handler: boolean post(java.lang.Runnable)>($r5) in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentsLifecycles: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r11.<java.util.WeakHashMap: void <init>()>() in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.util.WeakHashMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentsLifecycles$LeakDetector: void <init>(android.content.Context)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector: void <init>(android.content.Context)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate onContextCreated call for: ") in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10) in <com.facebook.litho.ComponentsLifecycles: void onContextCreated(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
FINALIZE edge: null in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void <init>(android.content.Context)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector: void finalize()>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onContextDestroyed called without onContextCreated for: ") in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("onContextDestroyed called without onContextCreated for: ") in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9) in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.ComponentsLifecycles$LeakDetector: void clear()>() in <com.facebook.litho.ComponentsLifecycles: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector: void clear()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LithoViewTestHelper: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.LithoView: java.util.Deque findTestItems(java.lang.String)>(r1) in <com.facebook.litho.LithoViewTestHelper: com.facebook.litho.TestItem findTestItem(com.facebook.litho.LithoView,java.lang.String)> ==> <com.facebook.litho.LithoView: java.util.Deque findTestItems(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.facebook.litho.LithoViewTestHelper: com.facebook.litho.TestItem findTestItem(com.facebook.litho.LithoView,java.lang.String)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Deque: boolean isEmpty()>() in <com.facebook.litho.LithoViewTestHelper: com.facebook.litho.TestItem findTestItem(com.facebook.litho.LithoView,java.lang.String)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Deque: java.lang.Object getLast()>() in <com.facebook.litho.LithoViewTestHelper: com.facebook.litho.TestItem findTestItem(com.facebook.litho.LithoView,java.lang.String)> ==> <java.util.ArrayDeque: java.lang.Object getLast()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Deque: java.lang.Object getLast()>() in <com.facebook.litho.LithoViewTestHelper: com.facebook.litho.TestItem findTestItem(com.facebook.litho.LithoView,java.lang.String)> ==> <java.util.LinkedList: java.lang.Object getLast()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.LithoView: java.util.Deque findTestItems(java.lang.String)>(r1) in <com.facebook.litho.LithoViewTestHelper: java.util.Deque findTestItems(com.facebook.litho.LithoView,java.lang.String)> ==> <com.facebook.litho.LithoView: java.util.Deque findTestItems(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>(i0, i1) in <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: $r3 = virtualinvoke $r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r2) in <com.facebook.litho.RowReverse: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Output: void <init>()>() in <com.facebook.litho.StateValue: void <init>()> ==> <com.facebook.litho.Output: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.TestComponent: java.lang.String getSimpleName()> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.TestComponent: java.lang.String getSimpleName()> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.TestComponent: java.lang.String getSimpleName()> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.TestComponent: java.lang.String getSimpleName()> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.TestComponentContext: android.content.res.Resources getResources()>() in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.TestComponent: void <init>(com.facebook.litho.Component)>(r3) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponent: void <init>(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>($r4) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>($r4) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: void appendComponent(com.facebook.litho.Component)>
CLINIT edge: $r8 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r2) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r2) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
CLINIT edge: $r1 = <com.facebook.litho.TestComponent: com.facebook.litho.ComponentLifecycle TEST_LIFECYCLE> in <com.facebook.litho.TestComponent: void <init>(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponent: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.TestComponent: com.facebook.litho.ComponentLifecycle TEST_LIFECYCLE> in <com.facebook.litho.TestComponent: void <init>(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $z1 = <com.facebook.litho.config.ComponentsConfiguration: boolean isDebugModeEnabled> in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)>(r1) in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.utils.MeasureUtils: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected size spec mode") in <com.facebook.litho.utils.MeasureUtils: int getViewMeasureSpec(int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.DisplayListPrefetcher: boolean hasPrefetchItems()>() in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: boolean hasPrefetchItems()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListPrefetcher: void setHostingView(android.view.View)>(r1) in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: void setHostingView(android.view.View)>
EXECUTOR edge: virtualinvoke r1.<android.view.View: boolean post(java.lang.Runnable)>(r0) in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <com.facebook.litho.DisplayListPrefetcher: void run()>
VIRTUAL edge: virtualinvoke r1.<android.view.View: boolean post(java.lang.Runnable)>(r0) in <com.facebook.litho.utils.DisplayListPrefetcherUtils: void prefetchDisplayLists(android.view.View)> ==> <android.view.View: boolean post(java.lang.Runnable)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.utils.IncrementalMountUtils: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: i0 = virtualinvoke r0.<android.view.ViewGroup: int getWidth()>() in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.view.ViewGroup: int getHeight()>() in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $i3 = virtualinvoke r0.<android.view.ViewGroup: int getChildCount()>() in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <android.view.ViewGroup: int getChildCount()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.ViewGroup: android.view.View getChildAt(int)>(i2) in <com.facebook.litho.utils.IncrementalMountUtils: void performIncrementalMount(android.view.ViewGroup,boolean)> ==> <android.view.ViewGroup: android.view.View getChildAt(int)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.utils.IncrementalMountUtils$1: void <init>()>() in <com.facebook.litho.utils.IncrementalMountUtils: android.support.v7.widget.RecyclerView$OnScrollListener createRecyclerViewListener()> ==> <com.facebook.litho.utils.IncrementalMountUtils$1: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>(i0, i1) in <com.facebook.litho.Row: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext,int,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder incrementalMount(boolean)>(z0) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder incrementalMount(boolean)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder incrementalMount(boolean)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutDiffing(boolean)>(z0) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutDiffing(boolean)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutDiffing(boolean)>
SPECIAL edge: $r2 = specialinvoke r0.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutThreadLooper(android.os.Looper)>(r1) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutThreadLooper(android.os.Looper)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutThreadLooper(android.os.Looper)>
SPECIAL edge: $r2 = specialinvoke r0.<com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutLock(java.lang.Object)>(r1) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutLock(java.lang.Object)> ==> <com.facebook.litho.ComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutLock(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder,com.facebook.litho.TestComponentTree$1)>(r1, null) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree build()> ==> <com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder,com.facebook.litho.TestComponentTree$1)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree build()>() in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree build()> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree build()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutLock(java.lang.Object)>(r1) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutLock(java.lang.Object)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutLock(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutThreadLooper(android.os.Looper)>(r1) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutThreadLooper(android.os.Looper)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutThreadLooper(android.os.Looper)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutDiffing(boolean)>(z0) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree$Builder layoutDiffing(boolean)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder layoutDiffing(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder incrementalMount(boolean)>(z0) in <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.ComponentTree$Builder incrementalMount(boolean)> ==> <com.facebook.litho.TestComponentTree$Builder: com.facebook.litho.TestComponentTree$Builder incrementalMount(boolean)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.TestComponentTree$1)>(r1, r2, null) in <com.facebook.litho.TestComponentTree: com.facebook.litho.TestComponentTree$Builder create(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.TestComponentTree$1)>
SPECIAL edge: specialinvoke $r0.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.TestComponentTree: java.util.List getSubComponents()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState getMainThreadLayoutState()>() in <com.facebook.litho.TestComponentTree: java.util.List getSubComponents()> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState getMainThreadLayoutState()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.LayoutState: com.facebook.litho.DiffNode getDiffTree()>() in <com.facebook.litho.TestComponentTree: java.util.List getSubComponents()> ==> <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode getDiffTree()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)>(r2, r6) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r5) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent get(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: void <init>(com.facebook.litho.ViewCompatComponent)>(r1) in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: void <init>(com.facebook.litho.ViewCompatComponent)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.ViewCompatComponent$Builder: void <init>()>() in <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ViewCompatComponent$Builder create(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent$Builder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component$Builder: void <init>()>() in <com.facebook.litho.ViewCompatComponent$Builder: void <init>()> ==> <com.facebook.litho.Component$Builder: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component$Builder: void setKey(java.lang.String)>(r1) in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.ViewCompatComponent$Builder key(java.lang.String)> ==> <com.facebook.litho.Component$Builder: void setKey(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("To create a ViewCompatComponent you must provide a ViewBinder.") in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ViewCompatComponent$Builder: void release()>() in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component build()> ==> <com.facebook.litho.ViewCompatComponent$Builder: void release()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()>() in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()>() in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()>() in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()> ==> <com.facebook.litho.ViewCompatComponent: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool sBuilderPool> in <com.facebook.litho.ViewCompatComponent: android.support.v4.util.Pools$SynchronizedPool access$300()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.ViewCompatComponent$Builder key(java.lang.String)>(r1) in <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.Component$Builder key(java.lang.String)> ==> <com.facebook.litho.ViewCompatComponent$Builder: com.facebook.litho.ViewCompatComponent$Builder key(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.BuildConfig: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.ColorFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("ADD", 0) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("CLEAR", 1) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DARKEN", 2) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST", 3) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_ATOP", 4) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_IN", 5) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_OUT", 6) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("DST_OVER", 7) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r8.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("LIGHTEN", 8) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r9.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("MULTIPLY", 9) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r10.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("OVERLAY", 10) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r11.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SCREEN", 11) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r12.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC", 12) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r13.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_ATOP", 13) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r14.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_IN", 14) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r15.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_OUT", 15) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r16.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("SRC_OVER", 16) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r17.<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>("XOR", 17) in <android.graphics.PorterDuff$Mode: void <clinit>()> ==> <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Region: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.os.ParcelFileDescriptor: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ALPHA_8", 0) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ARGB_4444", 1) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("ARGB_8888", 2) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>("RGB_565", 3) in <android.graphics.Bitmap$Config: void <clinit>()> ==> <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Matrix: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("JPEG", 0) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("PNG", 1) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>("WEBP", 2) in <android.graphics.Bitmap$CompressFormat: void <clinit>()> ==> <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Paint: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("DIFFERENCE", 0) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("INTERSECT", 1) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("REPLACE", 2) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("REVERSE_DIFFERENCE", 3) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("UNION", 4) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.graphics.Region$Op: void <init>(java.lang.String,int)>("XOR", 5) in <android.graphics.Region$Op: void <clinit>()> ==> <android.graphics.Region$Op: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Path: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.DrawFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>("AA", 0) in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>("BW", 1) in <android.graphics.Canvas$EdgeType: void <clinit>()> ==> <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLES", 0) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLE_FAN", 1) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>("TRIANGLE_STRIP", 2) in <android.graphics.Canvas$VertexMode: void <clinit>()> ==> <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Picture: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("FILL", 0) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("FILL_AND_STROKE", 1) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Style: void <init>(java.lang.String,int)>("STROKE", 2) in <android.graphics.Paint$Style: void <clinit>()> ==> <android.graphics.Paint$Style: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("BUTT", 0) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("ROUND", 1) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Cap: void <init>(java.lang.String,int)>("SQUARE", 2) in <android.graphics.Paint$Cap: void <clinit>()> ==> <android.graphics.Paint$Cap: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("BEVEL", 0) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("MITER", 1) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Join: void <init>(java.lang.String,int)>("ROUND", 2) in <android.graphics.Paint$Join: void <clinit>()> ==> <android.graphics.Paint$Join: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Shader: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Xfermode: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.PathEffect: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.MaskFilter: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.Rasterizer: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("CENTER", 0) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("LEFT", 1) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Paint$Align: void <init>(java.lang.String,int)>("RIGHT", 2) in <android.graphics.Paint$Align: void <clinit>()> ==> <android.graphics.Paint$Align: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("CENTER", 0) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("END", 1) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("FILL", 2) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>("START", 3) in <android.graphics.Matrix$ScaleToFit: void <clinit>()> ==> <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("EVEN_ODD", 0) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("INVERSE_EVEN_ODD", 1) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("INVERSE_WINDING", 2) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.graphics.Path$FillType: void <init>(java.lang.String,int)>("WINDING", 3) in <android.graphics.Path$FillType: void <clinit>()> ==> <android.graphics.Path$FillType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Path$Direction: void <init>(java.lang.String,int)>("CCW", 0) in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Path$Direction: void <init>(java.lang.String,int)>("CW", 1) in <android.graphics.Path$Direction: void <clinit>()> ==> <android.graphics.Path$Direction: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("CLAMP", 0) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("MIRROR", 1) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>("REPEAT", 2) in <android.graphics.Shader$TileMode: void <clinit>()> ==> <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.animation.Animation: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("BIND_VIEW", 0) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("MOVE_FROM_ACTIVE_TO_SCRAP_HEAP", 1) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("MOVE_TO_SCRAP_HEAP", 2) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("NEW_VIEW", 3) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("RECYCLE_FROM_ACTIVE_HEAP", 4) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>("RECYCLE_FROM_SCRAP_HEAP", 5) in <android.view.ViewDebug$RecyclerTraceType: void <clinit>()> ==> <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("BUILD_CACHE", 0) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("DRAW", 1) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("INVALIDATE", 2) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("INVALIDATE_CHILD", 3) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("INVALIDATE_CHILD_IN_PARENT", 4) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("ON_LAYOUT", 5) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("ON_MEASURE", 6) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>("REQUEST_LAYOUT", 7) in <android.view.ViewDebug$HierarchyTraceType: void <clinit>()> ==> <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("LayoutState", 64, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("InternalNode", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("NodeInfo", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("ViewNodeInfo", 64, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("YogaNode", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("MountItem", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r7.<java.util.concurrent.ConcurrentHashMap: void <init>(int)>(4) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <java.util.concurrent.ConcurrentHashMap: void <init>(int)>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("LayoutOutput", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("VisibilityOutput", 64, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r10.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("VisibilityItem", 64, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r11.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("Output", 20, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r12.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("DiffNode", 256, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r13.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("Diff", 20, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r14.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("ComponentTree.Builder", 2, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r15.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("StateHandler", 10, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r16.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("MountItemScrapArray", 8, 0) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r17.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("TouchableScrapArray", 4, 0) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r18.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("RectF", 4, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r19.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("Rect", 30, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r20.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("Edges", 30, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r21.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("TransitionContext", 2, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r22.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("DisplayListDrawable", 10, 0) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r23.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("TreeProps", 10, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r24.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("ArraySet", 10, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r25.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("ArrayDeque", 10, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r26.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("LogEvent", 10, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r27.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("RenderState", 4, 1) in <com.facebook.litho.ComponentsPools: void <clinit>()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
SPECIAL edge: specialinvoke $r0.<android.graphics.RectF: void <init>()>() in <com.facebook.litho.BorderColorDrawable: void <clinit>()> ==> <android.graphics.RectF: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <java.util.concurrent.ConcurrentHashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <java.util.Hashtable: boolean containsKey(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <java.util.WeakHashMap: boolean containsKey(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The MountContentPools has a reference to an activitythat has just been created") in <com.facebook.litho.ComponentsPools: void onContextCreated(android.content.Context)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r1.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.HashMap: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.Hashtable: java.util.Set entrySet()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.util.Set entrySet()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.WeakHashMap: java.util.Set entrySet()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r5.<java.util.Iterator: void remove()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <android.text.TextUtils$SimpleStringSplitter: void remove()>
INTERFACE edge: interfaceinvoke r5.<java.util.Iterator: void remove()>() in <com.facebook.litho.ComponentsPools: void onContextDestroyed(android.content.Context)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: void remove()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.Edges: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.Edges acquireEdges()> ==> <com.facebook.litho.Edges: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.NoOpInternalNode: void <init>()>() in <com.facebook.litho.ComponentContext: void <clinit>()> ==> <com.facebook.litho.NoOpInternalNode: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.LayoutState$1: void <init>()>() in <com.facebook.litho.LayoutState: void <clinit>()> ==> <com.facebook.litho.LayoutState$1: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.LayoutState$2: void <init>()>() in <com.facebook.litho.LayoutState: void <clinit>()> ==> <com.facebook.litho.LayoutState$2: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isLayoutSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.facebook.litho.Component: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.MountItem: boolean isAccessible()>() in <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: boolean isAccessible()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>() in <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(i0) in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r5) in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHostUtils: java.util.List extractContent(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.facebook.litho.TextContent: java.util.List getTextItems()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <com.facebook.litho.TextContent$1: java.util.List getTextItems()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.facebook.litho.TextContent: java.util.List getTextItems()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <com.facebook.litho.ComponentHostUtils$1: java.util.List getTextItems()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentHostUtils$1: void <init>(java.util.List)>($r1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.TextContent extractTextContent(java.util.List)> ==> <com.facebook.litho.ComponentHostUtils$1: void <init>(java.util.List)>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: r6 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean addAll(java.util.Collection)>($r5) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.facebook.litho.ImageContent: java.util.List getImageItems()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <com.facebook.litho.ComponentHostUtils$2: java.util.List getImageItems()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<com.facebook.litho.ImageContent: java.util.List getImageItems()>() in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <com.facebook.litho.ImageContent$1: java.util.List getImageItems()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentHostUtils$2: void <init>(java.util.List)>($r1) in <com.facebook.litho.ComponentHostUtils: com.facebook.litho.ImageContent extractImageContent(java.util.List)> ==> <com.facebook.litho.ComponentHostUtils$2: void <init>(java.util.List)>
SPECIAL edge: specialinvoke $r10.<com.facebook.litho.InterceptTouchEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)> ==> <com.facebook.litho.InterceptTouchEvent: void <init>()>
INTERFACE edge: r5 = interfaceinvoke $r4.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r7 = interfaceinvoke r5.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r3, $r6) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnInterceptTouch(com.facebook.litho.EventHandler,android.view.MotionEvent)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void start(android.graphics.Canvas)>(r1) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$100(com.facebook.litho.ComponentHost$InterleavedDispatchDraw,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void start(android.graphics.Canvas)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>($r2) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void start(android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void end()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$400(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void end()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void access$300(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r11) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r11) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>($r4) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>($r2) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ComponentHost: android.support.v4.util.SparseArrayCompat access$500(com.facebook.litho.ComponentHost)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: boolean isRunning()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: boolean access$200(com.facebook.litho.ComponentHost$InterleavedDispatchDraw)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: boolean isRunning()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <java.lang.Class: java.lang.String getSimpleName()>
SPECIAL edge: specialinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>(com.facebook.litho.ComponentTree$1)>(null) in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>(com.facebook.litho.ComponentTree$1)>
SPECIAL edge: specialinvoke $r6.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.ComponentTree: void <clinit>()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree$Builder: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$Builder: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.StateHandler: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void <init>()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)>(r0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.StateHandler acquireStateHandler(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>("NONE", 0) in <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>("DRAWABLE", 1) in <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>("VIEW", 2) in <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.displaylist.DisplayListJB: void <init>(android.view.DisplayList)>(r1) in <com.facebook.litho.displaylist.DisplayListJB: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <init>(android.view.DisplayList)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.displaylist.DisplayListJBMR2: void <init>(android.view.DisplayList)>(r1) in <com.facebook.litho.displaylist.DisplayListJBMR2: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListJBMR2: void <init>(android.view.DisplayList)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.displaylist.DisplayListLollipop: void <init>(android.view.RenderNode)>(r1) in <com.facebook.litho.displaylist.DisplayListLollipop: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListLollipop: void <init>(android.view.RenderNode)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.displaylist.DisplayListMarshmallow: void <init>(android.view.RenderNode)>(r3) in <com.facebook.litho.displaylist.DisplayListMarshmallow: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <init>(android.view.RenderNode)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.displaylist.DisplayListNougat: void <init>(android.view.RenderNode)>(r3) in <com.facebook.litho.displaylist.DisplayListNougat: com.facebook.litho.displaylist.PlatformDisplayList createDisplayList(java.lang.String)> ==> <com.facebook.litho.displaylist.DisplayListNougat: void <init>(android.view.RenderNode)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentTree$Builder: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: void <init>()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.ComponentTree$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.ComponentTree$Builder acquireComponentTreeBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(10) in <com.facebook.litho.StateHandler: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(10) in <com.facebook.litho.StateHandler: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(10) in <com.facebook.litho.StateHandler: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(10) in <com.facebook.litho.StateHandler: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)>(r1, z0) in <com.facebook.litho.ComponentTree: void access$100(com.facebook.litho.ComponentTree,com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)>
CLINIT edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z7) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <java.lang.String: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)>(r36) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)>
STATIC edge: $z5 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>(r35, $i3, $i2) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z9) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <java.lang.String: java.lang.String valueOf(boolean)>
STATIC edge: $z8 = staticinvoke <com.facebook.litho.ThreadUtils: boolean isMainThread()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ThreadUtils: boolean isMainThread()>
STATIC edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z7) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <java.lang.String: java.lang.String valueOf(boolean)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)>(r36) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z5 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>(r35, $i3, $i2) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sStateHandlerPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: r6 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setNestedTree(com.facebook.litho.InternalNode)>(r6) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void setNestedTree(com.facebook.litho.InternalNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setNestedTree(com.facebook.litho.InternalNode)>(r6) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void setNestedTree(com.facebook.litho.InternalNode)>
VIRTUAL edge: $i6 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i6 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i7 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getLastHeightSpec()>
VIRTUAL edge: $i7 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getLastHeightSpec()>
VIRTUAL edge: $f4 = virtualinvoke r6.<com.facebook.litho.InternalNode: float getLastMeasuredWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredWidth()>
VIRTUAL edge: $f5 = virtualinvoke r6.<com.facebook.litho.InternalNode: float getLastMeasuredHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredHeight()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastWidthSpec(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastHeightSpec(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void setLastHeightSpec(int)>
VIRTUAL edge: $i2 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i2 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>($f0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastMeasuredHeight(float)>($f0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void setLastMeasuredHeight(float)>
VIRTUAL edge: $i3 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i3 = virtualinvoke r6.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>($f1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.InternalNode: void setLastMeasuredWidth(float)>($f1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: $z3 = virtualinvoke r2.<com.facebook.litho.Component: boolean hasCachedLayout()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.Component: boolean hasCachedLayout()>
VIRTUAL edge: r4 = virtualinvoke r2.<com.facebook.litho.Component: com.facebook.litho.InternalNode getCachedLayout()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.InternalNode getCachedLayout()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.Component: void clearCachedLayout()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.Component: void clearCachedLayout()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.Component: void releaseCachedLayout()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.Component: void releaseCachedLayout()>
VIRTUAL edge: $i4 = virtualinvoke r4.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i4 = virtualinvoke r4.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i5 = virtualinvoke r4.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: int getLastHeightSpec()>
VIRTUAL edge: $i5 = virtualinvoke r4.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: int getLastHeightSpec()>
VIRTUAL edge: $f2 = virtualinvoke r4.<com.facebook.litho.InternalNode: float getLastMeasuredWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredWidth()>
VIRTUAL edge: $f3 = virtualinvoke r4.<com.facebook.litho.InternalNode: float getLastMeasuredHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredHeight()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.Component: boolean hasCachedLayout()>() in <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean hasCachedLayout()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.DefaultComponentsSystrace: void <init>()>() in <com.facebook.litho.ComponentsSystrace: com.facebook.litho.ComponentsSystrace$Systrace getInstance()> ==> <com.facebook.litho.DefaultComponentsSystrace: void <init>()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.yoga.YogaMeasureMode: int ordinal()>() in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.yoga.YogaMeasureMode: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.yoga.YogaMeasureMode: int ordinal()>() in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.yoga.YogaMeasureMode: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.facebook.yoga.YogaMeasureMode: int ordinal()>() in <com.facebook.litho.SizeSpec$1: void <clinit>()> ==> <com.facebook.yoga.YogaMeasureMode: int ordinal()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher: void <clinit>()> ==> <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.DisplayListPrefetcher: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher: void <clinit>()> ==> <com.facebook.litho.DisplayListPrefetcher: void <init>()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(2) in <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void <init>()>() in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void <init>()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)>(r2, r3) in <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder newBuilder(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()>() in <com.facebook.litho.ComponentAccessibilityDelegate: com.facebook.litho.MountItem getAccessibleMountItem(android.view.View)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()>
SPECIAL edge: specialinvoke $r15.<com.facebook.litho.OnInitializeAccessibilityNodeInfoEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.OnInitializeAccessibilityNodeInfoEvent: void <init>()>
INTERFACE edge: r9 = interfaceinvoke $r8.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r7, $r10) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityNodeInfoEvent(com.facebook.litho.EventHandler,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<com.facebook.litho.OnInitializeAccessibilityEventEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.OnInitializeAccessibilityEventEvent: void <init>()>
INTERFACE edge: r9 = interfaceinvoke $r8.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r7, $r10) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInitializeAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<com.facebook.litho.SendAccessibilityEventEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.SendAccessibilityEventEvent: void <init>()>
INTERFACE edge: r8 = interfaceinvoke $r7.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r8.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r6, $r9) in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,int,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r15.<com.facebook.litho.SendAccessibilityEventUncheckedEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.SendAccessibilityEventUncheckedEvent: void <init>()>
INTERFACE edge: r9 = interfaceinvoke $r8.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r7, $r10) in <com.facebook.litho.EventDispatcherUtils: void dispatchSendAccessibilityEventUnchecked(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r16.<com.facebook.litho.DispatchPopulateAccessibilityEventEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.DispatchPopulateAccessibilityEventEvent: void <init>()>
INTERFACE edge: r9 = interfaceinvoke $r8.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r11 = interfaceinvoke r9.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r7, $r10) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r12.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchDispatchPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r15.<com.facebook.litho.OnPopulateAccessibilityEventEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.OnPopulateAccessibilityEventEvent: void <init>()>
INTERFACE edge: r9 = interfaceinvoke $r8.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r7, $r10) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnPopulateAccessibilityEvent(com.facebook.litho.EventHandler,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r19.<com.facebook.litho.OnRequestSendAccessibilityEventEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.OnRequestSendAccessibilityEventEvent: void <init>()>
INTERFACE edge: r11 = interfaceinvoke $r10.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r13 = interfaceinvoke r11.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r9, $r12) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r14.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnRequestSendAccessibilityEvent(com.facebook.litho.EventHandler,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent,android.support.v4.view.AccessibilityDelegateCompat)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r18.<com.facebook.litho.PerformAccessibilityActionEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.PerformAccessibilityActionEvent: void <init>()>
INTERFACE edge: r10 = interfaceinvoke $r9.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r12 = interfaceinvoke r10.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r8, $r11) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r13.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchPerformAccessibilityActionEvent(com.facebook.litho.EventHandler,android.view.View,int,android.os.Bundle,android.support.v4.view.AccessibilityDelegateCompat)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.ClickEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ClickEvent: void <init>()>
INTERFACE edge: r5 = interfaceinvoke $r4.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r3, $r6) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.facebook.litho.LongClickEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.LongClickEvent: void <init>()>
INTERFACE edge: r5 = interfaceinvoke $r4.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r7 = interfaceinvoke r5.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r3, $r6) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnLongClick(com.facebook.litho.EventHandler,android.view.View)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r13.<com.facebook.litho.TouchEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)> ==> <com.facebook.litho.TouchEvent: void <init>()>
INTERFACE edge: r7 = interfaceinvoke $r6.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: $r9 = interfaceinvoke r7.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r5, $r8) in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: z0 = virtualinvoke $r10.<java.lang.Boolean: boolean booleanValue()>() in <com.facebook.litho.EventDispatcherUtils: boolean dispatchOnTouch(com.facebook.litho.EventHandler,android.view.View,android.view.MotionEvent)> ==> <java.lang.Boolean: boolean booleanValue()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void <clinit>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.DebugComponent: void <init>()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.DebugComponent: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r0) in <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountDrawableSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke $r10.<com.facebook.yoga.YogaConfig: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)> ==> <com.facebook.yoga.YogaConfig: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r4.<com.facebook.yoga.YogaNode: void <init>(com.facebook.yoga.YogaConfig)>($r5) in <com.facebook.litho.ComponentsPools: com.facebook.yoga.YogaNode acquireYogaNode(com.facebook.litho.ComponentContext)> ==> <com.facebook.yoga.YogaNode: void <init>(com.facebook.yoga.YogaConfig)>
VIRTUAL edge: $r3 = virtualinvoke r0.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>(r1, r2) in <com.facebook.litho.displaylist.Utils: java.lang.Object safeInvoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> ==> <java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>($r4) in <com.facebook.litho.displaylist.Utils: java.lang.Object safeInvoke(java.lang.reflect.Method,java.lang.Object,java.lang.Object[])> ==> <com.facebook.litho.displaylist.DisplayListException: void <init>(java.lang.Exception)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.MountState: void <clinit>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()>() in <com.facebook.litho.ComponentTree: void access$1400(com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>($r7, i0, i1, i2) in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>($r7, i0, i1, i2) in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
SPECIAL edge: specialinvoke $r0.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("END", 0) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("MARQUEE", 1) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("MIDDLE", 2) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>("START", 3) in <android.text.TextUtils$TruncateAt: void <clinit>()> ==> <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$101(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: void access$201(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>(r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: void access$301(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: void access$401(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2, r3) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$501(com.facebook.litho.ComponentAccessibilityDelegate,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
SPECIAL edge: $z0 = specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>(r1, i0, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: boolean access$601(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int,android.os.Bundle)> ==> <android.support.v4.widget.ExploreByTouchHelper: boolean performAccessibilityAction(android.view.View,int,android.os.Bundle)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEvent(android.view.View,int)>(r1, i0) in <com.facebook.litho.ComponentAccessibilityDelegate: void access$701(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,int)> ==> <android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEvent(android.view.View,int)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>(r1, r2) in <com.facebook.litho.ComponentAccessibilityDelegate: void access$801(com.facebook.litho.ComponentAccessibilityDelegate,android.view.View,android.view.accessibility.AccessibilityEvent)> ==> <android.support.v4.widget.ExploreByTouchHelper: void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.MountItem: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.MountItem: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: void setLayoutDirection(com.facebook.yoga.YogaDirection)>($r1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.ViewNodeInfo: void setLayoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)>(r2, r3, r4, null, r0, null, 0, 0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireRootHostMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object)> ==> <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.HostComponent$State: void <init>()>() in <com.facebook.litho.HostComponent: com.facebook.litho.Component create()> ==> <com.facebook.litho.HostComponent$State: void <init>()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()>() in <com.facebook.litho.HostComponent$State: void <init>()> ==> <com.facebook.litho.HostComponent: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()>() in <com.facebook.litho.HostComponent$State: void <init>()> ==> <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()>() in <com.facebook.litho.HostComponent$State: void <init>()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent sInstance> in <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()> ==> <com.facebook.litho.HostComponent: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent sInstance> in <com.facebook.litho.HostComponent: com.facebook.litho.HostComponent access$000()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.util.concurrent.atomic.AtomicInteger: void <init>()>() in <com.facebook.litho.ComponentLifecycle: void <clinit>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ComponentLifecycle$1: void <init>()>() in <com.facebook.litho.ComponentLifecycle: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$1: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentLifecycle$2: void <init>()>() in <com.facebook.litho.ComponentLifecycle: void <clinit>()> ==> <com.facebook.litho.ComponentLifecycle$2: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.HostComponent: void <init>()>() in <com.facebook.litho.HostComponent: void <clinit>()> ==> <com.facebook.litho.HostComponent: void <init>()>
SPECIAL edge: specialinvoke $r0.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("CENTER", 0) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("CENTER_CROP", 1) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("CENTER_INSIDE", 2) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("FIT_CENTER", 3) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r4.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("FIT_END", 4) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r5.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("FIT_START", 5) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r6.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("FIT_XY", 6) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r7.<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>("MATRIX", 7) in <android.widget.ImageView$ScaleType: void <clinit>()> ==> <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.RectF: void setEmpty()>() in <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)> ==> <android.graphics.RectF: void setEmpty()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void releaseRectF(android.graphics.RectF)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.widget.ImageView$ScaleType: int ordinal()>() in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Only FIT_... values allowed") in <com.facebook.litho.DrawableMatrix: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<android.graphics.RectF: void <init>()>() in <com.facebook.litho.ComponentsPools: android.graphics.RectF acquireRectF()> ==> <android.graphics.RectF: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke $r7.<com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>(null) in <com.facebook.litho.animation.AnimatedProperties: void <clinit>()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r1, r2) in <com.facebook.litho.MountState: void access$1300(com.facebook.litho.MountState,com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r4, r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r4, r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sMountItemPool> in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetImportantForAccessibility(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetImportantForAccessibility(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)>(r3, r0) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)>
STATIC edge: $z4 = staticinvoke <com.facebook.litho.MountItem: boolean isViewLongClickable(int)>($i1) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: boolean isViewLongClickable(int)>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.MountItem: boolean isViewClickable(int)>($i0) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: boolean isViewClickable(int)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetContentDescription(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetContentDescription(android.view.View)>
STATIC edge: $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)>(r3, $r10) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewTag(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewTag(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetInterceptTouchEventHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetInterceptTouchEventHandler(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)>(r3, r0) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r11) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetViewTag(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetInterceptTouchEventHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)>(r3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MountState: void unsetViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MountState: void unsetViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>(r2, null) in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>(r2, null) in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>
STATIC edge: staticinvoke <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>($r4, $r5, r1) in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>(r0, null) in <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)> ==> <android.support.v4.view.ViewCompat: void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>(r0, 0) in <com.facebook.litho.MountState: void unsetImportantForAccessibility(android.view.View)> ==> <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountItem: boolean isViewFocusable(int)>($i0) in <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: boolean isViewFocusable(int)>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r0) in <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)> ==> <android.os.Build$VERSION: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.Surface: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void access$000(com.facebook.litho.animation.TransitionAnimationBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SimplePool: void <init>(int)>(20) in <com.facebook.litho.DataFlowTransitionManager: void <clinit>()> ==> <android.support.v4.util.Pools$SimplePool: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r1) in <com.facebook.litho.DataFlowTransitionManager: void access$600(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)>
SPECIAL edge: $r3 = specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode getOrCreateAnimatedPropertyNode(java.lang.String,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode access$800(com.facebook.litho.DataFlowTransitionManager,java.lang.String,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode getOrCreateAnimatedPropertyNode(java.lang.String,com.facebook.litho.animation.AnimatedProperty)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.graphics.SurfaceTexture: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: void removeOutput(com.facebook.litho.dataflow.ValueNode)>(r1) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.dataflow.ValueNode: void removeOutput(com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)>(r2) in <com.facebook.litho.dataflow.GraphBinding$Bindings: void unbindNodes(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)> ==> <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.ChoreographerCompat: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()>
CLINIT edge: $z0 = <com.facebook.litho.dataflow.ChoreographerCompat: boolean IS_JELLYBEAN_OR_HIGHER> in <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void <clinit>()>
STATIC edge: $r2 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>("ABSOLUTE", 0) in <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>("OFFSET", 1) in <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>("OFFSET_WIDTH_PERCENTAGE", 2) in <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>("OFFSET_HEIGHT_PERCENTAGE", 3) in <com.facebook.litho.animation.DimensionValue$Type: void <clinit>()> ==> <com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.litho.animation.DimensionValue$Type: int ordinal()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.litho.animation.DimensionValue$Type: int ordinal()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.facebook.litho.animation.DimensionValue$Type: int ordinal()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<com.facebook.litho.animation.DimensionValue$Type: int ordinal()>() in <com.facebook.litho.animation.DimensionValue$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.springs.SpringConfig: void <init>(double,double)>(230.2, 22.0) in <com.facebook.litho.dataflow.springs.SpringConfig: void <clinit>()> ==> <com.facebook.litho.dataflow.springs.SpringConfig: void <init>(double,double)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerTimingSource: void doFrame(long)>(l0) in <com.facebook.litho.dataflow.ChoreographerTimingSource: void access$000(com.facebook.litho.dataflow.ChoreographerTimingSource,long)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void doFrame(long)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.DimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.AppearingPositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.DisappearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.FloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.AppearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.DisappearingDimensionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.PositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.DisappearingPositionComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
INTERFACE edge: $r12 = interfaceinvoke $r11.<com.facebook.litho.animation.Animated$AnimationBuilder: com.facebook.litho.animation.AnimationBinding build()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <com.facebook.litho.animation.AppearingFloatComponentProperty$TransitionBuilder: com.facebook.litho.animation.AnimationBinding build()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Got unexpected object in animation var args: ") in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r7) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9) in <com.facebook.litho.animation.Animated: com.facebook.litho.animation.AnimationBinding[] createAnimationBindingsFromMixed(com.facebook.litho.animation.AnimationForVarArgs[])> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)>(r1) in <com.facebook.litho.animation.SequenceBinding: void access$000(com.facebook.litho.animation.SequenceBinding,com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()>() in <com.facebook.litho.animation.ParallelBinding: void access$200(com.facebook.litho.animation.ParallelBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)>(r1) in <com.facebook.litho.animation.ParallelBinding: void access$000(com.facebook.litho.animation.ParallelBinding,com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(2) in <com.facebook.litho.ComponentInfo: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.InternalNode: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.InternalNode: void <init>()>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.InternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)>($r1, r0, r2) in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.InternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.InternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)>($r1, r0, r2) in <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.NoOpInternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponent$1: void <init>()>() in <com.facebook.litho.TestComponent: void <clinit>()> ==> <com.facebook.litho.TestComponent$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Unexpected size spec mode") in <com.facebook.litho.utils.MeasureUtils: int getResultSizePxWithSpecAndDesiredPx(int,int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(10) in <com.facebook.litho.utils.IncrementalMountUtils: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
VIRTUAL edge: $z2 = virtualinvoke r2.<com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.facebook.litho.LithoView: android.graphics.Rect getPreviousMountBounds()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.LithoView: android.graphics.Rect getPreviousMountBounds()>
VIRTUAL edge: $i13 = virtualinvoke r2.<com.facebook.litho.LithoView: int getWidth()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.LithoView: android.graphics.Rect getPreviousMountBounds()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.LithoView: android.graphics.Rect getPreviousMountBounds()>
VIRTUAL edge: $i15 = virtualinvoke r2.<com.facebook.litho.LithoView: int getHeight()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>(r3) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>
VIRTUAL edge: $i16 = virtualinvoke r0.<android.view.View: int getHeight()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $f0 = virtualinvoke r0.<android.view.View: float getTranslationX()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: float getTranslationX()>
VIRTUAL edge: $f1 = virtualinvoke r0.<android.view.View: float getTranslationY()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: float getTranslationY()>
VIRTUAL edge: $i2 = virtualinvoke r0.<android.view.View: int getTop()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i4 = virtualinvoke r0.<android.view.View: int getBottom()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $i6 = virtualinvoke r0.<android.view.View: int getLeft()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i8 = virtualinvoke r0.<android.view.View: int getRight()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i17 = virtualinvoke $r8.<android.view.View: int getHeight()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.view.View: int getHeight()>
SPECIAL edge: specialinvoke $r6.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ViewDiagnosticsWrapper must be the same height as the underlying view") in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i12 = virtualinvoke $r4.<android.graphics.Rect: int width()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i14 = virtualinvoke $r5.<android.graphics.Rect: int height()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>($i19, $i21, $i23, $i25) in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: $z3 = virtualinvoke r3.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.utils.IncrementalMountUtils: void maybePerformIncrementalMountOnView(int,int,android.view.View)> ==> <android.graphics.Rect: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.DiffNode: int getChildCount()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.DiffNode: int getChildCount()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.DiffNode: java.util.List getChildren()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.DiffNode: java.util.List getChildren()>
VIRTUAL edge: $r8 = virtualinvoke r9.<com.facebook.litho.TestComponent: com.facebook.litho.Component getWrappedComponent()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.TestComponent: com.facebook.litho.Component getWrappedComponent()>
INTERFACE edge: interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r4.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r10 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r2 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r2 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.TestComponentTree: void extractSubComponents(com.facebook.litho.DiffNode,java.util.List)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(2) in <com.facebook.litho.ViewCompatComponent: void <clinit>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke $r1.<java.util.HashMap: void <init>()>() in <com.facebook.litho.ViewCompatComponent: void <clinit>()> ==> <java.util.HashMap: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ViewCompatComponent$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r1, r2) in <com.facebook.litho.ViewCompatComponent$Builder: void access$000(com.facebook.litho.ViewCompatComponent$Builder,com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)> ==> <com.facebook.litho.ViewCompatComponent$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.ViewCompatComponent: java.lang.String getSimpleName()>() in <com.facebook.litho.ViewCompatComponent: java.lang.String access$200(com.facebook.litho.ViewCompatComponent)> ==> <com.facebook.litho.ViewCompatComponent: java.lang.String getSimpleName()>
VIRTUAL edge: r3 = virtualinvoke $r1.<android.content.ContextWrapper: android.content.Context getBaseContext()>() in <com.facebook.litho.ComponentsPools: boolean isContextWrapper(android.content.Context,android.content.Context)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
VIRTUAL edge: z0 = virtualinvoke $r1.<java.lang.String: boolean equals(java.lang.Object)>($r0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: r11 = virtualinvoke r11.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>
VIRTUAL edge: r11 = virtualinvoke r11.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>($r10) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>(null) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
VIRTUAL edge: i0 = virtualinvoke r11.<com.facebook.litho.ComponentContext: int getWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: int getWidthSpec()>
VIRTUAL edge: i1 = virtualinvoke r11.<com.facebook.litho.ComponentContext: int getHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: int getHeightSpec()>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setWidthSpec(int)>(i2) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setWidthSpec(int)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setHeightSpec(int)>(i3) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setHeightSpec(int)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>(null) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setWidthSpec(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setWidthSpec(int)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentContext: void setHeightSpec(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void setHeightSpec(int)>
VIRTUAL edge: $r10 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.TreeProps getPendingTreeProps()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.TreeProps getPendingTreeProps()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)>(r4) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)>(r4) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void copyInto(com.facebook.litho.InternalNode)>
VIRTUAL edge: r12 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getStyleDirection()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getStyleDirection()>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r8) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r8) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
CLINIT edge: $r0 = new com.facebook.litho.ComponentContext in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TextContent$1: void <init>()>() in <com.facebook.litho.TextContent: void <clinit>()> ==> <com.facebook.litho.TextContent$1: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ImageContent$1: void <init>()>() in <com.facebook.litho.ImageContent: void <clinit>()> ==> <com.facebook.litho.ImageContent$1: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentHost: android.content.res.Resources getResources()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: android.content.res.Resources getResources()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i7) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
SPECIAL edge: specialinvoke $r23.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r19.<android.graphics.Paint: void <init>()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void <init>()>
VIRTUAL edge: virtualinvoke $r21.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r20) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
VIRTUAL edge: virtualinvoke $r22.<android.graphics.Paint: void setStrokeWidth(float)>($f1) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setStrokeWidth(float)>
SPECIAL edge: specialinvoke $r15.<android.graphics.Paint: void <init>()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void <init>()>
VIRTUAL edge: virtualinvoke $r17.<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>($r16) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
VIRTUAL edge: virtualinvoke $r18.<android.graphics.Paint: void setStrokeWidth(float)>($f0) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setStrokeWidth(float)>
VIRTUAL edge: r6 = virtualinvoke r5.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r7 = virtualinvoke r5.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i1 = virtualinvoke r24.<android.view.View: int getLeft()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i2 = virtualinvoke r24.<android.view.View: int getTop()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i3 = virtualinvoke r24.<android.view.View: int getRight()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i4 = virtualinvoke r24.<android.view.View: int getBottom()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $r10 = virtualinvoke r25.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.Rect: void set(android.graphics.Rect)>($r10) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r26.<android.graphics.Paint: void setColor(int)>($i8) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setColor(int)>
VIRTUAL edge: virtualinvoke $r29.<android.graphics.Paint: void setColor(int)>($i9) in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setColor(int)>
VIRTUAL edge: $f2 = virtualinvoke $r32.<android.graphics.Paint: float getStrokeWidth()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: float getStrokeWidth()>
VIRTUAL edge: $i11 = virtualinvoke $r33.<android.graphics.Rect: int width()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i12 = virtualinvoke $r34.<android.graphics.Rect: int height()>() in <com.facebook.litho.DebugDraw: void highlightMountBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Rect: int height()>
SPECIAL edge: specialinvoke $r13.<android.graphics.Paint: void <init>()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void <init>()>
VIRTUAL edge: virtualinvoke $r14.<android.graphics.Paint: void setColor(int)>(1724029951) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setColor(int)>
SPECIAL edge: specialinvoke $r11.<android.graphics.Paint: void <init>()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void <init>()>
VIRTUAL edge: virtualinvoke $r12.<android.graphics.Paint: void setColor(int)>(1154744270) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Paint: void setColor(int)>
VIRTUAL edge: $i5 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getWidth()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i6 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getHeight()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r5 = virtualinvoke r2.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i7) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
VIRTUAL edge: r15 = virtualinvoke r2.<com.facebook.litho.ComponentHost: com.facebook.litho.TouchExpansionDelegate getTouchExpansionDelegate()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.TouchExpansionDelegate getTouchExpansionDelegate()>
VIRTUAL edge: virtualinvoke r3.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>(0.0F, 0.0F, $f4, $f5, $r10) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
VIRTUAL edge: virtualinvoke r3.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f0, $f1, $f2, $f3, $r9) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
VIRTUAL edge: r6 = virtualinvoke r5.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i1 = virtualinvoke r8.<android.view.View: int getLeft()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i2 = virtualinvoke r8.<android.view.View: int getTop()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i3 = virtualinvoke r8.<android.view.View: int getRight()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i4 = virtualinvoke r8.<android.view.View: int getBottom()>() in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: virtualinvoke r15.<com.facebook.litho.TouchExpansionDelegate: void draw(android.graphics.Canvas,android.graphics.Paint)>(r3, $r4) in <com.facebook.litho.DebugDraw: void highlightInteractiveBounds(com.facebook.litho.ComponentHost,android.graphics.Canvas)> ==> <com.facebook.litho.TouchExpansionDelegate: void draw(android.graphics.Canvas,android.graphics.Paint)>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.graphics.Rect access$000(com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate)>($r5) in <com.facebook.litho.TouchExpansionDelegate: void draw(android.graphics.Canvas,android.graphics.Paint)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.graphics.Rect access$000(com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate)>($r5) in <com.facebook.litho.TouchExpansionDelegate: void draw(android.graphics.Canvas,android.graphics.Paint)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.graphics.Rect access$000(com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate)>
CLINIT edge: <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.support.v4.util.Pools$SimplePool sPool> = $r0 in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r0) in <com.facebook.litho.displaylist.DisplayListJB: android.view.DisplayList instantiateDisplayList(java.lang.String)> ==> <java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("start", $r1) in <com.facebook.litho.displaylist.DisplayListMarshmallow: void ensureInitialized()> ==> <java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You should not set ") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r1) in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" to a root layout in ") in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r8) in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r10) in <com.facebook.litho.InternalNode: void assertContextSpecificStyleNotSet(com.facebook.litho.InternalNode)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>() in <com.facebook.litho.InternalNode: boolean hasValidLayoutDirectionInNestedTree(com.facebook.litho.InternalNode,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>() in <com.facebook.litho.InternalNode: boolean hasValidLayoutDirectionInNestedTree(com.facebook.litho.InternalNode,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("Cannot release a null node tree") in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasNewLayout()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: boolean hasNewLayout()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void markLayoutSeen()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: void markLayoutSeen()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode removeChildAt(int)>(i1) in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode removeChildAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasNestedTree()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: boolean hasNestedTree()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: boolean canMeasure()>() in <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMeasure()>
VIRTUAL edge: $z1 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: boolean canMeasure()>() in <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent: boolean canMeasure()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTreeHolder()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTreeHolder()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getChildIndex(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.InternalNode: int getChildIndex(com.facebook.litho.InternalNode)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".nested") in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r14 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r14) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("(") in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(")") in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: java.lang.String createKey(com.facebook.litho.InternalNode,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(1) in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The ViewNodeInfo reference acquired from the pool  wasn\'t correctly released.") in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<android.widget.ImageView$ScaleType: int ordinal()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<android.widget.ImageView$ScaleType: int ordinal()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<android.widget.ImageView$ScaleType: int ordinal()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<android.widget.ImageView$ScaleType: int ordinal()>() in <com.facebook.litho.DrawableMatrix$1: void <clinit>()> ==> <java.lang.Enum: int ordinal()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()>() in <com.facebook.litho.DataFlowTransitionManager: void releaseAnimationState(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager$AnimationState: void reset()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Animating \'") in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: java.lang.String getName()>
INTERFACE edge: $r6 = interfaceinvoke r5.<com.facebook.litho.animation.AnimatedProperty: java.lang.String getName()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: java.lang.String getName()>
VIRTUAL edge: $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\' is only supported on Views") in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r9) in <com.facebook.litho.animation.AnimatedProperties: android.view.View assertIsView(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<java.lang.RuntimeException: void <init>(java.lang.String)>("Got unexpected null parent") in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $f2 = virtualinvoke r10.<android.view.View: float getX()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <android.view.View: float getX()>
VIRTUAL edge: $f2 = virtualinvoke r10.<android.view.View: float getY()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <android.view.View: float getY()>
VIRTUAL edge: $r2 = virtualinvoke r10.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $r6 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <android.view.View: android.view.ViewParent getParent()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Expected parent to be View, was ") in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r8) in <com.facebook.litho.animation.AnimatedProperties: float getPositionRelativeToLithoView(android.view.View,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.utils.IncrementalMountUtils: void release(android.graphics.Rect)> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r2.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.utils.IncrementalMountUtils: android.graphics.Rect acquireRect()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $f0 = virtualinvoke r0.<com.facebook.litho.InternalNode: float getStyleWidth()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: float getStyleWidth()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)>(i0) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)>(i0) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void setStyleWidthFromSpec(int)>
VIRTUAL edge: $f1 = virtualinvoke r0.<com.facebook.litho.InternalNode: float getStyleHeight()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: float getStyleHeight()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)>(i2) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)>(i2) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void setStyleHeightFromSpec(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void calculateLayout(float,float)>($f4, $f5) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void calculateLayout(float,float)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("measureTree:") in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: r9 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: $r10 = virtualinvoke r1.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: virtualinvoke r14.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r10) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r13.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("tree_diff_enabled", $r12) in <com.facebook.litho.LayoutState: void measureTree(com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleWidthFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i0) in <com.facebook.litho.InternalNode: void setStyleHeightFromSpec(int)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean isDebugModeEnabled> in <com.facebook.litho.InternalNode: void calculateLayout(float,float)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.InternalNode: void calculateLayout(float,float)> ==> <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>
CLINIT edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.InternalNode: void calculateLayout(float,float)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r0, 0) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>($r2) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>
STATIC edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>($r3) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>(r0, 0) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.DebugComponent getInstance(com.facebook.litho.InternalNode,int)>
CLINIT edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>($r2) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)>($r3) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<android.content.Context: android.content.pm.ApplicationInfo getApplicationInfo()>() in <com.facebook.litho.LayoutState: boolean isLayoutDirectionRTL(android.content.Context)> ==> <android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r6) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("component", $r7) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r7 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)>(r0, r2, 1) in <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createTree(com.facebook.litho.Component,com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)>($r7) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)>
STATIC edge: $z5 = staticinvoke <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.Component: boolean isLayoutSpecWithSizeSpec(com.facebook.litho.Component)>
STATIC edge: r20 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r1, $r12) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r19) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.Component: boolean isNestedTree(com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)>($r7) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r8 = <com.facebook.litho.ComponentLifecycle: com.facebook.yoga.YogaBaselineFunction sBaselineFunction> in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $r10 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: r20 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.InternalNode acquireInternalNode(com.facebook.litho.ComponentContext,android.content.res.Resources)>(r1, $r12) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r19) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType NONE> in <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <com.facebook.litho.DebugDraw: int dipToPixels(android.content.res.Resources,int)> ==> <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $f0 = virtualinvoke r0.<android.graphics.Paint: float getStrokeWidth()>() in <com.facebook.litho.DebugDraw: void drawMountBoundsBorder(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect)> ==> <android.graphics.Paint: float getStrokeWidth()>
VIRTUAL edge: virtualinvoke r1.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f4, $f3, $f2, $f1, r0) in <com.facebook.litho.DebugDraw: void drawMountBoundsBorder(android.graphics.Canvas,android.graphics.Paint,android.graphics.Rect)> ==> <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.DebugDraw: boolean shouldHighlight(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r1) in <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()> ==> <java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>
VIRTUAL edge: virtualinvoke $r4.<java.lang.reflect.Constructor: void setAccessible(boolean)>(1) in <com.facebook.litho.displaylist.DisplayListJB: void ensureInitialized()> ==> <java.lang.reflect.AccessibleObject: void setAccessible(boolean)>
SPECIAL edge: specialinvoke $r3.<java.util.LinkedList: void <init>()>() in <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r0) in <com.facebook.litho.InternalNode: java.util.List addOrCreateList(java.util.List,java.lang.Object)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)>($r5) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)>($r14) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TreeProps)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>($r15) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>($r16) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>($r17) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)>($r5) in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.yoga.YogaNode)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sEdgesPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ViewNodeInfo: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.ViewNodeInfo acquireViewNodeInfo()> ==> <com.facebook.litho.ViewNodeInfo: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>() in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>(r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>(r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void setDiffNode(com.facebook.litho.DiffNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>(r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setDiffNode(com.facebook.litho.DiffNode)>(r3) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void setDiffNode(com.facebook.litho.DiffNode)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i2) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: i1 = virtualinvoke r3.<com.facebook.litho.DiffNode: int getChildCount()>() in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: int getChildCount()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.DiffNode getChildAt(int)>(i2) in <com.facebook.litho.LayoutState: boolean applyDiffNodeToUnchangedNodes(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.DiffNode getChildAt(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.content.Context: android.content.res.Resources getResources()>() in <com.facebook.litho.LayoutState: int getLayoutDirection(android.content.Context)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <com.facebook.litho.LayoutState: int getLayoutDirection(android.content.Context)> ==> <android.content.res.Resources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.ComponentHost: com.facebook.litho.ComponentTouchListener getComponentTouchListener()>() in <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentTouchListener getComponentTouchListener()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)> ==> <android.view.View: java.lang.Object getTag(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.ComponentHost: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener()>() in <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)> ==> <android.view.View: java.lang.Object getTag(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.ComponentHost: com.facebook.litho.ComponentClickListener getComponentClickListener()>() in <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentClickListener getComponentClickListener()>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)> ==> <android.view.View: java.lang.Object getTag(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i0) in <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)> ==> <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setCachedMeasuresValid(boolean)>(1) in <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void setCachedMeasuresValid(boolean)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void setCachedMeasuresValid(boolean)>(1) in <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: void setCachedMeasuresValid(boolean)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.Component: void copyInterStageImpl(com.facebook.litho.Component)>($r3) in <com.facebook.litho.LayoutState: void applyDiffNodeToLayoutNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: void copyInterStageImpl(com.facebook.litho.Component)>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>(r2, $r4) in <com.facebook.litho.LayoutState: boolean shouldComponentUpdate(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: boolean hostIsCompatible(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.Component getComponent()>
VIRTUAL edge: virtualinvoke r0.<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>($f3, $f2, $f1, $f0, r1) in <com.facebook.litho.DebugDraw: void drawCornerLine(android.graphics.Canvas,android.graphics.Paint,int,int,int,int)> ==> <android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<java.lang.Object: boolean equals(java.lang.Object)>($r5) in <com.facebook.litho.LayoutState: boolean isSameComponentType(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Object: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: java.lang.Object clone()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.InputEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.InputEvent: void <init>()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <android.view.AbsSavedState: void <init>(android.os.Parcel)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.AbsSavedState: void <init>(android.os.Parcel)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LogEvent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.LogEvent: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <com.facebook.litho.DisplayListDrawable: void <init>(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>(r1, r2) in <com.facebook.litho.DisplayListDrawable: void <init>(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke $r4.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: virtualinvoke r2.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r0) in <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DisplayListDrawable: void invalidateSelf()>() in <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)> ==> <android.graphics.drawable.Drawable: void invalidateSelf()>
SPECIAL edge: specialinvoke r0.<android.graphics.drawable.Drawable: void <init>()>() in <com.facebook.litho.BorderColorDrawable: void <init>()> ==> <android.graphics.drawable.Drawable: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Paint: void <init>()>() in <com.facebook.litho.BorderColorDrawable: void <init>()> ==> <android.graphics.Paint: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.RenderState: void reset()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: $r19 = virtualinvoke $r17.<com.facebook.litho.ComponentContext: android.content.Context getBaseContext()>() in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
SPECIAL edge: specialinvoke r0.<android.content.ContextWrapper: void <init>(android.content.Context)>($r19) in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <android.content.ContextWrapper: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("When a ComponentsLogger is set, a LogTag must be set") in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<android.content.Context: android.content.res.Resources getResources()>() in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<android.content.res.Resources: android.content.res.Configuration getConfiguration()>() in <com.facebook.litho.ComponentContext: void <init>(android.content.Context,java.lang.String,com.facebook.litho.ComponentsLogger,com.facebook.litho.StateHandler)> ==> <android.content.res.Resources: android.content.res.Configuration getConfiguration()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>(r2) in <com.facebook.litho.ResourceCache: com.facebook.litho.ResourceCache getLatest(android.content.res.Configuration)> ==> <android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ResourceCache: void <init>(android.content.res.Configuration)>(r2) in <com.facebook.litho.ResourceCache: com.facebook.litho.ResourceCache getLatest(android.content.res.Configuration)> ==> <com.facebook.litho.ResourceCache: void <init>(android.content.res.Configuration)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Updating the state of a component during ") in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" leads to unexpected behaviour, consider using lazy state updates.") in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r8) in <com.facebook.litho.ComponentContext: void checkIfNoStateUpdatesMethod()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)>(r1, r2, 0) in <com.facebook.litho.ComponentTree: void updateState(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Triggering async state updates on this component tree is disabled, use sync state updates.") in <com.facebook.litho.ComponentTree: void updateStateAsync(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)>(r1, r2, 1) in <com.facebook.litho.ComponentTree: void updateStateAsync(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>(r2, r3) in <com.facebook.litho.ComponentTree: void updateStateLazy(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>
CLINIT edge: r7 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList()>() in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList()>() in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>(null) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>(null) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList()> ==> <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>
CLINIT edge: $r0 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sStateUpdatesListPool> in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
VIRTUAL edge: r4 = virtualinvoke $r3.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)> ==> <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)>
VIRTUAL edge: i3 = virtualinvoke r4.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(0, $i2) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ResourceCache: java.lang.Object get(int)>(i0) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <com.facebook.litho.ResourceCache: java.lang.Object get(int)>
VIRTUAL edge: $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>() in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: i1 = virtualinvoke $r4.<android.content.res.Resources: int getDimensionPixelOffset(int)>(i0) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <android.content.res.Resources: int getDimensionPixelOffset(int)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>(i0, $r6) in <com.facebook.litho.ResourceResolver: int resolveDimenOffsetRes(int)> ==> <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ResourceCache: java.lang.Object get(int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ResourceCache: java.lang.Object get(int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) in <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.ResourceResolver: int dipsToPixels(float)>($f0) in <com.facebook.litho.ResourceResolver: int dipsToPixels(int)> ==> <com.facebook.litho.ResourceResolver: int dipsToPixels(float)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ResourceCache: java.lang.Object get(int)>(i0) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <com.facebook.litho.ResourceCache: java.lang.Object get(int)>
VIRTUAL edge: $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>() in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: i1 = virtualinvoke $r4.<android.content.res.Resources: int getDimensionPixelSize(int)>(i0) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <android.content.res.Resources: int getDimensionPixelSize(int)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>(i0, $r6) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)> ==> <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>
VIRTUAL edge: r4 = virtualinvoke $r3.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)> ==> <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>(i1) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)> ==> <com.facebook.litho.ResourceResolver: int resolveDimenSizeRes(int)>
VIRTUAL edge: i3 = virtualinvoke r4.<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>(0, $i2) in <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)> ==> <android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveDimenSizeAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r5) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.DisplayListDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r5) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.MatrixDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r5) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>(r5) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r7, $i0) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r7, $i0) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r9, $i1) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r9, $i1) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r11, $i2) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r11, $i2) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r13, $i3) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r13, $i3) in <com.facebook.litho.InternalNode: void setPaddingFromDrawableReference(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: r4 = virtualinvoke $r3.<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>($r2) in <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)> ==> <android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
VIRTUAL edge: i2 = virtualinvoke r4.<android.content.res.TypedArray: int getResourceId(int,int)>(0, i1) in <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)> ==> <android.content.res.TypedArray: int getResourceId(int,int)>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: virtualinvoke r4.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ResourceResolver: int resolveResIdAttr(int,int)> ==> <android.content.res.TypedArray: void recycle()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>(1) in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndSet(int)>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The NodeInfo reference acquired from the pool  wasn\'t correctly released.") in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquire()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.NodeInfo: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.NodeInfo acquireNodeInfo()> ==> <com.facebook.litho.NodeInfo: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.ComponentHost: int getChildCount()>() in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <android.view.ViewGroup: int getChildCount()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentHost: android.view.View getChildAt(int)>(i2) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <android.view.ViewGroup: android.view.View getChildAt(int)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>(z0) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>
VIRTUAL edge: $r2 = virtualinvoke r1.<android.view.View: java.lang.Object getTag(int)>($i1) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <android.view.View: java.lang.Object getTag(int)>
VIRTUAL edge: $r2 = virtualinvoke r1.<android.view.View: java.lang.Object getTag(int)>($i1) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)>(r1, r3) in <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost)>(r1) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost$1)> ==> <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)>(r1, null) in <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View)> ==> <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r5 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: int getFlags()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.ComponentHost: void mountDrawable(int,com.facebook.litho.MountItem,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setDuplicateParentStateEnabled(boolean)>($z0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: void setDuplicateParentStateEnabled(boolean)>
VIRTUAL edge: $r4 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setVisibility(int)>(0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.widget.ImageView: void setVisibility(int)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setVisibility(int)>(0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: void setVisibility(int)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setVisibility(int)>(0) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <com.facebook.litho.ComponentHost: void setVisibility(int)>
VIRTUAL edge: r5 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>() in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>(r6) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
VIRTUAL edge: $r3 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>() in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
VIRTUAL edge: $r2 = virtualinvoke r0.<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>() in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
VIRTUAL edge: r6 = virtualinvoke r1.<com.facebook.litho.ComponentHost: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>() in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentHost: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>(r0, -1, $r3, 1) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentHost: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>(r0, -1, $r2) in <com.facebook.litho.ComponentHost: void mountView(android.view.View,int)> ==> <android.view.ViewGroup: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>() in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.TouchExpansionDelegate: void <init>(com.facebook.litho.ComponentHost)>(r3) in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.TouchExpansionDelegate: void <init>(com.facebook.litho.ComponentHost)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentHost: void setTouchDelegate(android.view.TouchDelegate)>($r9) in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.TouchExpansionDelegate: void registerTouchExpansion(int,android.view.View,android.graphics.Rect)>(i0, $r7, r2) in <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.TouchExpansionDelegate: void registerTouchExpansion(int,android.view.View,android.graphics.Rect)>
CLINIT edge: $r2 = <com.facebook.litho.TouchExpansionDelegate: android.graphics.Rect IGNORED_RECT> in <com.facebook.litho.TouchExpansionDelegate: void <init>(com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)>(r1, r2) in <com.facebook.litho.TouchExpansionDelegate: void registerTouchExpansion(int,android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)>(r1, r2) in <com.facebook.litho.TouchExpansionDelegate: void registerTouchExpansion(int,android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)>
CLINIT edge: $r0 = <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.support.v4.util.Pools$SimplePool sPool> in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke r1.<android.view.View: int getVisibility()>() in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <android.view.View: int getVisibility()>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void invalidate(android.graphics.Rect)>(r3) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <android.view.View: void invalidate(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void invalidate(android.graphics.Rect)>(r3) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.ComponentHost: void invalidate(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.DisplayListDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.MatrixDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.drawable.Drawable: boolean setVisible(boolean,boolean)>($z1, 0) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.InsetDrawable: boolean setVisible(boolean,boolean)>
VIRTUAL edge: virtualinvoke r0.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(r1) in <com.facebook.litho.ComponentHostUtils: void mountDrawable(android.view.View,android.graphics.drawable.Drawable,android.graphics.Rect,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
SPECIAL edge: specialinvoke $r0.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate: void <clinit>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.Pools$SimplePool: void <init>(int)>(4) in <com.facebook.litho.TouchExpansionDelegate: void <clinit>()> ==> <android.support.v4.util.Pools$SimplePool: void <init>(int)>
VIRTUAL edge: $z4 = virtualinvoke r0.<com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>
VIRTUAL edge: $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.DisplayListDrawable: boolean isStateful()>
VIRTUAL edge: $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.MatrixDrawable: boolean isStateful()>
VIRTUAL edge: $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.Drawable: boolean isStateful()>
VIRTUAL edge: $z2 = virtualinvoke r1.<android.graphics.drawable.Drawable: boolean isStateful()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.InsetDrawable: boolean isStateful()>
VIRTUAL edge: virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3) in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3) in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r1.<android.graphics.drawable.Drawable: boolean setState(int[])>($r3) in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.view.View: int[] getDrawableState()>() in <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)> ==> <android.view.View: int[] getDrawableState()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: virtualinvoke r4.<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>(null) in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
VIRTUAL edge: $r13 = virtualinvoke r4.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.ComponentHost: void invalidate(android.graphics.Rect)>($r13) in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void invalidate(android.graphics.Rect)>
SPECIAL edge: specialinvoke r5.<com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>() in <com.facebook.litho.ComponentHost: void unmountDrawable(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setVisibility(int)>(8) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <android.widget.ImageView: void setVisibility(int)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setVisibility(int)>(8) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <android.view.View: void setVisibility(int)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setVisibility(int)>(8) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <com.facebook.litho.ComponentHost: void setVisibility(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void invalidate()>() in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <com.facebook.litho.ComponentHost: void invalidate()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void removeViewInLayout(android.view.View)>(r1) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <android.view.ViewGroup: void removeViewInLayout(android.view.View)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void removeView(android.view.View)>(r1) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <android.view.ViewGroup: void removeView(android.view.View)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.ComponentHost: void unmountView(android.view.View)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>() in <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.TouchExpansionDelegate: void unregisterTouchExpansion(int)>(i0) in <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.TouchExpansionDelegate: void unregisterTouchExpansion(int)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void releaseScrapMountItemsArray(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: $z2 = specialinvoke r0.<com.facebook.litho.ComponentHost: boolean implementsVirtualViews()>() in <com.facebook.litho.ComponentHost: void invalidateAccessibilityState()> ==> <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()>() in <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.facebook.litho.ComponentLifecycle: boolean implementsExtraAccessibilityNodes()>() in <com.facebook.litho.ComponentHost: boolean implementsVirtualViews()> ==> <com.facebook.litho.ComponentLifecycle: boolean implementsExtraAccessibilityNodes()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean dispatchHoverEvent(android.view.MotionEvent)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: void dispatchDraw(android.graphics.Canvas)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r2.<com.facebook.litho.ComponentTree: boolean isMounting()>() in <com.facebook.litho.LithoView: boolean shouldRequestLayout()> ==> <com.facebook.litho.ComponentTree: boolean isMounting()>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentHost: boolean shouldRequestLayout()>() in <com.facebook.litho.LithoView: boolean shouldRequestLayout()> ==> <com.facebook.litho.ComponentHost: boolean shouldRequestLayout()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper)>(r1) in <com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper,com.facebook.litho.ComponentTree$1)> ==> <com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ComponentTree$1: void <init>(com.facebook.litho.ComponentTree)>(r0) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$1: void <init>(com.facebook.litho.ComponentTree)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentTree$2: void <init>(com.facebook.litho.ComponentTree)>(r0) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$2: void <init>(com.facebook.litho.ComponentTree)>
SPECIAL edge: specialinvoke $r14.<com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper,com.facebook.litho.ComponentTree$1)>($r15, null) in <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper,com.facebook.litho.ComponentTree$1)>
SPECIAL edge: specialinvoke $r2.<android.os.HandlerThread: void <init>(java.lang.String,int)>("ComponentLayoutThread", 10) in <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()> ==> <android.os.HandlerThread: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r2.<android.os.HandlerThread: void start()>() in <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()> ==> <java.lang.Thread: void start()>
THREAD edge: virtualinvoke $r2.<android.os.HandlerThread: void start()>() in <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()> ==> <android.os.HandlerThread: void run()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<android.os.HandlerThread: android.os.Looper getLooper()>() in <com.facebook.litho.ComponentTree: android.os.Looper getDefaultLayoutThreadLooper()> ==> <android.os.HandlerThread: android.os.Looper getLooper()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>(r1, $r2) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.displaylist.DisplayList: void <init>(com.facebook.litho.displaylist.PlatformDisplayList)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r0.<android.graphics.RectF: void set(float,float,float,float)>(f0, f1, f2, f3) in <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)> ==> <android.graphics.RectF: void set(float,float,float,float)>
VIRTUAL edge: virtualinvoke r1.<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>($r4, $r3) in <com.facebook.litho.BorderColorDrawable: void drawBorder(android.graphics.Canvas,float,float,float,float)> ==> <android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>
INTERFACE edge: $i14 = interfaceinvoke r4.<java.util.Map: int size()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.util.concurrent.ConcurrentHashMap: int size()>
INTERFACE edge: $i14 = interfaceinvoke r4.<java.util.Map: int size()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.util.HashMap: int size()>
INTERFACE edge: $i14 = interfaceinvoke r4.<java.util.Map: int size()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.util.Hashtable: int size()>
INTERFACE edge: $i14 = interfaceinvoke r4.<java.util.Map: int size()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.util.WeakHashMap: int size()>
VIRTUAL edge: r16 = virtualinvoke r16.<com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopyWithNewId()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopyWithNewId()>
VIRTUAL edge: $i4 = virtualinvoke r16.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: $i8 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getWidth()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: int getWidth()>
VIRTUAL edge: $i9 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getHeight()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: int getHeight()>
VIRTUAL edge: $i2 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getHeight()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: int getHeight()>
VIRTUAL edge: $i3 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getWidth()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.LayoutState: int getWidth()>
VIRTUAL edge: $i5 = virtualinvoke $r13.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.Component: int getId()>
SPECIAL edge: specialinvoke $r12.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The layout can\'t be calculated asynchronously if we need the Size back") in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<com.facebook.litho.LayoutHandler: void removeCallbacks(java.lang.Runnable)>($r7) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <android.os.Handler: void removeCallbacks(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r10.<com.facebook.litho.LayoutHandler: void removeCallbacks(java.lang.Runnable)>($r9) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <android.os.Handler: void removeCallbacks(java.lang.Runnable)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <android.os.Handler: boolean post(java.lang.Runnable)>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.DisplayListPrefetcher: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentTree$1: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <android.os.HandlerThread: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentTree$2: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <java.lang.Thread: void run()>
EXECUTOR edge: interfaceinvoke $r11.<com.facebook.litho.LayoutHandler: boolean post(java.lang.Runnable)>($r19) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void run()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)>(r6, z0) in <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)> ==> <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)>
CLINIT edge: $r2 = <com.facebook.litho.Component: java.util.concurrent.atomic.AtomicInteger sIdGenerator> in <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopyWithNewId()> ==> <com.facebook.litho.Component: void <clinit>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to use a released LayoutState") in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.ArrayList: boolean isEmpty()>
INTERFACE edge: i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke $r3.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i2) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r7 = virtualinvoke $r6.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r8 = virtualinvoke r7.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z2 = virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: boolean hasBeenPreallocated()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentLifecycle: boolean hasBeenPreallocated()>
VIRTUAL edge: i1 = virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentLifecycle: int poolSize()>
VIRTUAL edge: i1 = virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.HostComponent: int poolSize()>
VIRTUAL edge: $r12 = virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>($r10) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r12 = virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>($r10) in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ViewCompatComponent: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.ComponentLifecycle: void setWasPreallocated()>() in <com.facebook.litho.LayoutState: void preAllocateMountContent()> ==> <com.facebook.litho.ComponentLifecycle: void setWasPreallocated()>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
SPECIAL edge: specialinvoke $r31.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to releaseRef a recycled LayoutState") in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i2 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r29 = interfaceinvoke $r28.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r5.<java.util.ArrayList: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Queue: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayDeque: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Queue: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: i4 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i4 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i4 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i3) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i3) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r26 = interfaceinvoke $r25.<java.util.List: java.lang.Object get(int)>(i3) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke $r9.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r9.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: i6 = interfaceinvoke $r20.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i6 = interfaceinvoke $r20.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i6 = interfaceinvoke $r20.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r23 = interfaceinvoke $r22.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke $r21.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r21.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r21.<java.util.List: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r12.<com.facebook.litho.LayoutStateOutputIdCalculator: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void clear()>
VIRTUAL edge: virtualinvoke $r16.<java.util.ArrayList: void clear()>() in <com.facebook.litho.LayoutState: void releaseRef()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: r19 = virtualinvoke $r15.<com.facebook.litho.ComponentContext: android.content.Context getBaseContext()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
SPECIAL edge: specialinvoke $r16.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Double wrapped ComponentContext.") in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r19) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r6.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
VIRTUAL edge: $r11 = virtualinvoke r6.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $i1 = virtualinvoke r6.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.ComponentLifecycle: int poolSize()>
VIRTUAL edge: $i1 = virtualinvoke r6.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.HostComponent: int poolSize()>
VIRTUAL edge: $i2 = virtualinvoke r6.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
VIRTUAL edge: $r7 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object get(int)>($i0) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <android.util.SparseArray: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke r4.<android.util.SparseArray: void put(int,java.lang.Object)>($i2, $r8) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <android.util.SparseArray: void put(int,java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("MountContent - ") in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.Class: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r13 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>($r14, $i1, 1) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r5) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.ComponentLifecycle: int poolSize()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: int poolSize()>() in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.HostComponent: int poolSize()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke r4.<android.util.SparseArray: java.lang.Object get(int)>($i1) in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <android.util.SparseArray: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke r6.<com.facebook.litho.RecyclePool: boolean isFull()>() in <com.facebook.litho.ComponentsPools: boolean canAddMountContentToPool(android.content.Context,com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.RecyclePool: boolean isFull()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.TransitionContext: void reset()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.TransitionContext: void reset()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>($r5) in <com.facebook.litho.DiffNode: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>($r5) in <com.facebook.litho.DiffNode: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DiffNode)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.TestOutput: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)> ==> <com.facebook.litho.TestOutput: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestOutput)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.VisibilityOutput: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)> ==> <com.facebook.litho.VisibilityOutput: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityOutput)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: android.content.res.Resources getResources()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)>(r2, i0, i1) in <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode newLayoutBuilder(int,int)> ==> <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(0) in <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentLifecycle$2: com.facebook.litho.Size acquireSize(int)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentLifecycle$2: com.facebook.litho.Size acquireSize(int)> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.Size: void <init>()>() in <com.facebook.litho.ComponentLifecycle$2: com.facebook.litho.Size acquireSize(int)> ==> <com.facebook.litho.Size: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r1) in <com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r1) in <com.facebook.litho.ComponentLifecycle$2: void releaseSize(com.facebook.litho.Size)> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("You must override onMeasure() if you return true in canMeasure(), ComponentLifecycle is: ") in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r4) in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r6) in <com.facebook.litho.ComponentLifecycle: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r5.<com.facebook.litho.ViewCompatComponent: int getId()>() in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
SPECIAL edge: specialinvoke $r7.<android.view.ViewGroup$LayoutParams: void <init>(int,int)>($i2, $i1) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.ViewGroup$LayoutParams: void <init>(int,int)>
VIRTUAL edge: virtualinvoke r12.<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>($r7) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
VIRTUAL edge: $i3 = virtualinvoke r12.<android.view.View: int getVisibility()>() in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.View: int getVisibility()>
VIRTUAL edge: virtualinvoke r12.<android.view.View: void measure(int,int)>(i4, i5) in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.View: void measure(int,int)>
VIRTUAL edge: $i6 = virtualinvoke r12.<android.view.View: int getMeasuredWidth()>() in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.View: int getMeasuredWidth()>
VIRTUAL edge: $i7 = virtualinvoke r12.<android.view.View: int getMeasuredHeight()>() in <com.facebook.litho.ViewCompatComponent: void onMeasure(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,int,int,com.facebook.litho.Size,com.facebook.litho.Component)> ==> <android.view.View: int getMeasuredHeight()>
VIRTUAL edge: r18 = virtualinvoke $r14.<com.facebook.litho.ComponentContext: android.content.Context getBaseContext()>() in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
SPECIAL edge: specialinvoke $r15.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Double wrapped ComponentContext.") in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("Activity callbacks must be invoked manually below ICS (API level 14)") in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>(com.facebook.litho.ComponentsPools$1)>(null) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>(com.facebook.litho.ComponentsPools$1)>
VIRTUAL edge: $r10 = virtualinvoke r18.<android.content.Context: android.content.Context getApplicationContext()>() in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.content.ContextWrapper: android.content.Context getApplicationContext()>
VIRTUAL edge: virtualinvoke $r12.<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>($r11) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
INTERFACE edge: $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r20 = interfaceinvoke $r19.<java.util.Map: java.lang.Object get(java.lang.Object)>(r18) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<android.util.SparseArray: void <init>()>() in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.util.SparseArray: void <init>()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r6) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r6) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r6) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r18, $r6) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.util.SparseArray: java.lang.Object get(int)>(i0) in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <android.util.SparseArray: java.lang.Object get(int)>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int,boolean)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
VIRTUAL edge: $z0 = virtualinvoke r1.<android.app.Activity: boolean isFinishing()>() in <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)> ==> <android.app.Activity: boolean isFinishing()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.ContextWrapper: android.content.Context getBaseContext()>() in <com.facebook.litho.ContextUtils: android.app.Activity findActivityInContext(android.content.Context)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.reference.BorderColorDrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r1, r2) in <com.facebook.litho.reference.BorderColorDrawableReference: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()>() in <com.facebook.litho.reference.BorderColorDrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()>() in <com.facebook.litho.reference.BorderColorDrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.BorderColorDrawable acquireBorderColorDrawable()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.reference.DrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r1, r2) in <com.facebook.litho.reference.DrawableReference: java.lang.Object onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.DrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,android.graphics.drawable.Drawable,com.facebook.litho.reference.Reference)>(r1, $r4, r3) in <com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,android.graphics.drawable.Drawable,com.facebook.litho.reference.Reference)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)>($r1) in <com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,android.graphics.drawable.Drawable,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)>($r1) in <com.facebook.litho.reference.BorderColorDrawableReference: void onRelease(com.facebook.litho.ComponentContext,android.graphics.drawable.Drawable,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.BorderColorDrawable)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.ReferenceLifecycle: void <init>()>() in <com.facebook.litho.reference.DrawableReference: void <init>()> ==> <com.facebook.litho.reference.ReferenceLifecycle: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference: void <init>(com.facebook.litho.reference.ReferenceLifecycle)>($r1) in <com.facebook.litho.reference.DrawableReference$State: void <init>()> ==> <com.facebook.litho.reference.Reference: void <init>(com.facebook.litho.reference.ReferenceLifecycle)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference$Builder: void release()>() in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()> ==> <com.facebook.litho.ResourceResolver: void release()>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void release()> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>($r1) in <com.facebook.litho.DrawableComponent$State: void <init>(com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>
CLINIT edge: $r1 = <com.facebook.litho.Component: java.util.concurrent.atomic.AtomicInteger sIdGenerator> in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1) in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <java.lang.Integer: java.lang.String toString(int)>
CLINIT edge: $r4 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i1) in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <java.lang.Integer: void <clinit>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.DrawableComponent: void <init>()>() in <com.facebook.litho.DrawableComponent: com.facebook.litho.DrawableComponent get()> ==> <com.facebook.litho.DrawableComponent: void <init>()>
VIRTUAL edge: $z0 = virtualinvoke r1.<android.view.View: boolean isInEditMode()>() in <com.facebook.litho.DisplayListPrefetcher: void initIfNeeded(android.view.View)> ==> <android.view.View: boolean isInEditMode()>
VIRTUAL edge: f0 = virtualinvoke r2.<android.view.Display: float getRefreshRate()>() in <com.facebook.litho.DisplayListPrefetcher: void initIfNeeded(android.view.View)> ==> <android.view.Display: float getRefreshRate()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object peek()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.ArrayDeque: java.lang.Object peek()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object peek()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.LinkedList: java.lang.Object peek()>
VIRTUAL edge: $r5 = virtualinvoke r11.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r3 = virtualinvoke r11.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $z0 = virtualinvoke r6.<com.facebook.litho.LayoutState: boolean hasItemsForDLPrefetch()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <com.facebook.litho.LayoutState: boolean hasItemsForDLPrefetch()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Queue: java.lang.Object remove()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.ArrayDeque: java.lang.Object remove()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Queue: java.lang.Object remove()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.LinkedList: java.lang.Object remove()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Queue: java.lang.Object peek()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.ArrayDeque: java.lang.Object peek()>
INTERFACE edge: $r10 = interfaceinvoke $r9.<java.util.Queue: java.lang.Object peek()>() in <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.LayoutState getValidLayoutStateFromQueue()> ==> <java.util.LinkedList: java.lang.Object peek()>
VIRTUAL edge: l0 = virtualinvoke $r1.<com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: long get(java.lang.String)>(r0) in <com.facebook.litho.DisplayListPrefetcher: boolean canPrefetchOnTime(java.lang.String,long,long)> ==> <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: long get(java.lang.String)>
VIRTUAL edge: l0 = virtualinvoke $r1.<com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: long get(java.lang.String)>(r0) in <com.facebook.litho.DisplayListPrefetcher: void updateAveragePrefetchDuration(java.lang.String,long)> ==> <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: long get(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)>(r0, l6) in <com.facebook.litho.DisplayListPrefetcher: void updateAveragePrefetchDuration(java.lang.String,long)> ==> <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)>
CLINIT edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r12, 0, $i7) in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.lang.System: void <clinit>()>
STATIC edge: staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r9, 0, $r12, 0, $i7) in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()> ==> <java.util.ArrayDeque: java.lang.Object poll()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.Queue: java.lang.Object poll()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()> ==> <java.util.LinkedList: java.lang.Object poll()>
VIRTUAL edge: i0 = virtualinvoke $r3.<java.lang.Integer: int intValue()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getNextLayoutOutputForDLPrefetch()> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>(r22) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>(r10) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>(null) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createDisplayList: ") in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: r7 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r8 = virtualinvoke r7.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $i0 = virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
VIRTUAL edge: $r18 = virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>(r12) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r18 = virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>(r12) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ViewCompatComponent: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ViewCompatComponent: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ViewCompatComponent: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r12, r20, r1) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Class: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <java.lang.Class: java.lang.String getSimpleName()>
VIRTUAL edge: $r17 = virtualinvoke r14.<com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: r21 = virtualinvoke r14.<com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $z2 = virtualinvoke r21.<com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>
VIRTUAL edge: $s9 = virtualinvoke r21.<com.facebook.litho.NodeInfo: short getFocusState()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NodeInfo: short getFocusState()>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r16) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r16) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r16) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r15) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.DisplayListDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r15) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MatrixDrawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: boolean setState(int[])>($r15) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.drawable.Drawable: boolean setState(int[])>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i1, $i2) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(0, 0, $i1, $i2) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MatrixDrawable: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke r20.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: $i1 = virtualinvoke r22.<android.graphics.Rect: int width()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i2 = virtualinvoke r22.<android.graphics.Rect: int height()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: $i3 = virtualinvoke r22.<android.graphics.Rect: int width()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i4 = virtualinvoke r22.<android.graphics.Rect: int height()>() in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: r23 = virtualinvoke r10.<com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)>($i3, $i4) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.displaylist.DisplayList: android.graphics.Canvas start(int,int)>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)>(r23) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.displaylist.DisplayList: void end(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>($i8, $i7, $i6, $i5) in <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r1) in <com.facebook.litho.ViewCompatComponent: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r1) in <com.facebook.litho.ViewCompatComponent: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
VIRTUAL edge: $l0 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: int getFlags()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: int getFlags()>
VIRTUAL edge: $l4 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getHostMarker()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: long getHostMarker()>
VIRTUAL edge: i5 = virtualinvoke r1.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput findInteractiveRoot(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.ArrayList: java.lang.Object get(int)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) in <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(-1) in <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.ReferenceLifecycle: void <init>()>() in <com.facebook.litho.reference.BorderColorDrawableReference: void <init>()> ==> <com.facebook.litho.reference.ReferenceLifecycle: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference: void <init>(com.facebook.litho.reference.ReferenceLifecycle)>($r1) in <com.facebook.litho.reference.BorderColorDrawableReference$State: void <init>()> ==> <com.facebook.litho.reference.Reference: void <init>(com.facebook.litho.reference.ReferenceLifecycle)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.Transition: void <init>(java.lang.String,com.facebook.litho.animation.AnimatedProperty,com.facebook.litho.Transition$TransitionAnimator,com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>($r7, $r6, $r5, $r4, $r3) in <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()> ==> <com.facebook.litho.Transition: void <init>(java.lang.String,com.facebook.litho.animation.AnimatedProperty,com.facebook.litho.Transition$TransitionAnimator,com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>($r2) in <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.Transition$SpringTransitionAnimator: void <init>()>() in <com.facebook.litho.Transition: void <clinit>()> ==> <com.facebook.litho.Transition$SpringTransitionAnimator: void <init>()>
VIRTUAL edge: $f0 = virtualinvoke r0.<android.view.MotionEvent: float getX()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: float getX()>
VIRTUAL edge: $f1 = virtualinvoke r0.<android.view.MotionEvent: float getY()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: float getY()>
VIRTUAL edge: $i2 = virtualinvoke r0.<android.view.MotionEvent: int getAction()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: int getAction()>
VIRTUAL edge: virtualinvoke r0.<android.view.MotionEvent: void setLocation(float,float)>($f4, $f5) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: void setLocation(float,float)>
VIRTUAL edge: virtualinvoke r0.<android.view.MotionEvent: void setLocation(float,float)>($f3, $f2) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.MotionEvent: void setLocation(float,float)>
VIRTUAL edge: $z2 = virtualinvoke $r6.<android.graphics.Rect: boolean contains(int,int)>(i0, i1) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.graphics.Rect: boolean contains(int,int)>
VIRTUAL edge: $z1 = virtualinvoke $r5.<android.graphics.Rect: boolean contains(int,int)>(i0, i1) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.graphics.Rect: boolean contains(int,int)>
VIRTUAL edge: $i9 = virtualinvoke $r3.<android.view.View: int getWidth()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i11 = virtualinvoke $r4.<android.view.View: int getHeight()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: z5 = virtualinvoke $r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r0) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>
VIRTUAL edge: z5 = virtualinvoke $r2.<android.view.View: boolean dispatchTouchEvent(android.view.MotionEvent)>(r0) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: boolean onTouchEvent(android.view.MotionEvent)> ==> <android.view.ViewGroup: boolean dispatchTouchEvent(android.view.MotionEvent)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>() in <com.facebook.litho.ResourceResolver: int dipsToPixels(float)> ==> <android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ResourceCache: java.lang.Object get(int)>(i0) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayRes(int)> ==> <com.facebook.litho.ResourceCache: java.lang.Object get(int)>
VIRTUAL edge: r5 = virtualinvoke $r4.<android.content.res.Resources: java.lang.String[] getStringArray(int)>(i0) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayRes(int)> ==> <android.content.res.Resources: java.lang.String[] getStringArray(int)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>(i0, r5) in <com.facebook.litho.ResourceResolver: java.lang.String[] resolveStringArrayRes(int)> ==> <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ResourceCache: java.lang.Object get(int)>(i0) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayRes(int)> ==> <com.facebook.litho.ResourceCache: java.lang.Object get(int)>
VIRTUAL edge: r5 = virtualinvoke $r4.<android.content.res.Resources: int[] getIntArray(int)>(i0) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayRes(int)> ==> <android.content.res.Resources: int[] getIntArray(int)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>(i0, r5) in <com.facebook.litho.ResourceResolver: int[] resolveIntArrayRes(int)> ==> <com.facebook.litho.ResourceCache: void put(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: $r4 = virtualinvoke $r2.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)>($r3, r0, 0) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>(null) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)>(r5, i0, i1) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentLayout$Builder newLayoutBuilder(com.facebook.litho.Component,int,int)> ==> <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.InternalNode: java.util.List getComponents()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <com.facebook.litho.InternalNode: java.util.List getComponents()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: $i1 = virtualinvoke $r12.<com.facebook.yoga.YogaFlexDirection: int ordinal()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <com.facebook.yoga.YogaFlexDirection: int ordinal()>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>($i0) in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.DebugComponent: java.lang.Class getComponentClass()> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $i3 = virtualinvoke $r6.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $i4 = virtualinvoke $r8.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $i6 = virtualinvoke $r12.<com.facebook.yoga.YogaFlexDirection: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaFlexDirection: int ordinal()>
VIRTUAL edge: $i7 = virtualinvoke $r14.<com.facebook.yoga.YogaFlexDirection: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaFlexDirection: int ordinal()>
VIRTUAL edge: $i8 = virtualinvoke $r16.<com.facebook.yoga.YogaFlexDirection: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaFlexDirection: int ordinal()>
VIRTUAL edge: $i9 = virtualinvoke $r18.<com.facebook.yoga.YogaFlexDirection: int ordinal()>() in <com.facebook.litho.DebugComponent$1: void <clinit>()> ==> <com.facebook.yoga.YogaFlexDirection: int ordinal()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $r12 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r10 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentTree getComponentTree()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<com.facebook.litho.ComponentTree: com.facebook.litho.LithoView getLithoView()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LithoView getLithoView()>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.facebook.litho.LithoView: com.facebook.litho.MountState getMountState()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.LithoView: com.facebook.litho.MountState getMountState()>
VIRTUAL edge: i1 = virtualinvoke $r15.<com.facebook.litho.MountState: int getItemCount()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.MountState: int getItemCount()>
VIRTUAL edge: r8 = virtualinvoke r7.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i2) in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
VIRTUAL edge: $r16 = virtualinvoke r8.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r11 = virtualinvoke r8.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.DebugComponent: java.lang.Object getMountedContent()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
SPECIAL edge: $r2 = specialinvoke r1.<com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)>
SPECIAL edge: $i1 = specialinvoke r1.<com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)>($r2) in <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: int getXFromRoot(com.facebook.litho.InternalNode)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
SPECIAL edge: $r2 = specialinvoke r1.<com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)>
SPECIAL edge: $i1 = specialinvoke r1.<com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)>($r2) in <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: int getYFromRoot(com.facebook.litho.InternalNode)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)>($r5) in <com.facebook.litho.DebugComponent: java.lang.Object getReferenceColor(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<android.graphics.drawable.ColorDrawable: int getColor()>() in <com.facebook.litho.DebugComponent: java.lang.Object getDrawableColor(android.graphics.drawable.Drawable)> ==> <android.graphics.drawable.ColorDrawable: int getColor()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void requestLayout()>() in <com.facebook.litho.LithoView: void forceRelayout()> ==> <com.facebook.litho.ComponentHost: void requestLayout()>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>() in <com.facebook.litho.InternalNode: boolean isClickable()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getOrCreateNodeInfo()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>() in <com.facebook.litho.InternalNode: boolean isClickable()> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView)>(r1) in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView,com.facebook.litho.LithoView$1)> ==> <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.MountState: void detach()>() in <com.facebook.litho.LithoView: void onDetach()> ==> <com.facebook.litho.MountState: void detach()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentTree: void detach()>() in <com.facebook.litho.LithoView: void onDetach()> ==> <com.facebook.litho.ComponentTree: void detach()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentTree: void attach()>() in <com.facebook.litho.LithoView: void onAttach()> ==> <com.facebook.litho.ComponentTree: void attach()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.LithoView: android.content.Context getContext()>() in <com.facebook.litho.LithoView: void onAttach()> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void refreshAccessibilityDelegatesIfNeeded(boolean)>($z1) in <com.facebook.litho.LithoView: void onAttach()> ==> <com.facebook.litho.ComponentHost: void refreshAccessibilityDelegatesIfNeeded(boolean)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.MountState: void setDirty()>() in <com.facebook.litho.LithoView: void setMountStateDirty()> ==> <com.facebook.litho.MountState: void setDirty()>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.LithoView: void setMountStateDirty()> ==> <android.graphics.Rect: void setEmpty()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.MountState: void setDirty()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Clearing the LithoView while the ComponentTree is attached") in <com.facebook.litho.ComponentTree: void clearLithoView()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r14.<com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>(null) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.LithoView: void setComponentTree(com.facebook.litho.ComponentTree)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void detach()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.ComponentTree: void detach()>
VIRTUAL edge: virtualinvoke $r12.<com.facebook.litho.LithoView: void clearComponentTree()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <com.facebook.litho.LithoView: void clearComponentTree()>
VIRTUAL edge: $r15 = virtualinvoke r2.<com.facebook.litho.LithoView: android.content.Context getContext()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.facebook.litho.LithoView: android.content.Context getContext()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <android.view.View: android.content.Context getContext()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Base view context differs, view context is: ") in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r6) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ComponentTree context is: ") in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r9) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) in <com.facebook.litho.ComponentTree: void setLithoView(com.facebook.litho.LithoView)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r10.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to attach a ComponentTree without a set View") in <com.facebook.litho.ComponentTree: void attach()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: r13 = specialinvoke r0.<com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()>
VIRTUAL edge: i0 = virtualinvoke $r3.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: virtualinvoke r13.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: i1 = virtualinvoke $r4.<com.facebook.litho.LithoView: int getMeasuredWidth()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <android.view.View: int getMeasuredWidth()>
VIRTUAL edge: i2 = virtualinvoke $r5.<com.facebook.litho.LithoView: int getMeasuredHeight()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <android.view.View: int getMeasuredHeight()>
VIRTUAL edge: $z2 = virtualinvoke $r8.<com.facebook.litho.LithoView: boolean isMountStateDirty()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.LithoView: boolean isMountStateDirty()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.LithoView: void requestLayout()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.ComponentHost: void requestLayout()>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.LithoView: void rebind()>() in <com.facebook.litho.ComponentTree: void attach()> ==> <com.facebook.litho.LithoView: void rebind()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>($r2, $i1, $i0) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>($r6, $i3, $i2) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>($r2, $i1, $i0) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>(r0) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isComponentId(int)>(i0) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isComponentId(int)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleSize(int,int)>(i1, i2) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleSize(int,int)>
VIRTUAL edge: $z2 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>() in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSize(com.facebook.litho.LayoutState,int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>($r1) in <com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>($r1) in <com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()> ==> <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>
STATIC edge: $z1 = staticinvoke <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager)>(r0) in <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)> ==> <android.support.v4.view.accessibility.AccessibilityManagerCompat: boolean isTouchExplorationEnabled(android.view.accessibility.AccessibilityManager)>
VIRTUAL edge: r2 = virtualinvoke $r1.<android.content.ContextWrapper: android.content.Context getBaseContext()>() in <com.facebook.litho.ComponentTree: android.content.Context getBaseContext(android.content.Context)> ==> <android.content.ContextWrapper: android.content.Context getBaseContext()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i5) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.facebook.litho.MountItem: boolean isBound()>() in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountItem: boolean isBound()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r5 = virtualinvoke r3.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.MountItem: void setIsBound(boolean)>(1) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r7, r5, r4) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r7, r5, r4) in <com.facebook.litho.MountState: void rebind()> ==> <com.facebook.litho.ViewCompatComponent: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: $z3 = virtualinvoke $r8.<android.view.View: boolean isLayoutRequested()>() in <com.facebook.litho.MountState: void rebind()> ==> <android.view.View: boolean isLayoutRequested()>
VIRTUAL edge: $i1 = virtualinvoke r9.<android.view.View: int getLeft()>() in <com.facebook.litho.MountState: void rebind()> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i2 = virtualinvoke r9.<android.view.View: int getTop()>() in <com.facebook.litho.MountState: void rebind()> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i3 = virtualinvoke r9.<android.view.View: int getRight()>() in <com.facebook.litho.MountState: void rebind()> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i4 = virtualinvoke r9.<android.view.View: int getBottom()>() in <com.facebook.litho.MountState: void rebind()> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $i10 = virtualinvoke r7.<android.view.View: int getMeasuredHeight()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getMeasuredHeight()>
VIRTUAL edge: $i11 = virtualinvoke r7.<android.view.View: int getMeasuredWidth()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getMeasuredWidth()>
VIRTUAL edge: virtualinvoke r7.<android.view.View: void measure(int,int)>($i13, $i15) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: void measure(int,int)>
VIRTUAL edge: $i6 = virtualinvoke r7.<android.view.View: int getLeft()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i7 = virtualinvoke r7.<android.view.View: int getTop()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i8 = virtualinvoke r7.<android.view.View: int getRight()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i9 = virtualinvoke r7.<android.view.View: int getBottom()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: virtualinvoke r7.<android.view.View: void layout(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.View: void layout(int,int,int,int)>
VIRTUAL edge: virtualinvoke r7.<android.view.View: void layout(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.view.ViewGroup: void layout(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r6.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r6.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <com.facebook.litho.MatrixDrawable: void setBounds(int,int,int,int)>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unsupported mounted content ") in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5) in <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i1) in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void clearVisibilityItems()>() in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountState: void clearVisibilityItems()>
VIRTUAL edge: $z0 = virtualinvoke r3.<com.facebook.litho.MountItem: boolean isBound()>() in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountItem: boolean isBound()>
VIRTUAL edge: r4 = virtualinvoke r3.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r3.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.MountItem: void setIsBound(boolean)>(0) in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r6, $r7, r4) in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r6, $r7, r4) in <com.facebook.litho.MountState: void unbind()> ==> <com.facebook.litho.ViewCompatComponent: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>(r4) in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>(r4) in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>(r6) in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)>(r5) in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sVisibilityItemPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.LithoView: android.view.ViewParent getParent()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.LithoView: android.view.ViewParent getParent()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LithoView: android.view.ViewParent getParent()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $f0 = virtualinvoke r0.<com.facebook.litho.LithoView: float getTranslationX()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: float getTranslationX()>
VIRTUAL edge: $f1 = virtualinvoke r0.<com.facebook.litho.LithoView: float getTranslationY()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: float getTranslationY()>
VIRTUAL edge: $i4 = virtualinvoke r0.<com.facebook.litho.LithoView: int getTop()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i6 = virtualinvoke r0.<com.facebook.litho.LithoView: int getBottom()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $i8 = virtualinvoke r0.<com.facebook.litho.LithoView: int getLeft()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i10 = virtualinvoke r0.<com.facebook.litho.LithoView: int getRight()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i13 = virtualinvoke r0.<com.facebook.litho.LithoView: int getWidth()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i15 = virtualinvoke r0.<com.facebook.litho.LithoView: int getHeight()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getHeight()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>(r6) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>
VIRTUAL edge: i0 = virtualinvoke $r3.<android.view.View: int getWidth()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getWidth()>
VIRTUAL edge: i1 = virtualinvoke $r5.<android.view.View: int getHeight()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $i12 = virtualinvoke $r7.<android.graphics.Rect: int width()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i14 = virtualinvoke $r8.<android.graphics.Rect: int height()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: virtualinvoke r6.<android.graphics.Rect: void set(int,int,int,int)>($i17, $i19, $i21, $i23) in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: $z4 = virtualinvoke r6.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.LithoView: void maybePerformIncrementalMountOnView()> ==> <android.graphics.Rect: boolean isEmpty()>
VIRTUAL edge: z0 = virtualinvoke $r1.<com.facebook.litho.LithoView: boolean isMountStateDirty()>() in <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)> ==> <com.facebook.litho.LithoView: boolean isMountStateDirty()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)>($r6) in <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)>($r5) in <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)>($r3, r2) in <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)> ==> <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.RenderState acquireRenderState()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Calling incrementalMountComponent() but incremental mount is not enabled") in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: $z1 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)>(r1) in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>(r1) in <com.facebook.litho.ComponentTree: void incrementalMountComponent()> ==> <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>
CLINIT edge: $r2 = <com.facebook.litho.ComponentTree: int[] sCurrentLocation> in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)>(r8, $r10, $r9) in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)>($r3, $r2, r1) in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.reference.DrawableReference$State: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.facebook.litho.reference.ReferenceLifecycle: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i1, $i9, $i7, $i6) in <com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)> ==> <android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r4.<android.graphics.drawable.Drawable: void setBounds(int,int,int,int)>(i1, $i9, $i7, $i6) in <com.facebook.litho.MatrixDrawable: void setInnerDrawableBounds(int,int)> ==> <com.facebook.litho.MatrixDrawable: void setBounds(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Transition$Builder: void <init>(java.lang.String)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.Transition$Builder: void <init>(java.lang.String)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<com.facebook.litho.Transition$Builder: java.util.ArrayList getTransitions()>() in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <com.facebook.litho.Transition$Builder: java.util.ArrayList getTransitions()>
VIRTUAL edge: virtualinvoke $r5.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r6) in <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState$PrepareMountStats: void <init>()>() in <com.facebook.litho.MountState$PrepareMountStats: void <init>(com.facebook.litho.MountState$1)> ==> <com.facebook.litho.MountState$PrepareMountStats: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState$MountStats: void <init>()>() in <com.facebook.litho.MountState$MountStats: void <init>(com.facebook.litho.MountState$1)> ==> <com.facebook.litho.MountState$MountStats: void <init>()>
SPECIAL edge: specialinvoke r0.<android.graphics.Matrix: void <init>()>() in <com.facebook.litho.DrawableMatrix: void <init>()> ==> <android.graphics.Matrix: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.ValueNode: boolean hasInput()> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: boolean hasInput(java.lang.String)>("default_input") in <com.facebook.litho.dataflow.ValueNode: boolean hasInput()> ==> <com.facebook.litho.dataflow.ValueNode: boolean hasInput(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to check for single input of node with multiple inputs!") in <com.facebook.litho.dataflow.ValueNode: boolean hasInput()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>("default_input") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to get single input of node with multiple inputs!") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.animation.TransitionAnimationBinding$1: void <init>(com.facebook.litho.animation.TransitionAnimationBinding)>(r0) in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding$1: void <init>(com.facebook.litho.animation.TransitionAnimationBinding)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.dataflow.GraphBinding: void setListener(com.facebook.litho.dataflow.BindingListener)>($r5) in <com.facebook.litho.animation.TransitionAnimationBinding: void <init>(com.facebook.litho.dataflow.GraphBinding)> ==> <com.facebook.litho.dataflow.GraphBinding: void setListener(com.facebook.litho.dataflow.BindingListener)>
INTERFACE edge: f0 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r2) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f1 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>($r3) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f2 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r4) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f3 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>($r5) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $r15 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>($r14) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $r17 = interfaceinvoke r0.<com.facebook.litho.animation.Resolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>($r16) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.dataflow.SpringNode: void <init>()>() in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.SpringNode: void <init>()>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.animation.BezierTransition$BezierNode: void <init>(float,float,float)>(f0, f1, f7) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.BezierTransition$BezierNode: void <init>(float,float,float)>
SPECIAL edge: specialinvoke $r10.<com.facebook.litho.animation.BezierTransition$BezierNode: void <init>(float,float,float)>(f2, f3, f11) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.BezierTransition$BezierNode: void <init>(float,float,float)>
SPECIAL edge: specialinvoke $r12.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>(0.0F) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r12, $r6, "initial") in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r13, $r6, "end") in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r6, $r8) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r6, $r10) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r8, $r15) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.BezierTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r10, $r17) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
SPECIAL edge: specialinvoke $r13.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>(1.0F) in <com.facebook.litho.animation.BezierTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.SpringNode: void <init>()>() in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.SpringNode: void <init>()>
INTERFACE edge: $f0 = interfaceinvoke r3.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r5) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $f1 = interfaceinvoke r3.<com.facebook.litho.animation.Resolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>($r8) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $r11 = interfaceinvoke r3.<com.facebook.litho.animation.Resolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>($r10) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>($f0) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
SPECIAL edge: specialinvoke $r7.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>($f1) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.animation.SpringTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r2, $r0, "initial") in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.animation.SpringTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r7, $r0, "end") in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.animation.SpringTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r0, $r11) in <com.facebook.litho.animation.SpringTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.dataflow.TimingNode: void <init>(int)>($i0) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.TimingNode: void <init>(int)>
INTERFACE edge: $f0 = interfaceinvoke r4.<com.facebook.litho.animation.Resolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>($r5) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getCurrentState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $f1 = interfaceinvoke r4.<com.facebook.litho.animation.Resolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>($r8) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: float getEndState(com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: $r11 = interfaceinvoke r4.<com.facebook.litho.animation.Resolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>($r10) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: com.facebook.litho.animation.AnimatedPropertyNode getAnimatedPropertyNode(com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>($f0) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
SPECIAL edge: specialinvoke $r7.<com.facebook.litho.dataflow.ConstantNode: void <init>(float)>($f1) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.dataflow.ConstantNode: void <init>(float)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.TimingTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r3, $r0, "initial") in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.TimingTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>($r7, $r0, "end") in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode,java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.animation.TimingTransition: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>($r0, $r11) in <com.facebook.litho.animation.TimingTransition: void setupBinding(com.facebook.litho.animation.Resolver)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addBinding(com.facebook.litho.dataflow.ValueNode,com.facebook.litho.dataflow.ValueNode)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager)>(r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager)>(r1) in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager,com.facebook.litho.DataFlowTransitionManager$1)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>(com.facebook.litho.dataflow.GraphBinding$1)>(null) in <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>(com.facebook.litho.dataflow.GraphBinding$1)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding: void <init>(com.facebook.litho.dataflow.DataFlowGraph)> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.CompositeComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <java.util.concurrent.CopyOnWriteArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke $r5.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void <init>(com.facebook.litho.dataflow.TimingSource)> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke $r6.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: void setInput(java.lang.String,com.facebook.litho.dataflow.ValueNode)> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: void addOutput(com.facebook.litho.dataflow.ValueNode)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.dataflow.ValueNode: void addOutput(com.facebook.litho.dataflow.ValueNode)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>() in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, r5) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r7, r8) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>() in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()> ==> <com.facebook.litho.animation.Animated$SpringBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()> ==> <com.facebook.litho.animation.Animated$TimingBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$SpringBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$TimingBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, r3) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForDisappear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForChange()> ==> <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>(r1) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputUnsafe(java.lang.String)>
SPECIAL edge: $r8 = specialinvoke r0.<com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to get non-existent input \'") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'. Node only has these inputs: ") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$SpringBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$TimingBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, r3) in <com.facebook.litho.animation.Animated$AbstractBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>($r1) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>() in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, r5) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r7, r8) in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>() in <com.facebook.litho.animation.Animated$AbstractPointBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildForAppear(com.facebook.litho.animation.RuntimeValue,com.facebook.litho.animation.RuntimeValue)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource$1: void <init>(com.facebook.litho.dataflow.ChoreographerTimingSource)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void <init>()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>($r1) in <com.facebook.litho.dataflow.ChoreographerTimingSource: void postFrameCallback()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>($r1) in <com.facebook.litho.dataflow.ChoreographerTimingSource: void stopFrameCallback()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void removeFrameCallback(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.DimensionValue: void <init>(com.facebook.litho.animation.DimensionValue$Type,float)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>()>() in <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>(com.facebook.litho.dataflow.springs.Spring$1)> ==> <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$1: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>(r0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: android.view.Choreographer$FrameCallback getFrameCallback()> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$1: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>(r0) in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: java.lang.Runnable getRunnable()> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.SequenceBinding$1: void <init>(com.facebook.litho.animation.SequenceBinding)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.ParallelBinding$1: void <init>(com.facebook.litho.animation.ParallelBinding)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void <init>()>() in <com.facebook.litho.animation.ParallelBinding$2: void <init>(com.facebook.litho.animation.ParallelBinding)> ==> <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback: void <init>()>
INTERFACE edge: interfaceinvoke $r3.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r2) in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke $r3.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r2) in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke $r3.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r2) in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)>($r6, $l6) in <com.facebook.litho.animation.ParallelBinding: void startNextBindingForStagger()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: void postFrameCallbackDelayed(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback,long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder)>(r1) in <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder,com.facebook.litho.ComponentInfo$1)> ==> <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.Component access$100(com.facebook.litho.ComponentInfo$Builder)>(r1) in <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder)> ==> <com.facebook.litho.ComponentInfo$Builder: com.facebook.litho.Component access$100(com.facebook.litho.ComponentInfo$Builder)>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentInfo$Builder: android.support.v4.util.SimpleArrayMap access$200(com.facebook.litho.ComponentInfo$Builder)>(r1) in <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder)> ==> <com.facebook.litho.ComponentInfo$Builder: android.support.v4.util.SimpleArrayMap access$200(com.facebook.litho.ComponentInfo$Builder)>
INTERFACE edge: interfaceinvoke $r1.<android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentInfo$Builder: void release()> ==> <android.support.v4.util.Pools$Pool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentInfo$Builder: void <init>()>() in <com.facebook.litho.ComponentInfo$Builder: void <init>(com.facebook.litho.ComponentInfo$1)> ==> <com.facebook.litho.ComponentInfo$Builder: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentsLifecycles$LeakDetector$1: void <init>(com.facebook.litho.ComponentsLifecycles$LeakDetector,android.content.Context)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentsLifecycles$LeakDetector: void <init>(android.content.Context)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)>(r1) in <com.facebook.litho.LithoView: java.util.Deque findTestItems(java.lang.String)> ==> <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.Component getComponentScope()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.Component getComponentScope()>
VIRTUAL edge: $r10 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.StateHandler getStateHandler()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.StateHandler getStateHandler()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.Component: java.lang.String getKey()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: java.lang.String getKey()>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.Component: void setGlobalKey(java.lang.String)>($r12) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: void setGlobalKey(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.Component: void setScopedContext(com.facebook.litho.ComponentContext)>($r8) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: void setScopedContext(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r9 = virtualinvoke r2.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
SPECIAL edge: specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r12 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<com.facebook.litho.ComponentLifecycle: boolean hasState()>() in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentLifecycle: boolean hasState()>
VIRTUAL edge: virtualinvoke $r10.<com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)>(r2) in <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>($r1) in <com.facebook.litho.TestComponent: void <init>(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>() in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()>
SPECIAL edge: specialinvoke r0.<android.support.v7.widget.RecyclerView$OnScrollListener: void <init>()>() in <com.facebook.litho.utils.IncrementalMountUtils$1: void <init>()> ==> <android.support.v7.widget.RecyclerView$OnScrollListener: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>(r1) in <com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder,com.facebook.litho.TestComponentTree$1)> ==> <com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r2) in <com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.TestComponentTree$1)> ==> <com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentLifecycle: void <init>()>() in <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <com.facebook.litho.ComponentLifecycle: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ViewCompatComponent_") in <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) in <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ViewCompatComponent: void <init>(com.facebook.litho.viewcompatcreator.ViewCompatCreator,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentLifecycle: java.util.concurrent.atomic.AtomicInteger sComponentId> in <com.facebook.litho.ComponentLifecycle: void <init>()> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>(r1) in <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: void <init>(com.facebook.litho.ViewCompatComponent)> ==> <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.Component: void setKey(java.lang.String)>(r1) in <com.facebook.litho.Component$Builder: void setKey(java.lang.String)> ==> <com.facebook.litho.Component: void setKey(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component$Builder: void release()>() in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <com.facebook.litho.Component$Builder: void release()>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.ViewCompatComponent$Builder: void release()> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
FINALIZE edge: null in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void finalize()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Bitmap$Config: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Region$Op: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Canvas$VertexMode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Style: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Cap: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Join: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Paint$Align: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Path$FillType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Path$Direction: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.graphics.Shader$TileMode: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.view.ViewDebug$RecyclerTraceType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.view.ViewDebug$HierarchyTraceType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.InternalNode: void <init>()>() in <com.facebook.litho.NoOpInternalNode: void <init>()> ==> <com.facebook.litho.InternalNode: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LayoutState$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LayoutState$2: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>() in <com.facebook.litho.MountItem: boolean isAccessible()> ==> <com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountItem: boolean isAccessible()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r4.<com.facebook.litho.ComponentLifecycle: boolean implementsAccessibility()>() in <com.facebook.litho.MountItem: boolean isAccessible()> ==> <com.facebook.litho.ComponentLifecycle: boolean implementsAccessibility()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentHostUtils$1: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentHostUtils$2: void <init>(java.util.List)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $r8 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $r14 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $r14 = virtualinvoke r7.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r10 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: virtualinvoke $r13.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r12) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.DisplayListDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r13.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r12) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.MatrixDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r13.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r12) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r13.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r12) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <com.facebook.litho.BorderColorDrawable: void draw(android.graphics.Canvas)>
VIRTUAL edge: virtualinvoke $r13.<android.graphics.drawable.Drawable: void draw(android.graphics.Canvas)>($r12) in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void drawNext()> ==> <android.graphics.drawable.InsetDrawable: void draw(android.graphics.Canvas)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>()>() in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>(com.facebook.litho.ComponentTree$1)> ==> <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>()>
STATIC edge: $r1 = staticinvoke <android.os.Looper: android.os.Looper getMainLooper()>() in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>()> ==> <android.os.Looper: android.os.Looper getMainLooper()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>() in <com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.StateHandler: java.util.Map getStateContainers()>() in <com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: java.util.Map getStateContainers()>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)>($r2) in <com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)>($r3) in <com.facebook.litho.StateHandler: void init(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)>
CLINIT edge: $r9 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>($r8) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
STATIC edge: $r9 = staticinvoke <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>($r8) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.facebook.litho.ComponentLifecycle$MountType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.displaylist.DisplayListJB: void <init>(android.view.DisplayList)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.displaylist.DisplayListJB: void <init>(android.view.DisplayList)>(r1) in <com.facebook.litho.displaylist.DisplayListJBMR2: void <init>(android.view.DisplayList)> ==> <com.facebook.litho.displaylist.DisplayListJB: void <init>(android.view.DisplayList)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.displaylist.DisplayListLollipop: void <init>(android.view.RenderNode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.displaylist.DisplayListMarshmallow: void <init>(android.view.RenderNode)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.displaylist.DisplayListMarshmallow: void <init>(android.view.RenderNode)>(r1) in <com.facebook.litho.displaylist.DisplayListNougat: void <init>(android.view.RenderNode)> ==> <com.facebook.litho.displaylist.DisplayListMarshmallow: void <init>(android.view.RenderNode)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTree$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<com.facebook.litho.LayoutHandler: void removeCallbacksAndMessages(java.lang.Object)>(null) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean hasSizeSpec()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: boolean hasSizeSpec()>
SPECIAL edge: $z1 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()>
VIRTUAL edge: r35 = virtualinvoke r0.<com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)>($r9, $r8, r5, i0, i1, $z3, z2, $r34) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)>
VIRTUAL edge: r35 = virtualinvoke r0.<com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)>($r9, $r8, r5, i0, i1, $z3, z2, $r34) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)>
SPECIAL edge: $z4 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()>
VIRTUAL edge: $i8 = virtualinvoke $r29.<com.facebook.litho.LayoutState: int getWidth()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: int getWidth()>
VIRTUAL edge: $i9 = virtualinvoke $r29.<com.facebook.litho.LayoutState: int getHeight()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: int getHeight()>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>
VIRTUAL edge: r27 = virtualinvoke $r22.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState acquireRef()>
VIRTUAL edge: r32 = virtualinvoke $r7.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: virtualinvoke r33.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r18) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r33.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("tree_diff_enabled", $r19) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r21.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("is_background_layout", $r20) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: $r34 = virtualinvoke r27.<com.facebook.litho.LayoutState: com.facebook.litho.DiffNode getDiffTree()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode getDiffTree()>
VIRTUAL edge: virtualinvoke r27.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: $i4 = virtualinvoke r35.<com.facebook.litho.LayoutState: int getWidth()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: int getWidth()>
VIRTUAL edge: $i5 = virtualinvoke r35.<com.facebook.litho.LayoutState: int getHeight()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: int getHeight()>
VIRTUAL edge: r36 = virtualinvoke r35.<com.facebook.litho.LayoutState: com.facebook.litho.StateHandler consumeStateHandler()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.StateHandler consumeStateHandler()>
VIRTUAL edge: virtualinvoke r35.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: virtualinvoke $r14.<com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)>(r36) in <com.facebook.litho.ComponentTree: void calculateLayout(com.facebook.litho.Size,boolean)> ==> <com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>(r0) in <com.facebook.litho.ComponentTree: boolean hasSizeSpec()> ==> <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>(r0) in <com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()> ==> <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>
CLINIT edge: $r0 = new com.facebook.litho.TestComponentContext in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TestComponentContext: void <clinit>()>
STATIC edge: $r8 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r0, r6, $i2, i0, i1, z0, z1, r7, 0) in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)>($r1, r3) in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentTree(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentTree)>
CLINIT edge: $r8 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r0, r6, $i2, i0, i1, z0, z1, r7, 0) in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r5 = new com.facebook.litho.StateHandler in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.TestComponentContext in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $r2 = new com.facebook.litho.ComponentContext in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: $r10 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r2, r8, $i2, i0, i1, z0, z1, r9, $z2) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>
STATIC edge: $r12 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r2, r8, $i3, i0, i1, z0, z1, r9, $z3) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>($r4) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>
CLINIT edge: $r10 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r2, r8, $i2, i0, i1, z0, z1, r9, $z2) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r12 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)>($r2, r8, $i3, i0, i1, z0, z1, r9, $z3) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r5 = staticinvoke <com.facebook.litho.StateHandler: com.facebook.litho.StateHandler acquireNewInstance(com.facebook.litho.StateHandler)>($r4) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentTree: android.os.Handler sMainThreadHandler> in <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ThreadUtils: boolean isMainThread()>() in <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()> ==> <com.facebook.litho.ThreadUtils: boolean isMainThread()>
CLINIT edge: <com.facebook.litho.TestComponentContext: com.facebook.yoga.YogaMeasureFunction FAKE_MEASURE_FUNCTION> = $r0 in <com.facebook.litho.TestComponentContext: void <clinit>()> ==> <com.facebook.litho.TestComponentContext: void <clinit>()>
CLINIT edge: <com.facebook.litho.TestComponentContext: com.facebook.yoga.YogaMeasureFunction FAKE_MEASURE_FUNCTION> = $r0 in <com.facebook.litho.TestComponentContext: void <clinit>()> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)>(r2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)>(r2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)>
STATIC edge: $z9 = staticinvoke <com.facebook.litho.LayoutState: boolean canCollectDisplayListsSync(android.app.Activity)>(r15) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: boolean canCollectDisplayListsSync(android.app.Activity)>
STATIC edge: $z7 = staticinvoke <com.facebook.litho.ThreadUtils: boolean isMainThread()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ThreadUtils: boolean isMainThread()>
STATIC edge: $z6 = staticinvoke <com.facebook.litho.LayoutState: boolean isEligibleForCreatingDisplayLists()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: boolean isEligibleForCreatingDisplayLists()>
STATIC edge: r15 = staticinvoke <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)>(r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ContextUtils: android.app.Activity getValidActivityForContext(android.content.Context)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>($r17, 0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: void releaseNodeTree(com.facebook.litho.InternalNode,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r21, $r20) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r19, $r18) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>(r8, r2, null) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r14) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: $i9 = staticinvoke <java.lang.Math: int min(int,int)>($i7, $i8) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i8 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i14 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: $i13 = staticinvoke <java.lang.Math: int min(int,int)>($i11, $i12) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.Math: int min(int,int)>
STATIC edge: $i12 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.SizeSpec: int getSize(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getSize(int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.SizeSpec: int getMode(int)>(i1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.SizeSpec: int getMode(int)>
STATIC edge: r8 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>($r6, r0, null, i1, i2, r7) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode createAndMeasureTreeForComponent(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.InternalNode,int,int,com.facebook.litho.DiffNode)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>($r5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)>
CLINIT edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r19, $r18) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $z4 = <com.facebook.litho.config.ComponentsConfiguration: boolean collectResultFix> in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r14) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
CLINIT edge: $r24 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)>($r5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>(r4, r1) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>() in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>
STATIC edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>(r4, r1) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.DisplayListPrefetcher: com.facebook.litho.DisplayListPrefetcher getInstance()>() in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DisplayListPrefetcher: void <clinit>()>
CLINIT edge: $r6 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r6) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>(r8, r7) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r6) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)>(r8, r7) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: r43 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>(r0, $i19, $i21) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r8, $r7) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r6, $r5) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.Collections: void sort(java.util.List,java.util.Comparator)>
STATIC edge: r63 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r0, r2, r4) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
STATIC edge: $z8 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r9) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
STATIC edge: r61 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r0, r2) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>
STATIC edge: r60 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>(r0, r2, $r58, $r16, 2) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>
STATIC edge: $r14 = staticinvoke <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.reference.DrawableReference: com.facebook.litho.reference.DrawableReference$PropsBuilder create()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>($r18, r2, r44) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>
STATIC edge: r52 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>(r0, r2, $r50, $r28, 4) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>
STATIC edge: $r28 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>($r32, r4, $i13) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r2, r4) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
STATIC edge: $z22 = staticinvoke <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>
STATIC edge: r49 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>(r0, r2, $r47, r46, 1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)>
STATIC edge: $z21 = staticinvoke <com.facebook.litho.ThreadUtils: boolean isMainThread()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ThreadUtils: boolean isMainThread()>
STATIC edge: r4 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r0, r2) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>
STATIC edge: i35 = staticinvoke <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>(r0, r2, r44) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>
STATIC edge: z5 = staticinvoke <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r0, r2) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>
STATIC edge: r44 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r41) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>(r43, r2, r41) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)>
STATIC edge: r43 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>(r0, $i19, $i21) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.InternalNode resolveNestedTree(com.facebook.litho.InternalNode,int,int)>
STATIC edge: $i21 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>($i20, 1073741824) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>
STATIC edge: $i19 = staticinvoke <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>($i18, 1073741824) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.SizeSpec: int makeSizeSpec(int,int)>
CLINIT edge: staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>($r6, $r5) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $z7 = <com.facebook.litho.config.ComponentsConfiguration: boolean collectResultFix> in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $z8 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r9) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <android.text.TextUtils: void <clinit>()>
CLINIT edge: $i38 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: z5 = staticinvoke <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r0, r2) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: r44 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)>(r0, r41) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $r42 = <com.facebook.litho.ComponentContext: com.facebook.litho.InternalNode NULL_LAYOUT> in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = new com.facebook.litho.LayoutState in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLayoutStatePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r2 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()>
CLINIT edge: r7 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r3, r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
STATIC edge: r7 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)>(r1, r6, r2, i1, $l2, z2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r3, r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext withComponentScope(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
STATIC edge: r1 = staticinvoke <com.facebook.litho.DrawableComponent: com.facebook.litho.Component create(com.facebook.litho.reference.Reference)>(r0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.Component create(com.facebook.litho.reference.Reference)>
CLINIT edge: r7 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)>(r1, r6, r2, i1, $l2, z2) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)>($r1) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: void <clinit>()>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f3) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f2) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f1) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)>($r1) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder create(com.facebook.litho.ComponentContext)>
CLINIT edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i1) in <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r4 = <com.facebook.litho.ComponentLifecycle$MountType: com.facebook.litho.ComponentLifecycle$MountType NONE> in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle$MountType: void <clinit>()>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>(r1, r5, r0, 1, $i0, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>
CLINIT edge: $r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>(r1, r5, r0, 1, $i0, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>($r6, r3, i1) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)>(r0, r3, r2, 0) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r2, r3) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>(r2, r0) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>(r2, r0) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r1, r0) in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)>(r1, r0) in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("diff_node_creation") in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("diff_node_creation") in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTestOutputPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sVisibilityOutputPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>(r0, r2, r3) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>($r9, r6, $i4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)>
STATIC edge: staticinvoke <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>(r2, r6) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)>
STATIC edge: r6 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>(r0, r2, r3) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)>
CLINIT edge: z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: r10 = staticinvoke <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquire()>
STATIC edge: r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()>
STATIC edge: z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: r1 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.HostComponent: void <clinit>()>
STATIC edge: r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>($r0, r1, r2, 0, $i0, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>
STATIC edge: $r0 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>($r0, r1, r2, 0, $i0, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
CLINIT edge: $r0 = staticinvoke <com.facebook.litho.HostComponent: com.facebook.litho.Component create()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.ComponentLifecycle: void <clinit>()>
CLINIT edge: $z7 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z7 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>($r6) in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sDiffNodePool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>(r0, r1, r2, 0, 2, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.LayoutState: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>(r0, r1, r2, 0, 2, $z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sLayoutOutputPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.StateHandler: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
CLINIT edge: $r12 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sPendingStateUpdatesMapPool> in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r6 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sKnownGlobalKeysSetPool> in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sStateContainersMapPool> in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)>(i0, i1) in <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>() in <com.facebook.litho.ComponentTree: boolean isCompatibleSpec(com.facebook.litho.LayoutState,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>
STATIC edge: z0 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>($i2, i0, $i1) in <com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>
STATIC edge: z1 = staticinvoke <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>($i5, i3, $i4) in <com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)> ==> <com.facebook.litho.MeasureComparisonUtils: boolean isMeasureSpecCompatible(int,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.LinkedList: void <init>()>() in <com.facebook.litho.DisplayListPrefetcher: void <init>()> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.reference.Reference$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r1, r2) in <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.BorderColorDrawableReference$State)> ==> <com.facebook.litho.reference.Reference$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i1) in <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.facebook.litho.MountItem: boolean isAccessible()>() in <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getAccessibleMountItem()> ==> <com.facebook.litho.MountItem: boolean isAccessible()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DebugComponent: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DebugComponent: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: r12 = specialinvoke r0.<com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: boolean mountComponentIfDirty()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: boolean mountComponentIfDirty()>
VIRTUAL edge: i0 = virtualinvoke $r4.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: virtualinvoke r12.<com.facebook.litho.LayoutState: void releaseRef()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.LayoutState: void releaseRef()>
VIRTUAL edge: i1 = virtualinvoke $r5.<com.facebook.litho.LithoView: int getMeasuredWidth()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <android.view.View: int getMeasuredWidth()>
VIRTUAL edge: i2 = virtualinvoke $r6.<com.facebook.litho.LithoView: int getMeasuredHeight()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <android.view.View: int getMeasuredHeight()>
VIRTUAL edge: virtualinvoke $r8.<com.facebook.litho.LithoView: void requestLayout()>() in <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentHost: void requestLayout()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountItem: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r15.<com.facebook.litho.NodeInfo: void release()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <com.facebook.litho.NodeInfo: void release()>
VIRTUAL edge: $r14 = virtualinvoke r6.<com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>
VIRTUAL edge: virtualinvoke $r13.<com.facebook.litho.ViewNodeInfo: void release()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <com.facebook.litho.ViewNodeInfo: void release()>
VIRTUAL edge: $r12 = virtualinvoke r8.<com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()>
VIRTUAL edge: $z1 = virtualinvoke r11.<android.view.View: boolean isClickable()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <android.view.View: boolean isClickable()>
VIRTUAL edge: $z2 = virtualinvoke r11.<android.view.View: boolean isLongClickable()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <android.view.View: boolean isLongClickable()>
VIRTUAL edge: $z3 = virtualinvoke r11.<android.view.View: boolean isFocusable()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)> ==> <android.view.View: boolean isFocusable()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)>(r0) in <com.facebook.litho.NodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)>(r0) in <com.facebook.litho.NodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>($r6) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)>(r0) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>($r5) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>($r6) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)>(r0) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>($r5) in <com.facebook.litho.ViewNodeInfo: void release()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sNodeInfoPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sViewNodeInfoPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>($r1) in <com.facebook.litho.HostComponent$State: void <init>()> ==> <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentLifecycle$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentLifecycle$2: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>(2) in <com.facebook.litho.ComponentLifecycle$2: void <init>()> ==> <android.support.v4.util.Pools$SynchronizedPool: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentLifecycle: void <init>()>() in <com.facebook.litho.HostComponent: void <init>()> ==> <com.facebook.litho.ComponentLifecycle: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <android.widget.ImageView$ScaleType: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>(com.facebook.litho.animation.AnimatedProperties$1)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r11 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r10 = virtualinvoke r2.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i2) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
VIRTUAL edge: $i1 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
SPECIAL edge: specialinvoke r3.<com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r4, r10) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r3.<com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r4, r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke $r9.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursively unmounting items from a ComponentHost, left some items behind maybe because not tracked by its MountState") in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r6.<com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>() in <com.facebook.litho.MountState: void endUnmountDisappearingItem(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r3, r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r3, r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>(r1) in <com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MountItem: void release(android.content.Context)>(r1) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: void release(android.content.Context)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>(r8, $r10, $r11) in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)>($r7) in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>(r8, $r10, $r11) in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.ComponentLifecycle,java.lang.Object)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.DisplayListDrawable)>($r7) in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: int getFlags()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: int getFlags()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.MountItem: int getImportantForAccessibility()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: int getImportantForAccessibility()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getLongClickHandler()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getLongClickHandler()>
VIRTUAL edge: $r8 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getTouchHandler()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getTouchHandler()>
VIRTUAL edge: $r9 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getInterceptTouchHandler()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getInterceptTouchHandler()>
VIRTUAL edge: $r10 = virtualinvoke r4.<com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>
VIRTUAL edge: $r11 = virtualinvoke r4.<com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>() in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>
VIRTUAL edge: virtualinvoke r3.<android.view.View: void setClickable(boolean)>($z3) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <android.view.View: void setClickable(boolean)>
VIRTUAL edge: virtualinvoke r3.<android.view.View: void setLongClickable(boolean)>($z4) in <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)> ==> <android.view.View: void setLongClickable(boolean)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: android.graphics.drawable.Drawable getForeground()>() in <com.facebook.litho.MountState: void unsetViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: android.graphics.drawable.Drawable getForeground()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("MountState has a ViewNodeInfo with foreground however the current Android version doesn\'t support foreground on Views") in <com.facebook.litho.MountState: void unsetViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: com.facebook.litho.reference.Reference getBackground()>() in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.reference.Reference getBackground()>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.view.View: android.content.Context getContext()>() in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: $r5 = virtualinvoke r2.<android.view.View: android.graphics.drawable.Drawable getBackground()>() in <com.facebook.litho.MountState: void unsetViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.View: android.graphics.drawable.Drawable getBackground()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: boolean hasPadding()>() in <com.facebook.litho.MountState: void unsetViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: boolean hasPadding()>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setPadding(int,int,int,int)>(0, 0, 0, 0) in <com.facebook.litho.MountState: void unsetViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.View: void setPadding(int,int,int,int)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setPadding(int,int,int,int)>(0, 0, 0, 0) in <com.facebook.litho.MountState: void unsetViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.ViewGroup: void setPadding(int,int,int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i1) in <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)> ==> <android.view.View: java.lang.Object getTag(int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<android.view.View: java.lang.Object getTag(int)>($i1) in <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)> ==> <com.facebook.litho.ComponentHost: java.lang.Object getTag(int)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, null) in <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, null) in <com.facebook.litho.MountState: void unsetAccessibilityDelegate(android.view.View)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: int getFlags()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setFocusable(boolean)>($z0) in <com.facebook.litho.MountState: void unsetFocusable(android.view.View,com.facebook.litho.MountItem)> ==> <android.view.View: void setFocusable(boolean)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setContentDescription(java.lang.CharSequence)>(null) in <com.facebook.litho.MountState: void unsetContentDescription(android.view.View)> ==> <android.view.View: void setContentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setContentDescription(java.lang.CharSequence)>(null) in <com.facebook.litho.MountState: void unsetContentDescription(android.view.View)> ==> <com.facebook.litho.ComponentHost: void setContentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentHost: void setViewTags(android.util.SparseArray)>(null) in <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)> ==> <com.facebook.litho.ComponentHost: void setViewTags(android.util.SparseArray)>
VIRTUAL edge: i0 = virtualinvoke r1.<android.util.SparseArray: int size()>() in <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)> ==> <android.util.SparseArray: int size()>
VIRTUAL edge: $i1 = virtualinvoke r1.<android.util.SparseArray: int keyAt(int)>(i2) in <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)> ==> <android.util.SparseArray: int keyAt(int)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i1, null) in <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i1, null) in <com.facebook.litho.MountState: void unsetViewTags(android.view.View,android.util.SparseArray)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentHost: void setViewTag(java.lang.Object)>(null) in <com.facebook.litho.MountState: void unsetViewTag(android.view.View)> ==> <com.facebook.litho.ComponentHost: void setViewTag(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(java.lang.Object)>(null) in <com.facebook.litho.MountState: void unsetViewTag(android.view.View)> ==> <android.view.View: void setTag(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.ComponentHost: void setInterceptTouchEventHandler(com.facebook.litho.EventHandler)>(null) in <com.facebook.litho.MountState: void unsetInterceptTouchEventHandler(android.view.View)> ==> <com.facebook.litho.ComponentHost: void setInterceptTouchEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentTouchListener: void setEventHandler(com.facebook.litho.EventHandler)>(null) in <com.facebook.litho.MountState: void unsetTouchHandler(android.view.View)> ==> <com.facebook.litho.ComponentTouchListener: void setEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLongClickListener: void setEventHandler(com.facebook.litho.EventHandler)>(null) in <com.facebook.litho.MountState: void unsetLongClickHandler(android.view.View)> ==> <com.facebook.litho.ComponentLongClickListener: void setEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentClickListener: void setEventHandler(com.facebook.litho.EventHandler)>(null) in <com.facebook.litho.MountState: void unsetClickHandler(android.view.View)> ==> <com.facebook.litho.ComponentClickListener: void setEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>(r1) in <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)> ==> <android.view.View: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.animation.SequenceBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.animation.ParallelBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.animation.TransitionAnimationBinding: void stop()>() in <com.facebook.litho.animation.TransitionAnimationBinding: void onAllNodesFinished()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void stop()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClipping(java.lang.Object,boolean)>($r2, 1) in <com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClipping(java.lang.Object,boolean)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r1) in <com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)>
SPECIAL edge: specialinvoke $r8.<com.facebook.litho.animation.AnimatedPropertyNode: void <init>(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>($r9, r5) in <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.animation.AnimatedPropertyNode getOrCreateAnimatedPropertyNode(java.lang.String,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.AnimatedPropertyNode: void <init>(java.lang.Object,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.ArrayList: boolean remove(java.lang.Object)>(r1) in <com.facebook.litho.dataflow.ValueNode: void removeOutput(com.facebook.litho.dataflow.ValueNode)> ==> <java.util.ArrayList: boolean remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r3.<java.lang.RuntimeException: void <init>(java.lang.String)>("Tried to remove non-existent input!") in <com.facebook.litho.dataflow.ValueNode: void removeOutput(com.facebook.litho.dataflow.ValueNode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to remove non-existent input with name: ") in <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) in <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r2.<java.lang.RuntimeException: void <init>(java.lang.String)>($r7) in <com.facebook.litho.dataflow.ValueNode: void removeInput(java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: $r3 = specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerCompat: android.view.Choreographer getChoreographer()>() in <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()> ==> <com.facebook.litho.dataflow.ChoreographerCompat: android.view.Choreographer getChoreographer()>
SPECIAL edge: specialinvoke $r1.<android.os.Handler: void <init>(android.os.Looper)>($r2) in <com.facebook.litho.dataflow.ChoreographerCompat: void <init>()> ==> <android.os.Handler: void <init>(android.os.Looper)>
STATIC edge: $r0 = staticinvoke <android.view.Choreographer: android.view.Choreographer getInstance()>() in <com.facebook.litho.dataflow.ChoreographerCompat: android.view.Choreographer getChoreographer()> ==> <android.view.Choreographer: android.view.Choreographer getInstance()>
SPECIAL edge: specialinvoke r0.<java.lang.Enum: void <init>(java.lang.String,int)>(r1, i0) in <com.facebook.litho.animation.DimensionValue$Type: void <init>(java.lang.String,int)> ==> <java.lang.Enum: void <init>(java.lang.String,int)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.dataflow.DataFlowGraph: void doFrame(long)>(l0) in <com.facebook.litho.dataflow.ChoreographerTimingSource: void doFrame(long)> ==> <com.facebook.litho.dataflow.DataFlowGraph: void doFrame(long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.ChoreographerTimingSource: void postFrameCallback()>() in <com.facebook.litho.dataflow.ChoreographerTimingSource: void doFrame(long)> ==> <com.facebook.litho.dataflow.ChoreographerTimingSource: void postFrameCallback()>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Unexpected Binding completed") in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke r0.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r0.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r0.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.animation.SequenceBinding: void finish()>() in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void finish()>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r8) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r9) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r9) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r7.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r9) in <com.facebook.litho.animation.SequenceBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1) in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<java.lang.RuntimeException: void <init>(java.lang.String)>("Binding unexpectedly completed twice") in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.util.HashSet: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r1.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r1.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r1.<com.facebook.litho.animation.AnimationBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>($r4) in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.SequenceBinding: void removeListener(com.facebook.litho.animation.AnimationBindingListener)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ParallelBinding: void finish()>() in <com.facebook.litho.animation.ParallelBinding: void onBindingFinished(com.facebook.litho.animation.AnimationBinding)> ==> <com.facebook.litho.animation.ParallelBinding: void finish()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.InternalNode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ResourceResolver: void <init>()>() in <com.facebook.litho.InternalNode: void <init>()> ==> <com.facebook.litho.ResourceResolver: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>(int)>(1) in <com.facebook.litho.InternalNode: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>() in <com.facebook.litho.InternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>($r5, $r6) in <com.facebook.litho.InternalNode: void init(com.facebook.yoga.YogaNode,com.facebook.litho.ComponentContext,android.content.res.Resources)> ==> <com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentLifecycle: void <init>()>() in <com.facebook.litho.TestComponent$1: void <init>()> ==> <com.facebook.litho.ComponentLifecycle: void <init>()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: int getChildCount()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: int getChildCount()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: int getChildCount()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>(r1, 0, 0, r2) in <com.facebook.litho.ViewCompatComponent$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)> ==> <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle access$000(com.facebook.litho.Component)>(r3) in <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle access$000(com.facebook.litho.Component)>(r3) in <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle access$000(com.facebook.litho.Component)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.TestComponentContext: com.facebook.litho.TestComponentContext makeNewCopy()>() in <com.facebook.litho.TestComponentContext: com.facebook.litho.ComponentContext makeNewCopy()> ==> <com.facebook.litho.TestComponentContext: com.facebook.litho.TestComponentContext makeNewCopy()>
CLINIT edge: $r0 = new com.facebook.litho.TestComponentContext in <com.facebook.litho.TestComponentContext: com.facebook.litho.TestComponentContext makeNewCopy()> ==> <com.facebook.litho.TestComponentContext: void <clinit>()>
CLINIT edge: $r0 = new com.facebook.litho.TestComponentContext in <com.facebook.litho.TestComponentContext: com.facebook.litho.TestComponentContext makeNewCopy()> ==> <com.facebook.litho.ComponentContext: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context)>(r1) in <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentContext makeNewCopy()> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context)>
VIRTUAL edge: $r115 = virtualinvoke $r114.<com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>() in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>
VIRTUAL edge: virtualinvoke $r113.<com.facebook.litho.NodeInfo: void updateWith(com.facebook.litho.NodeInfo)>($r112) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.NodeInfo: void updateWith(com.facebook.litho.NodeInfo)>
VIRTUAL edge: $r109 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>() in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r3) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r3) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>() in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>
SPECIAL edge: $z1 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r37) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z2 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r41) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z3 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r45) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z4 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r49) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z5 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r53) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z6 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r57) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z7 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r61) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z8 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r65) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z9 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>($r69) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isPaddingPercent(com.facebook.yoga.YogaEdge)>
SPECIAL edge: specialinvoke $r100.<java.lang.IllegalStateException: void <init>(java.lang.String)>("copyInto() must be used when resolving a nestedTree. If padding was set on the holder node, we must have a mNestedTreePadding instance") in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $f30 = virtualinvoke $r98.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r97) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f13 = virtualinvoke $r39.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r38) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f29 = virtualinvoke $r95.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r94) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f14 = virtualinvoke $r43.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r42) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f28 = virtualinvoke $r92.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r91) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f15 = virtualinvoke $r47.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r46) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f27 = virtualinvoke $r89.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r88) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f16 = virtualinvoke $r51.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r50) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f26 = virtualinvoke $r86.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r85) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f17 = virtualinvoke $r55.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r54) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f25 = virtualinvoke $r83.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r82) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f18 = virtualinvoke $r59.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r58) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f24 = virtualinvoke $r80.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r79) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f19 = virtualinvoke $r63.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r62) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f23 = virtualinvoke $r77.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r76) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f20 = virtualinvoke $r67.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r66) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f22 = virtualinvoke $r74.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r73) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f21 = virtualinvoke $r71.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r70) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
SPECIAL edge: specialinvoke $r35.<java.lang.IllegalStateException: void <init>(java.lang.String)>("copyInto() must be used when resolving a nestedTree. If border width was set on the holder node, we must have a mNestedTreeBorderWidth instance") in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $f4 = virtualinvoke $r9.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r8) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f5 = virtualinvoke $r12.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r11) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f6 = virtualinvoke $r15.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r14) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f7 = virtualinvoke $r18.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r17) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f8 = virtualinvoke $r21.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r20) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f9 = virtualinvoke $r24.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r23) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f10 = virtualinvoke $r27.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r26) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f11 = virtualinvoke $r30.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r29) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $f12 = virtualinvoke $r33.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>($r32) in <com.facebook.litho.InternalNode: void copyInto(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TextContent$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ImageContent$1: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r2.<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>($r6, r7) in <com.facebook.litho.TouchExpansionDelegate: void draw(android.graphics.Canvas,android.graphics.Paint)> ==> <android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.Pools$SimplePool: void <init>(int)>(4) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()> ==> <android.support.v4.util.Pools$SimplePool: void <init>(int)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.DebugComponent: void applyOverrides()>() in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.DebugComponent: void applyOverrides()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i1) in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasNestedTree()>() in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean hasNestedTree()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.InternalNode: void applyOverridesRecursive(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
CLINIT edge: $r108 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f1) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f3) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r168 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r37) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i7 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f4) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i8 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f6) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r165 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r49) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i11 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f7) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i12 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f9) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r162 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r61) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i15 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f10) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i16 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f12) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r159 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r68) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i19 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f13) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i20 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f15) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r158 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r74) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i23 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f16) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i24 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f18) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r157 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r80) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i27 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f19) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i28 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f21) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r156 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r87) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i31 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f22) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i32 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f24) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r155 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r93) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i35 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f25) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i36 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f27) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r154 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r99) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $i39 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f28) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i40 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f30) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: r153 = staticinvoke <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>($r106) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaValue: com.facebook.yoga.YogaValue parse(java.lang.String)>
STATIC edge: $r118 = staticinvoke <com.facebook.yoga.YogaPositionType: com.facebook.yoga.YogaPositionType valueOf(java.lang.String)>($r117) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaPositionType: com.facebook.yoga.YogaPositionType valueOf(java.lang.String)>
STATIC edge: $r122 = staticinvoke <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>($r121) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>
STATIC edge: $r126 = staticinvoke <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>($r125) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>
STATIC edge: $r130 = staticinvoke <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>($r129) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign valueOf(java.lang.String)>
STATIC edge: $r134 = staticinvoke <com.facebook.yoga.YogaJustify: com.facebook.yoga.YogaJustify valueOf(java.lang.String)>($r133) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaJustify: com.facebook.yoga.YogaJustify valueOf(java.lang.String)>
STATIC edge: $r138 = staticinvoke <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection valueOf(java.lang.String)>($r137) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection valueOf(java.lang.String)>
STATIC edge: $r142 = staticinvoke <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection valueOf(java.lang.String)>($r141) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection valueOf(java.lang.String)>
CLINIT edge: $r39 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r51 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r63 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: r160 = <com.facebook.litho.DebugComponent: com.facebook.yoga.YogaEdge[] edges> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent: void <clinit>()>
CLINIT edge: $r70 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r76 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r82 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r89 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r95 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
CLINIT edge: $r101 = <com.facebook.litho.DebugComponent$1: int[] $SwitchMap$com$facebook$yoga$YogaUnit> in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent$1: void <clinit>()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>($r14) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
VIRTUAL edge: $r12 = virtualinvoke r1.<com.facebook.litho.ComponentContext: android.content.res.Resources getResources()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <android.content.ContextWrapper: android.content.res.Resources getResources()>
VIRTUAL edge: $r13 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.ComponentContext: int getWidthSpec()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: int getWidthSpec()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.ComponentContext: int getHeightSpec()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: int getHeightSpec()>
VIRTUAL edge: $r6 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.TreeProps getTreeProps()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>(r2) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentContext: void setTreeProps(com.facebook.litho.TreeProps)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: void populateTreeProps(com.facebook.litho.Component,com.facebook.litho.TreeProps)>(r0, r2) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: void populateTreeProps(com.facebook.litho.Component,com.facebook.litho.TreeProps)>
VIRTUAL edge: $r14 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.TreeProps getTreePropsForChildren(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.TreeProps)>(r1, r0, r2) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.TreeProps getTreePropsForChildren(com.facebook.litho.ComponentContext,com.facebook.litho.Component,com.facebook.litho.TreeProps)>
VIRTUAL edge: $r11 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayoutWithSizeSpec(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>(r1, $i0, $i1, r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayoutWithSizeSpec(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
VIRTUAL edge: $z3 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: boolean canMeasure()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMeasure()>
VIRTUAL edge: $z3 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: boolean canMeasure()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ViewCompatComponent: boolean canMeasure()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: void onPrepare(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ComponentLifecycle: void onPrepare(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: void onPrepare(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ViewCompatComponent: void onPrepare(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("createLayout:") in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r17 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r17 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r17 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r18 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void markIsNestedTreeHolder(com.facebook.litho.TreeProps)>($r13) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.InternalNode: void markIsNestedTreeHolder(com.facebook.litho.TreeProps)>
VIRTUAL edge: $r5 = virtualinvoke r20.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void setBaselineFunction(com.facebook.yoga.YogaBaselineFunction)>($r8) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.InternalNode: void setBaselineFunction(com.facebook.yoga.YogaBaselineFunction)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void setBaselineFunction(com.facebook.yoga.YogaBaselineFunction)>($r8) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.NoOpInternalNode: void setBaselineFunction(com.facebook.yoga.YogaBaselineFunction)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void setMeasureFunction(com.facebook.yoga.YogaMeasureFunction)>($r9) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.InternalNode: void setMeasureFunction(com.facebook.yoga.YogaMeasureFunction)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.InternalNode: void appendComponent(com.facebook.litho.Component)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout createLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component,boolean)> ==> <com.facebook.litho.NoOpInternalNode: void appendComponent(com.facebook.litho.Component)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayoutWithSizeSpec(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.Column: com.facebook.litho.ComponentLayout$ContainerBuilder create(com.facebook.litho.ComponentContext)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>(r1) in <com.facebook.litho.ViewCompatComponent: void onPrepare(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: com.facebook.litho.ViewCompatComponent$ViewBinder access$100(com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl)>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.TreeProps: com.facebook.litho.TreeProps copy(com.facebook.litho.TreeProps)>(r1) in <com.facebook.litho.InternalNode: void markIsNestedTreeHolder(com.facebook.litho.TreeProps)> ==> <com.facebook.litho.TreeProps: com.facebook.litho.TreeProps copy(com.facebook.litho.TreeProps)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.Component: boolean isMountSpec(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("You should not free an attached Internalnode") in <com.facebook.litho.InternalNode: void release()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.ResourceResolver: void internalRelease()>() in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.ResourceResolver: void internalRelease()>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: void clear()>() in <com.facebook.litho.InternalNode: void release()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: void clear()>() in <com.facebook.litho.InternalNode: void release()> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.List: void clear()>() in <com.facebook.litho.InternalNode: void release()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r18.<com.facebook.litho.NodeInfo: void release()>() in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.NodeInfo: void release()>
VIRTUAL edge: virtualinvoke $r13.<com.facebook.litho.TreeProps: void reset()>() in <com.facebook.litho.InternalNode: void release()> ==> <com.facebook.litho.TreeProps: void reset()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Edges: void reset()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)> ==> <com.facebook.litho.Edges: void reset()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.Edges)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ViewNodeInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.facebook.litho.ViewNodeInfo: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.DiffNode: com.facebook.litho.DiffNode getChildAt(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.DiffNode: com.facebook.litho.DiffNode getChildAt(int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.DiffNode: com.facebook.litho.DiffNode getChildAt(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: boolean isPureRender()>() in <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: boolean isPureRender()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: boolean isPureRender()>() in <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean isPureRender()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>(r1, r2) in <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>(r1, r2) in <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
STATIC edge: r2 = staticinvoke <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>($r1) in <com.facebook.litho.DrawableComponent: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.reference.Reference: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>(r2, r5) in <com.facebook.litho.DrawableComponent: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.reference.Reference: boolean shouldUpdate(com.facebook.litho.reference.Reference,com.facebook.litho.reference.Reference)>
STATIC edge: r5 = staticinvoke <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>($r4) in <com.facebook.litho.DrawableComponent: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ResourceCache: void <init>(android.content.res.Configuration)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.ResourceCache$1: void <init>(com.facebook.litho.ResourceCache,int)>(r0, 500) in <com.facebook.litho.ResourceCache: void <init>(android.content.res.Configuration)> ==> <com.facebook.litho.ResourceCache$1: void <init>(com.facebook.litho.ResourceCache,int)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>(r4, r5) in <com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)> ==> <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)>
VIRTUAL edge: r8 = virtualinvoke $r7.<com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>() in <com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)> ==> <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>(r8, -1, -1, z1, 1, null) in <com.facebook.litho.ComponentTree: void updateStateInternal(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate,boolean)> ==> <com.facebook.litho.ComponentTree: void setRootAndSizeSpecInternal(com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.Size)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.StateHandler: void maybeInitPendingUpdates()>() in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r7) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke r7.<java.util.List: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.StateHandler: void queueStateUpdate(java.lang.String,com.facebook.litho.ComponentLifecycle$StateUpdate)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: $r2 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sPendingStateUpdatesMapPool> in <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r2.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r5.<java.util.ArrayList: void <init>(int)>($i0) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.ArrayList: void <init>(int)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.LinkedList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean addAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke $r6.<java.util.List: boolean addAll(java.util.Collection)>(r2) in <com.facebook.litho.StateHandler: java.util.List acquireStateUpdatesList(java.util.List)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.NodeInfo: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) in <com.facebook.litho.NodeInfo: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke r0.<android.support.v4.widget.ExploreByTouchHelper: void <init>(android.view.View)>(r1) in <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)> ==> <android.support.v4.widget.ExploreByTouchHelper: void <init>(android.view.View)>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate,com.facebook.litho.ComponentAccessibilityDelegate$1)>(r0, null) in <com.facebook.litho.ComponentAccessibilityDelegate: void <init>(android.view.View,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate,com.facebook.litho.ComponentAccessibilityDelegate$1)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentHost$InterleavedDispatchDraw: void <init>(com.facebook.litho.ComponentHost)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <android.view.ViewGroup: boolean addViewInLayout(android.view.View,int,android.view.ViewGroup$LayoutParams,boolean)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()> ==> <android.graphics.Rect: boolean isEmpty()>
SPECIAL edge: specialinvoke r0.<android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>($r2, r1) in <com.facebook.litho.TouchExpansionDelegate: void <init>(com.facebook.litho.ComponentHost)> ==> <android.view.TouchDelegate: void <init>(android.graphics.Rect,android.view.View)>
SPECIAL edge: specialinvoke $r3.<android.support.v4.util.SparseArrayCompat: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate: void <init>(com.facebook.litho.ComponentHost)> ==> <android.support.v4.util.SparseArrayCompat: void <init>()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)>(r2, r3) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate acquire(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
STATIC edge: $r3 = staticinvoke <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>($r2) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.view.ViewConfiguration: android.view.ViewConfiguration get(android.content.Context)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.TouchExpansionDelegate: boolean maybeUnregisterFromScrap(int)>(i0) in <com.facebook.litho.TouchExpansionDelegate: void unregisterTouchExpansion(int)> ==> <com.facebook.litho.TouchExpansionDelegate: boolean maybeUnregisterFromScrap(int)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()>() in <com.facebook.litho.TouchExpansionDelegate: void unregisterTouchExpansion(int)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()>
CLINIT edge: $r3 = <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: android.support.v4.util.Pools$SimplePool sPool> in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <clinit>()>
SPECIAL edge: specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>(r1) in <com.facebook.litho.ComponentTree$DefaultLayoutHandler: void <init>(android.os.Looper)> ==> <android.os.Handler: void <init>(android.os.Looper)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTree$1: void <init>(com.facebook.litho.ComponentTree)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTree$2: void <init>(com.facebook.litho.ComponentTree)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>() in <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopyWithNewId()> ==> <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopy()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.facebook.litho.Component: com.facebook.litho.Component makeShallowCopyWithNewId()> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.DrawableComponent: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.HostComponent: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ViewCompatComponent: android.view.View createMountContent(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.ViewCompatComponent: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ViewCompatComponent: android.view.View createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke $r1.<java.util.ArrayList: void clear()>() in <com.facebook.litho.TransitionContext: void reset()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.TransitionSet: void clear()>() in <com.facebook.litho.TransitionContext: void reset()> ==> <com.facebook.litho.TransitionSet: void clear()>
VIRTUAL edge: virtualinvoke $r3.<java.util.HashSet: void clear()>() in <com.facebook.litho.TransitionContext: void reset()> ==> <java.util.HashSet: void clear()>
INTERFACE edge: i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.DiffNode: void release()> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.DiffNode: void release()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.DiffNode: void release()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: void clear()>() in <com.facebook.litho.DiffNode: void release()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.TestOutput: void release()> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.VisibilityOutput: void release()> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.Component: void release()>() in <com.facebook.litho.LayoutOutput: void release()> ==> <com.facebook.litho.Component: void release()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.NodeInfo: void release()>() in <com.facebook.litho.LayoutOutput: void release()> ==> <com.facebook.litho.NodeInfo: void release()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ViewNodeInfo: void release()>() in <com.facebook.litho.LayoutOutput: void release()> ==> <com.facebook.litho.ViewNodeInfo: void release()>
VIRTUAL edge: virtualinvoke $r4.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.LayoutOutput: void release()> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void setDefStyle(int,int)>(i0, i1) in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.ComponentContext: void setDefStyle(int,int)>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.ComponentContext: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>(null, $r1, i0, i1) in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void setDefStyle(int,int)>(0, 0) in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.ComponentContext: void setDefStyle(int,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)>(r2) in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)>(r2) in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <com.facebook.litho.NoOpInternalNode: void applyAttributes(android.content.res.TypedArray)>
VIRTUAL edge: virtualinvoke r2.<android.content.res.TypedArray: void recycle()>() in <com.facebook.litho.ComponentContext: void applyStyle(com.facebook.litho.InternalNode,int,int)> ==> <android.content.res.TypedArray: void recycle()>
CLINIT edge: $z6 = <com.facebook.litho.InternalNode: boolean SUPPORTS_RTL> in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection fromInt(int)>(i71) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection fromInt(int)>
STATIC edge: $r13 = staticinvoke <com.facebook.yoga.YogaPositionType: com.facebook.yoga.YogaPositionType fromInt(int)>($i40) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaPositionType: com.facebook.yoga.YogaPositionType fromInt(int)>
STATIC edge: $r15 = staticinvoke <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign fromInt(int)>($i41) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign fromInt(int)>
STATIC edge: $r17 = staticinvoke <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign fromInt(int)>($i42) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaAlign: com.facebook.yoga.YogaAlign fromInt(int)>
STATIC edge: $r19 = staticinvoke <com.facebook.yoga.YogaJustify: com.facebook.yoga.YogaJustify fromInt(int)>($i43) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaJustify: com.facebook.yoga.YogaJustify fromInt(int)>
STATIC edge: $r21 = staticinvoke <com.facebook.yoga.YogaWrap: com.facebook.yoga.YogaWrap fromInt(int)>($i44) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaWrap: com.facebook.yoga.YogaWrap fromInt(int)>
STATIC edge: $r23 = staticinvoke <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection fromInt(int)>($i45) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.yoga.YogaFlexDirection: com.facebook.yoga.YogaFlexDirection fromInt(int)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>(r0, $i46) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>(r0, $i49) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>(r0, $i46) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.TypedArrayUtils: void <clinit>()>
CLINIT edge: $z1 = staticinvoke <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)>(r0, $i49) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.TypedArrayUtils: void <clinit>()>
CLINIT edge: $i52 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $z3 = <com.facebook.litho.InternalNode: boolean SUPPORTS_RTL> in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $z4 = <com.facebook.litho.InternalNode: boolean SUPPORTS_RTL> in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $z5 = <com.facebook.litho.InternalNode: boolean SUPPORTS_RTL> in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.TypedArrayUtils: android.util.TypedValue sTmpTypedValue> in <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)> ==> <com.facebook.litho.TypedArrayUtils: void <clinit>()>
CLINIT edge: <com.facebook.litho.TypedArrayUtils: android.util.TypedValue sTmpTypedValue> = $r0 in <com.facebook.litho.TypedArrayUtils: void <clinit>()> ==> <com.facebook.litho.TypedArrayUtils: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>()>() in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>(com.facebook.litho.ComponentsPools$1)> ==> <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.BorderColorDrawable: void init(int,float,float,float,float)>($i4, $f3, $f2, $f1, $f0) in <com.facebook.litho.reference.BorderColorDrawableReference: android.graphics.drawable.Drawable onAcquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)> ==> <com.facebook.litho.BorderColorDrawable: void init(int,float,float,float,float)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.reference.Reference: void <init>(com.facebook.litho.reference.ReferenceLifecycle)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ResourceResolver: void internalRelease()>() in <com.facebook.litho.ResourceResolver: void release()> ==> <com.facebook.litho.ResourceResolver: void internalRelease()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
VIRTUAL edge: $i1 = virtualinvoke $r3.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.Component: void <init>(com.facebook.litho.ComponentLifecycle)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentLifecycle: void <init>()>() in <com.facebook.litho.DrawableComponent: void <init>()> ==> <com.facebook.litho.ComponentLifecycle: void <init>()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.LayoutState: boolean hasItemsForDLPrefetch()> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r1.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.LayoutState: boolean hasItemsForDLPrefetch()> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1) in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: long get(java.lang.String)> ==> <java.util.ArrayList: int indexOf(java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.util.ArrayList: int indexOf(java.lang.Object)>(r1) in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.util.ArrayList: int indexOf(java.lang.Object)>
VIRTUAL edge: $i2 = virtualinvoke $r4.<java.util.ArrayList: int size()>() in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i4 = virtualinvoke $r6.<java.util.ArrayList: int size()>() in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.DisplayListPrefetcher$AverageDLPrefetchDuration: void put(java.lang.String,long)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void enterNoStateUpdatesMethod(java.lang.String)>("mount") in <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void enterNoStateUpdatesMethod(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void exitNoStateUpdatesMethod()>() in <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void exitNoStateUpdatesMethod()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r0, r2, r3) in <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r0, r2, r3) in <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>(r3) in <com.facebook.litho.DrawableComponent: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>(r4, $r5) in <com.facebook.litho.DrawableComponent: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void enterNoStateUpdatesMethod(java.lang.String)>("bind") in <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void enterNoStateUpdatesMethod(java.lang.String)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void exitNoStateUpdatesMethod()>() in <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void exitNoStateUpdatesMethod()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r0, r2, r3) in <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r0, r2, r3) in <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.DrawableComponent$State: int access$300(com.facebook.litho.DrawableComponent$State)>(r3) in <com.facebook.litho.DrawableComponent: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: int access$300(com.facebook.litho.DrawableComponent$State)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.DrawableComponent$State: int access$400(com.facebook.litho.DrawableComponent$State)>(r3) in <com.facebook.litho.DrawableComponent: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: int access$400(com.facebook.litho.DrawableComponent$State)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r1, r2, r3) in <com.facebook.litho.ComponentLifecycle: void unbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r1, r2, r3) in <com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentLifecycle: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r1, r2, r3) in <com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
STATIC edge: $r6 = staticinvoke <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>(r1) in <com.facebook.litho.DrawableComponent: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)>
STATIC edge: staticinvoke <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>(r4, $r5, $r6) in <com.facebook.litho.DrawableComponent: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.reference.Reference: void release(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.reference.Reference)>
VIRTUAL edge: $i1 = virtualinvoke $r4.<java.lang.Integer: int intValue()>() in <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getParent()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTreeHolder()>() in <com.facebook.litho.DebugComponent: com.facebook.litho.InternalNode parent(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTreeHolder()>
SPECIAL edge: specialinvoke r0.<android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat: void <init>()>() in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView)> ==> <android.support.v4.view.accessibility.AccessibilityManagerCompat$AccessibilityStateChangeListenerCompat: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2) in <com.facebook.litho.LithoView$AccessibilityStateChangeListener: void <init>(com.facebook.litho.LithoView)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MountState: void unbind()>() in <com.facebook.litho.MountState: void detach()> ==> <com.facebook.litho.MountState: void unbind()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.MountState: void setDirty()> ==> <android.graphics.Rect: void setEmpty()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to clear the ComponentTree while attached.") in <com.facebook.litho.LithoView: void clearComponentTree()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>($r1) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.LithoView: void setMountStateDirty()>() in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState setBestMainThreadLayoutAndReturnOldLayout()> ==> <com.facebook.litho.LithoView: void setMountStateDirty()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState,int,int,int)>(r2, $i0, $i2, $i1) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentTree: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState,int,int,int)>(r2, $i0, $i2, $i1) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState,int,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>(r0) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ThreadUtils: void assertHoldsLock(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.facebook.litho.MountState: boolean isDirty()>() in <com.facebook.litho.LithoView: boolean isMountStateDirty()> ==> <com.facebook.litho.MountState: boolean isDirty()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.MountState: boolean isDirty()> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.LayoutState: boolean isComponentId(int)> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: $z0 = virtualinvoke r0.<android.view.accessibility.AccessibilityManager: boolean isEnabled()>() in <com.facebook.litho.LayoutState: boolean isAccessibilityEnabled(android.view.accessibility.AccessibilityManager)> ==> <android.view.accessibility.AccessibilityManager: boolean isEnabled()>
VIRTUAL edge: r5 = virtualinvoke r4.<com.facebook.litho.VisibilityItem: com.facebook.litho.EventHandler getInvisibleHandler()>() in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.VisibilityItem: com.facebook.litho.EventHandler getInvisibleHandler()>
VIRTUAL edge: r6 = virtualinvoke r4.<com.facebook.litho.VisibilityItem: com.facebook.litho.EventHandler getUnfocusedHandler()>() in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.VisibilityItem: com.facebook.litho.EventHandler getUnfocusedHandler()>
VIRTUAL edge: $z0 = virtualinvoke r4.<com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>() in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>(0) in <com.facebook.litho.MountState: void clearVisibilityItems()> ==> <com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.VisibilityItem: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)> ==> <com.facebook.litho.VisibilityItem: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.UnfocusedVisibleEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.UnfocusedVisibleEvent: void <init>()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r1, $r4) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.InvisibleEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.InvisibleEvent: void <init>()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r1, $r4) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>() in <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)>(r1) in <com.facebook.litho.ComponentTree: void applyPreviousRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.AbstractCollection: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)>(r1) in <com.facebook.litho.ComponentTree: void recordRenderInfo(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>() in <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LithoView: boolean isIncrementalMountEnabled()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.facebook.litho.MountState: boolean isDirty()>() in <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isDirty()>
VIRTUAL edge: virtualinvoke $r4.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void set(android.graphics.Rect)>(r6) in <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)>(r2, r6) in <com.facebook.litho.LithoView: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("mount") in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsSystrace: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(boolean)>($z4) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: java.lang.String valueOf(boolean)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i5) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.MountState$MountStats: int access$400(com.facebook.litho.MountState$MountStats)>($r19) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$400(com.facebook.litho.MountState$MountStats)>
STATIC edge: $r18 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.MountState$MountStats: int access$300(com.facebook.litho.MountState$MountStats)>($r17) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$300(com.facebook.litho.MountState$MountStats)>
STATIC edge: $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i3) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.MountState$MountStats: int access$600(com.facebook.litho.MountState$MountStats)>($r15) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$600(com.facebook.litho.MountState$MountStats)>
STATIC edge: $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i2 = staticinvoke <com.facebook.litho.MountState$MountStats: int access$500(com.facebook.litho.MountState$MountStats)>($r13) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$500(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)>($r23, $r22, 0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void endSection()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsSystrace: void endSection()>
STATIC edge: staticinvoke <com.facebook.litho.MountState$MountStats: int access$408(com.facebook.litho.MountState$MountStats)>($r30) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$408(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$MountStats: int access$308(com.facebook.litho.MountState$MountStats)>($r31) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: int access$308(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)>(r29, $r32, r7) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)>
STATIC edge: $z9 = staticinvoke <com.facebook.litho.MountState: boolean canMountIncrementally(com.facebook.litho.Component)>(r27) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean canMountIncrementally(com.facebook.litho.Component)>
STATIC edge: $z11 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>(r7, $r35) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>($r28) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$MountStats: void access$200(com.facebook.litho.MountState$MountStats)>($r6) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState$MountStats: void access$200(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)>($r39, $r38, 1) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>("mount") in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsSystrace: void beginSection(java.lang.String)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $r14 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.String: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)>($r23, $r22, 0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z9 = staticinvoke <com.facebook.litho.MountState: boolean canMountIncrementally(com.facebook.litho.Component)>(r27) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z11 = staticinvoke <android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>(r7, $r35) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r4) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>(r3, r4) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>
STATIC edge: $i18 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i17) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i12 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i11) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i7 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i6) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i3 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i2) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r4 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>(r3, r4) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>(r3) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void release(android.graphics.Rect)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>(r1, r3) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>
STATIC edge: $i23 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i22) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i17 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i16) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i12 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i11) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: $i8 = staticinvoke <java.lang.Math: int max(int,int)>(0, $i7) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <java.lang.Math: int max(int,int)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)>(r1, r3) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.facebook.litho.LithoView: android.view.ViewParent getParent()>() in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $z1 = virtualinvoke r1.<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>(r1, $r11) in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r1.<android.graphics.Rect: void offset(int,int)>($i3, $i2) in <com.facebook.litho.ComponentTree: boolean getVisibleRect(android.graphics.Rect)> ==> <android.graphics.Rect: void offset(int,int)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void getLocationOnScreen(int[])>(r1) in <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)> ==> <android.view.View: void getLocationOnScreen(int[])>
VIRTUAL edge: $i3 = virtualinvoke r0.<android.view.View: int getWidth()>() in <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i6 = virtualinvoke r0.<android.view.View: int getHeight()>() in <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: virtualinvoke r2.<android.graphics.Rect: void set(int,int,int,int)>($i0, $i1, $i4, $i7) in <com.facebook.litho.ComponentTree: void getLocationAndBoundsOnScreen(android.view.View,int[],android.graphics.Rect)> ==> <android.graphics.Rect: void set(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()>() in <com.facebook.litho.Transition$Builder: java.util.ArrayList getTransitions()> ==> <com.facebook.litho.Transition$Builder: void maybeCommitCurrentBuilder()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountState$PrepareMountStats: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountState$MountStats: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.TransitionAnimationBinding$1: void <init>(com.facebook.litho.animation.TransitionAnimationBinding)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void <init>(com.facebook.litho.DataFlowTransitionManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionsResolver: void <init>(com.facebook.litho.DataFlowTransitionManager)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>(com.facebook.litho.dataflow.GraphBinding$1)> ==> <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>() in <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getXProperty()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>() in <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)> ==> <com.facebook.litho.animation.PositionComponentProperty: com.facebook.litho.animation.ComponentProperty getYProperty()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.BezierTransition: void <init>(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty,float,float)>($r2, $r3, $f1, $f0) in <com.facebook.litho.animation.Animated$BezierBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.PositionComponentProperty)> ==> <com.facebook.litho.animation.BezierTransition: void <init>(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.ComponentProperty,float,float)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.SpringTransition: void <init>(com.facebook.litho.animation.ComponentProperty)>(r1) in <com.facebook.litho.animation.Animated$SpringBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.SpringTransition: void <init>(com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.TimingTransition: void <init>(int,com.facebook.litho.animation.ComponentProperty)>($i0, r2) in <com.facebook.litho.animation.Animated$TimingBuilder: com.facebook.litho.animation.TransitionAnimationBinding buildTransition(com.facebook.litho.animation.ComponentProperty)> ==> <com.facebook.litho.animation.TimingTransition: void <init>(int,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r13) in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\'") in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r20) in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: java.lang.String buildDebugInputsString()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.springs.Spring$PhysicsState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$1: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback$2: void <init>(com.facebook.litho.dataflow.ChoreographerCompat$FrameCallback)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentInfo: void <init>(com.facebook.litho.ComponentInfo$Builder)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentInfo$Builder: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.lang.UnsupportedOperationException: void <init>(java.lang.String)>("Trying to access TestItems while ComponentsConfiguration.isEndToEndTestRun is false.") in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.lang.UnsupportedOperationException: void <init>(java.lang.String)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r9.<java.util.LinkedList: void <init>()>() in <com.facebook.litho.MountState: java.util.Deque findTestItems(java.lang.String)> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.StateHandler: void maybeInitStateContainers()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.StateHandler: void maybeInitStateContainers()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: $r24 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r24 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r24 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r24 = virtualinvoke r1.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r20 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: $r9 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: r28 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>
VIRTUAL edge: $r15 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.facebook.litho.ComponentLifecycle: boolean hasState()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean hasState()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentLifecycle: void transferState(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLifecycle$StateContainer,com.facebook.litho.Component)>($r20, r6, r1) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void transferState(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLifecycle$StateContainer,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentLifecycle: void createInitialState(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r9, r1) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void createInitialState(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: $z1 = interfaceinvoke $r7.<java.util.Set: boolean contains(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot set State for ") in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", found another Component with the same key") in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r21.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.CopyOnWriteArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r17 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r17 = interfaceinvoke $r29.<java.util.List: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z3 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z3 = interfaceinvoke r17.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r18 = interfaceinvoke r17.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r14.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, $r15) in <com.facebook.litho.StateHandler: void applyStateUpdatesForComponent(com.facebook.litho.Component)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
CLINIT edge: $r2 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sStateContainersMapPool> in <com.facebook.litho.StateHandler: void maybeInitStateContainers()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
CLINIT edge: $r2 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sKnownGlobalKeysSetPool> in <com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()> ==> <com.facebook.litho.StateHandler: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>(r1) in <com.facebook.litho.TestComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)> ==> <com.facebook.litho.ComponentTree: void <init>(com.facebook.litho.ComponentTree$Builder)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r2) in <com.facebook.litho.TestComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentLifecycle: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() in <com.facebook.litho.ComponentLifecycle: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ResourceResolver: void release()>() in <com.facebook.litho.Component$Builder: void release()> ==> <com.facebook.litho.ResourceResolver: void release()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void <init>(java.lang.String,int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Stub!") in <java.lang.Enum: void finalize()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<android.os.Handler: void <init>(android.os.Looper)>($r1) in <com.facebook.litho.ComponentTree$ComponentMainThreadHandler: void <init>()> ==> <android.os.Handler: void <init>(android.os.Looper)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.StateHandler: void maybeInitPendingUpdates()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r9) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r9) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r9) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r9) in <com.facebook.litho.StateHandler: void copyPendingStateUpdatesMap(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r7 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.StateHandler: void maybeInitStateContainers()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <com.facebook.litho.StateHandler: void maybeInitStateContainers()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r7) in <com.facebook.litho.StateHandler: void copyCurrentStateContainers(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>($r1) in <com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>
SPECIAL edge: $z1 = specialinvoke r0.<com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>($r2) in <com.facebook.litho.ComponentTree: boolean hasCompatibleComponentAndSpec()> ==> <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.TestComponentContext: void <init>(android.content.Context)>(r2) in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TestComponentContext: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.StateHandler: void <init>()>() in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.StateHandler: void <init>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>($r4, $r5) in <com.facebook.litho.TestComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TestComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>(r3, $r5) in <com.facebook.litho.ComponentTree: com.facebook.litho.LayoutState calculateLayoutState(java.lang.Object,com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,boolean,boolean,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()>() in <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()> ==> <com.facebook.litho.ComponentTree: void backgroundLayoutStateUpdated()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>(1, r0) in <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()> ==> <android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<android.os.Message: void sendToTarget()>() in <com.facebook.litho.ComponentTree: void postBackgroundLayoutStateUpdated()> ==> <android.os.Message: void sendToTarget()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>() in <com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: java.util.Map getPendingStateUpdates()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.StateHandler: java.util.Map getStateContainers()>() in <com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: java.util.Map getStateContainers()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)>($r2) in <com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)>($r3) in <com.facebook.litho.StateHandler: void commit(com.facebook.litho.StateHandler)> ==> <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)>
CLINIT edge: staticinvoke <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)>(r10) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)>(r10) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)>
CLINIT edge: $r1 = <com.facebook.litho.StateHandler: android.support.v4.util.Pools$SynchronizedPool sStateUpdatesListPool> in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <com.facebook.litho.StateHandler: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponentContext$1: void <init>()>() in <com.facebook.litho.TestComponentContext: void <clinit>()> ==> <com.facebook.litho.TestComponentContext$1: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Component: void markLayoutStarted()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.Component: void markLayoutStarted()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.Component: void applyStateUpdates(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r12 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.ComponentContext: java.lang.Object getSystemService(java.lang.String)>("accessibility") in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <android.content.ContextWrapper: java.lang.Object getSystemService(java.lang.String)>
VIRTUAL edge: r9 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: $r22 = virtualinvoke r1.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: $i11 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i11 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i10 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i10 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i7 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i7 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: $i6 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i6 = virtualinvoke r8.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: virtualinvoke $r23.<com.facebook.litho.LayoutStateOutputIdCalculator: void clear()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void clear()>
SPECIAL edge: specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("collectResults:") in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r25.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r22) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutState calculate(com.facebook.litho.ComponentContext,com.facebook.litho.Component,int,int,int,boolean,boolean,com.facebook.litho.DiffNode,boolean)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i1) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>($r6) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r5.<java.util.Queue: boolean add(java.lang.Object)>($r6) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r2.<java.util.Queue: boolean isEmpty()>() in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <java.util.AbstractCollection: boolean isEmpty()>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DisplayListPrefetcher: void addLayoutState(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.LayoutState: void queueDisplayListsForPrefetch(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DisplayListPrefetcher: void addLayoutState(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke $r0.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r1 = virtualinvoke $r0.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("collectDisplayLists:") in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r5 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: i0 = virtualinvoke r2.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: r8 = virtualinvoke r2.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i1) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)>(r8) in <com.facebook.litho.LayoutState: void collectDisplayLists(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: void createDisplayList(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: r1 = virtualinvoke r0.<android.app.Activity: android.view.Window getWindow()>() in <com.facebook.litho.LayoutState: boolean canCollectDisplayListsSync(android.app.Activity)> ==> <android.app.Activity: android.view.Window getWindow()>
VIRTUAL edge: $l0 = virtualinvoke r2.<android.view.View: long getDrawingTime()>() in <com.facebook.litho.LayoutState: boolean canCollectDisplayListsSync(android.app.Activity)> ==> <android.view.View: long getDrawingTime()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasNewLayout()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean hasNewLayout()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.InternalNode: void markLayoutSeen()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: void markLayoutSeen()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean isNestedTreeHolder()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean isNestedTreeHolder()>
VIRTUAL edge: $i18 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i18 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i20 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i20 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: $i23 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i23 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i26 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i26 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: $i29 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i29 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i32 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i32 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: r3 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.DiffNode getDiffNode()>
VIRTUAL edge: $z16 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean areCachedMeasuresValid()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean areCachedMeasuresValid()>
VIRTUAL edge: $z15 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean isDuplicateParentStateEnabled()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean isDuplicateParentStateEnabled()>
VIRTUAL edge: r46 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.reference.Reference getBackground()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.reference.Reference getBackground()>
VIRTUAL edge: $z23 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean shouldDrawBorders()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean shouldDrawBorders()>
VIRTUAL edge: $r19 = virtualinvoke r0.<com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>
VIRTUAL edge: $r27 = virtualinvoke r0.<com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>
VIRTUAL edge: $i40 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i40 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i43 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i43 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: i46 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getChildCount()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getChildCount()>
VIRTUAL edge: $r18 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>(i45) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getChildAt(int)>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i6 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i6 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: r57 = virtualinvoke r0.<com.facebook.litho.InternalNode: android.graphics.drawable.Drawable getForeground()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: android.graphics.drawable.Drawable getForeground()>
VIRTUAL edge: $z24 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasVisibilityHandlers()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: boolean hasVisibilityHandlers()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.facebook.litho.InternalNode: java.lang.String getTestKey()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: java.lang.String getTestKey()>
INTERFACE edge: $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(i35) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(i35) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r39 = interfaceinvoke $r38.<java.util.List: java.lang.Object get(int)>(i35) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $l17 = virtualinvoke $r40.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $r37 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getContent()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getContent()>
VIRTUAL edge: $r34 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getContent()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getContent()>
VIRTUAL edge: $r47 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getBackground()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getBackground()>
VIRTUAL edge: $r50 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getBorder()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getBorder()>
VIRTUAL edge: $r58 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getForeground()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.LayoutOutput getForeground()>
VIRTUAL edge: $r13 = virtualinvoke r3.<com.facebook.litho.DiffNode: com.facebook.litho.VisibilityOutput getVisibilityOutput()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: com.facebook.litho.VisibilityOutput getVisibilityOutput()>
VIRTUAL edge: $l36 = virtualinvoke $r37.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: virtualinvoke $r36.<com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>(r4, $i14, 0, $l36, z4) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>($r35) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: void setDisplayList(com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: $z14 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: boolean hasViewNodeInfo()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: boolean hasViewNodeInfo()>
VIRTUAL edge: $r33 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $z11 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: boolean hasViewNodeInfo()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: boolean hasViewNodeInfo()>
VIRTUAL edge: $r17 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: virtualinvoke $r33.<com.facebook.litho.ViewNodeInfo: void setBackground(com.facebook.litho.reference.Reference)>(r46) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ViewNodeInfo: void setBackground(com.facebook.litho.reference.Reference)>
VIRTUAL edge: virtualinvoke r44.<com.facebook.litho.DiffNode: void setBackground(com.facebook.litho.LayoutOutput)>(r49) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setBackground(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: virtualinvoke r44.<com.facebook.litho.DiffNode: void setContent(com.facebook.litho.LayoutOutput)>(r4) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setContent(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: virtualinvoke r44.<com.facebook.litho.DiffNode: void setBorder(com.facebook.litho.LayoutOutput)>(r52) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setBorder(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: virtualinvoke r44.<com.facebook.litho.DiffNode: void setForeground(com.facebook.litho.LayoutOutput)>(r60) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setForeground(com.facebook.litho.LayoutOutput)>
VIRTUAL edge: virtualinvoke r44.<com.facebook.litho.DiffNode: void setVisibilityOutput(com.facebook.litho.VisibilityOutput)>(r61) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setVisibilityOutput(com.facebook.litho.VisibilityOutput)>
VIRTUAL edge: $r29 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r53 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r23 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r29.<com.facebook.litho.ComponentLifecycle: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>($r30, r0, r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r29.<com.facebook.litho.ComponentLifecycle: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>($r30, r0, r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentLifecycle: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>
INTERFACE edge: $i12 = interfaceinvoke $r31.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i12 = interfaceinvoke $r31.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i12 = interfaceinvoke $r31.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: int size()>
SPECIAL edge: $r26 = specialinvoke r2.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()>
SPECIAL edge: $r25 = specialinvoke r2.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()>
VIRTUAL edge: virtualinvoke $r26.<com.facebook.litho.TransitionContext: void addTransitionKey(java.lang.String)>($r27) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TransitionContext: void addTransitionKey(java.lang.String)>
VIRTUAL edge: $z12 = virtualinvoke r53.<com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>
VIRTUAL edge: r54 = virtualinvoke $r23.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.TransitionSet onCreateTransition(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r24, r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.TransitionSet onCreateTransition(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r25.<com.facebook.litho.TransitionContext: void addAutoTransitions(com.facebook.litho.TransitionSet)>(r54) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.TransitionContext: void addAutoTransitions(com.facebook.litho.TransitionSet)>
SPECIAL edge: specialinvoke $r22.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: virtualinvoke $r21.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r17.<com.facebook.litho.ViewNodeInfo: void setForeground(android.graphics.drawable.Drawable)>(r57) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.ViewNodeInfo: void setForeground(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r15 = virtualinvoke $r14.<com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.DrawableReference$PropsBuilder drawable(android.graphics.drawable.Drawable)>(r57) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.DrawableReference$PropsBuilder drawable(android.graphics.drawable.Drawable)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.reference.DrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>
VIRTUAL edge: $l47 = virtualinvoke $r13.<com.facebook.litho.VisibilityOutput: long getId()>() in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.VisibilityOutput: long getId()>
VIRTUAL edge: virtualinvoke $r11.<com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)>(r61, $i10, $l47) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)>
INTERFACE edge: interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r61) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r61) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r12.<java.util.List: boolean add(java.lang.Object)>(r61) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r63) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r63) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r63) in <com.facebook.litho.LayoutState: void collectResults(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
CLINIT edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i11) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: l6 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)>(l2, i8) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: i8 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: int getSequenceFromId(long)>(l3) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: int getSequenceFromId(long)>
STATIC edge: $i7 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: int getLevelFromId(long)>(l3) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: int getLevelFromId(long)>
STATIC edge: l2 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)>(r0, i0, i1) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)>
STATIC edge: staticinvoke <com.facebook.litho.DrawableComponent$State: void access$000(com.facebook.litho.DrawableComponent$State,int)>(r1, $i0) in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: void access$000(com.facebook.litho.DrawableComponent$State,int)>
STATIC edge: staticinvoke <com.facebook.litho.DrawableComponent$State: void access$100(com.facebook.litho.DrawableComponent$State,int)>(r1, $i1) in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: void access$100(com.facebook.litho.DrawableComponent$State,int)>
CLINIT edge: $r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getOrCreateTransitionContext()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()>
CLINIT edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: l5 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)>(l1, i8) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)>
STATIC edge: $r5 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(0) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: i8 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: int getSequenceFromId(long)>(l2) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: int getSequenceFromId(long)>
STATIC edge: $i7 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: int getLevelFromId(long)>(l2) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: int getLevelFromId(long)>
STATIC edge: l1 = staticinvoke <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)>(r0, i0) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTransitionContextPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.LayoutState: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LayoutState: void <init>()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.LayoutState: void init(com.facebook.litho.ComponentContext)>(r0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutState acquireLayoutState(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.LayoutState: void init(com.facebook.litho.ComponentContext)>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.LayoutState: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean isEndToEndTestRun> in <com.facebook.litho.LayoutState: void <init>()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>(r3) in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: $r5 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: $r6 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.facebook.litho.ComponentLifecycle: boolean shouldUseDisplayList()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldUseDisplayList()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.facebook.litho.displaylist.DisplayList: boolean isValid()>() in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.displaylist.DisplayList: boolean isValid()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>($i3, $i2, $i1, $i0) in <com.facebook.litho.LayoutState: boolean shouldCreateDisplayList(com.facebook.litho.LayoutOutput,android.graphics.Rect)> ==> <com.facebook.litho.displaylist.DisplayList: void setBounds(int,int,int,int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i4 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i4 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: $i6 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i6 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i8 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i8 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: $r3 = virtualinvoke r1.<com.facebook.litho.InternalNode: java.lang.String getTestKey()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.InternalNode: java.lang.String getTestKey()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.TestOutput: void setTestKey(java.lang.String)>($r3) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.TestOutput: void setTestKey(java.lang.String)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.TestOutput: void setBounds(int,int,int,int)>(i2, i5, i7, i9) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.TestOutput: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.TestOutput: void setHostMarker(long)>($l10) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.TestOutput: void setHostMarker(long)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.TestOutput: void setLayoutOutputId(long)>($l11) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.TestOutput: void setLayoutOutputId(long)>
VIRTUAL edge: $l11 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput createTestOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i4 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i4 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: $i6 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i6 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i8 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i8 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getVisibleHandler()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getVisibleHandler()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getFocusedHandler()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getFocusedHandler()>
VIRTUAL edge: r4 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getUnfocusedHandler()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getUnfocusedHandler()>
VIRTUAL edge: r5 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getFullImpressionHandler()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getFullImpressionHandler()>
VIRTUAL edge: r6 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getInvisibleHandler()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.EventHandler getInvisibleHandler()>
VIRTUAL edge: $f0 = virtualinvoke r1.<com.facebook.litho.InternalNode: float getVisibleHeightRatio()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: float getVisibleHeightRatio()>
VIRTUAL edge: $f1 = virtualinvoke r1.<com.facebook.litho.InternalNode: float getVisibleWidthRatio()>() in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: float getVisibleWidthRatio()>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setComponent(com.facebook.litho.Component)>(r13) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setBounds(int,int,int,int)>(i2, i5, i7, i9) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setVisibleHeightRatio(float)>($f0) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setVisibleHeightRatio(float)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setVisibleWidthRatio(float)>($f1) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setVisibleWidthRatio(float)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setVisibleEventHandler(com.facebook.litho.EventHandler)>(r2) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setVisibleEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setFocusedEventHandler(com.facebook.litho.EventHandler)>(r3) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setFocusedEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setUnfocusedEventHandler(com.facebook.litho.EventHandler)>(r4) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setUnfocusedEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setFullImpressionEventHandler(com.facebook.litho.EventHandler)>(r5) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setFullImpressionEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r7.<com.facebook.litho.VisibilityOutput: void setInvisibleEventHandler(com.facebook.litho.EventHandler)>(r6) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput createVisibilityOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.VisibilityOutput: void setInvisibleEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.Component: void setScopedContext(com.facebook.litho.ComponentContext)>($r4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.Component: void setScopedContext(com.facebook.litho.ComponentContext)>
VIRTUAL edge: $r8 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r10 = virtualinvoke r5.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $l2 = virtualinvoke r5.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $z0 = virtualinvoke $r9.<com.facebook.litho.DrawableComponent: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>($r10, r1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableComponent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput,com.facebook.litho.reference.Reference,int)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean shouldDrawBorders()>() in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean shouldDrawBorders()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getBorderColor()>() in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: int getBorderColor()>
SPECIAL edge: specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>("This node does not support drawing border color") in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder color(int)>($i0) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder color(int)>
VIRTUAL edge: $r6 = virtualinvoke $r3.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderLeft(int)>($i1) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderLeft(int)>
VIRTUAL edge: $r9 = virtualinvoke $r6.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderTop(int)>($i2) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderTop(int)>
VIRTUAL edge: $r12 = virtualinvoke $r9.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderRight(int)>($i3) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderRight(int)>
VIRTUAL edge: $r15 = virtualinvoke $r12.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderBottom(int)>($i4) in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder borderBottom(int)>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>() in <com.facebook.litho.LayoutState: com.facebook.litho.reference.Reference getBorderColorDrawable(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.reference.BorderColorDrawableReference$PropsBuilder: com.facebook.litho.reference.Reference build()>
VIRTUAL edge: $l0 = virtualinvoke r1.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.LayoutState: void addLayoutOutputIdToPositionsMap(android.support.v4.util.LongSparseArray,com.facebook.litho.LayoutOutput,int)> ==> <com.facebook.litho.LayoutOutput: long getId()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.LayoutState: void addMountableOutput(com.facebook.litho.LayoutState,com.facebook.litho.LayoutOutput)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getImportantForAccessibility()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getImportantForAccessibility()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DrawableComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ViewCompatComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$MountType getMountType()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createGenericLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.HostComponent: com.facebook.litho.ComponentLifecycle$MountType getMountType()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
SPECIAL edge: $z1 = specialinvoke r2.<com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>(r0) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("We shouldn\'t insert a host as a parent of a View") in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r4.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.DiffNode: void setHost(com.facebook.litho.LayoutOutput)>(r3) in <com.facebook.litho.LayoutState: int addHostLayoutOutput(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setHost(com.facebook.litho.LayoutOutput)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>(r1) in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $z3 = virtualinvoke r1.<com.facebook.litho.InternalNode: boolean isForceViewWrapping()>() in <com.facebook.litho.LayoutState: boolean needsHostView(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: boolean isForceViewWrapping()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getLastWidthSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getLastWidthSpec()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: int getLastHeightSpec()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.InternalNode: int getLastHeightSpec()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.NoOpInternalNode: int getLastHeightSpec()>
VIRTUAL edge: $f0 = virtualinvoke r1.<com.facebook.litho.InternalNode: float getLastMeasuredWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredWidth()>
VIRTUAL edge: $f1 = virtualinvoke r1.<com.facebook.litho.InternalNode: float getLastMeasuredHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: float getLastMeasuredHeight()>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void setLastWidthSpec(int)>($i0) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setLastWidthSpec(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void setLastHeightSpec(int)>($i1) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setLastHeightSpec(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void setLastMeasuredWidth(float)>($f0) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setLastMeasuredWidth(float)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void setLastMeasuredHeight(float)>($f1) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setLastMeasuredHeight(float)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.DiffNode: void setComponent(com.facebook.litho.Component)>($r2) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void setComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.DiffNode: void addChild(com.facebook.litho.DiffNode)>(r0) in <com.facebook.litho.LayoutState: com.facebook.litho.DiffNode createDiffNode(com.facebook.litho.InternalNode,com.facebook.litho.DiffNode)> ==> <com.facebook.litho.DiffNode: void addChild(com.facebook.litho.DiffNode)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("TestOutput", 64, 1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.TestOutput: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestOutput acquireTestOutput()> ==> <com.facebook.litho.TestOutput: void <init>()>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.TestOutput: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.VisibilityOutput: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityOutput acquireVisibilityOutput()> ==> <com.facebook.litho.VisibilityOutput: void <init>()>
CLINIT edge: $r1 = new android.graphics.Rect in <com.facebook.litho.VisibilityOutput: void <init>()> ==> <android.graphics.Rect: void <clinit>()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>($r4, r3, r0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>(r6, $i2, i0, l1, z0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>
INTERFACE edge: $i3 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i3 = interfaceinvoke $r8.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput addDrawableLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,int,long,boolean)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setComponent(com.facebook.litho.Component)>(r0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setImportantForAccessibility(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setImportantForAccessibility(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setHostMarker(long)>($l1) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setHostMarker(long)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setHostTranslationX(int)>($i14) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setHostTranslationX(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setHostTranslationY(int)>($i15) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setHostTranslationY(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setNodeInfo(com.facebook.litho.NodeInfo)>($r4) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setNodeInfo(com.facebook.litho.NodeInfo)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setViewNodeInfo(com.facebook.litho.ViewNodeInfo)>(r10) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setViewNodeInfo(com.facebook.litho.ViewNodeInfo)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setBounds(int,int,int,int)>(i16, i17, i18, i19) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setBounds(int,int,int,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.LayoutOutput: void setFlags(int)>(i24) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: void setFlags(int)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i13) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i13) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i13) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r9 = virtualinvoke r8.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getX()>
VIRTUAL edge: $i4 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getX()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getX()>
VIRTUAL edge: $i6 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getY()>
VIRTUAL edge: $i6 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getY()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getY()>
VIRTUAL edge: $i7 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getWidth()>
VIRTUAL edge: $i7 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getWidth()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
VIRTUAL edge: $i8 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getHeight()>
VIRTUAL edge: $i8 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getHeight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: $i20 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingLeft()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getPaddingLeft()>
VIRTUAL edge: $i20 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingLeft()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getPaddingLeft()>
VIRTUAL edge: $i21 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingTop()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getPaddingTop()>
VIRTUAL edge: $i21 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingTop()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getPaddingTop()>
VIRTUAL edge: $i22 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingRight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getPaddingRight()>
VIRTUAL edge: $i22 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingRight()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getPaddingRight()>
VIRTUAL edge: $i23 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingBottom()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: int getPaddingBottom()>
VIRTUAL edge: $i23 = virtualinvoke r3.<com.facebook.litho.InternalNode: int getPaddingBottom()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.NoOpInternalNode: int getPaddingBottom()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.InternalNode: com.facebook.yoga.YogaDirection getResolvedLayoutDirection()>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)>(i9, i10, i11, $i23) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.ViewNodeInfo: void setLayoutDirection(com.facebook.yoga.YogaDirection)>($r5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ViewNodeInfo: void setLayoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)>(r3, i16, i17, i18, i19) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)>
VIRTUAL edge: virtualinvoke r10.<com.facebook.litho.ViewNodeInfo: void release()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createLayoutOutput(com.facebook.litho.Component,com.facebook.litho.LayoutState,com.facebook.litho.InternalNode,boolean,int,boolean)> ==> <com.facebook.litho.ViewNodeInfo: void release()>
CLINIT edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r1 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.ComponentsPools: android.graphics.Rect acquireRect()>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>(r1) in <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)> ==> <com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.LayoutOutput: void setId(long)>(0L) in <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)> ==> <com.facebook.litho.LayoutOutput: void setId(long)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.LayoutOutput: void setHostMarker(long)>(0L) in <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)> ==> <com.facebook.litho.LayoutOutput: void setHostMarker(long)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.LayoutOutput: void setUpdateState(int)>(2) in <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)> ==> <com.facebook.litho.LayoutOutput: void setUpdateState(int)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>(r2, $i0, 3, -1L, z1) in <com.facebook.litho.LayoutState: void calculateAndSetHostOutputIdAndUpdateState(com.facebook.litho.InternalNode,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState,boolean)> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.facebook.litho.InternalNode: int getImportantForAccessibility()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: int getImportantForAccessibility()>
VIRTUAL edge: $z0 = virtualinvoke r2.<com.facebook.litho.InternalNode: boolean isDuplicateParentStateEnabled()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isDuplicateParentStateEnabled()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: java.lang.String getTransitionKey()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ViewNodeInfo: void setTransitionKey(java.lang.String)>($r5) in <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput createHostLayoutOutput(com.facebook.litho.LayoutState,com.facebook.litho.InternalNode)> ==> <com.facebook.litho.ViewNodeInfo: void setTransitionKey(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getImportantForAccessibility()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.InternalNode: int getImportantForAccessibility()>
VIRTUAL edge: $z9 = virtualinvoke r2.<com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>
VIRTUAL edge: $z6 = virtualinvoke r2.<com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.NodeInfo: java.lang.Object getViewTag()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: java.lang.Object getViewTag()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>
VIRTUAL edge: $s1 = virtualinvoke r2.<com.facebook.litho.NodeInfo: short getFocusState()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.NodeInfo: short getFocusState()>
VIRTUAL edge: $r7 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z8 = virtualinvoke $r7.<com.facebook.litho.ComponentLifecycle: boolean implementsAccessibility()>() in <com.facebook.litho.LayoutState: boolean hasViewContent(com.facebook.litho.InternalNode,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: boolean implementsAccessibility()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.DiffNode: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.DiffNode acquireDiffNode()> ==> <com.facebook.litho.DiffNode: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.LayoutOutput: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.LayoutOutput acquireLayoutOutput()> ==> <com.facebook.litho.LayoutOutput: void <init>()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r10.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.WeakHashMap: void clear()>
VIRTUAL edge: virtualinvoke $r12.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r11) in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r12.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r11) in <com.facebook.litho.StateHandler: void release()> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r7.<java.util.Map: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.WeakHashMap: void clear()>
VIRTUAL edge: virtualinvoke $r9.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r8) in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r9.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r8) in <com.facebook.litho.StateHandler: void release()> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.HashSet: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <java.util.concurrent.CopyOnWriteArraySet: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Set: void clear()>() in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: virtualinvoke $r6.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r5) in <com.facebook.litho.StateHandler: void release()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r6.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>($r5) in <com.facebook.litho.StateHandler: void release()> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.facebook.litho.LithoView: boolean isMountStateDirty()>() in <com.facebook.litho.ComponentTree: boolean mountComponentIfDirty()> ==> <com.facebook.litho.LithoView: boolean isMountStateDirty()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void incrementalMountComponent()>() in <com.facebook.litho.ComponentTree: boolean mountComponentIfDirty()> ==> <com.facebook.litho.ComponentTree: void incrementalMountComponent()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>(null) in <com.facebook.litho.ComponentTree: boolean mountComponentIfDirty()> ==> <com.facebook.litho.ComponentTree: void mountComponent(android.graphics.Rect)>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.facebook.litho.NodeInfo: void release()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to release a recycled NodeInfo.") in <com.facebook.litho.NodeInfo: void release()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The NodeInfo being acquired wasn\'t correctly initialized.") in <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>() in <com.facebook.litho.ViewNodeInfo: void release()> ==> <java.util.concurrent.atomic.AtomicInteger: int decrementAndGet()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to release a recycled ViewNodeInfo.") in <com.facebook.litho.ViewNodeInfo: void release()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>() in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()> ==> <java.util.concurrent.atomic.AtomicInteger: int getAndIncrement()>
SPECIAL edge: specialinvoke $r2.<java.lang.IllegalStateException: void <init>(java.lang.String)>("The ViewNodeInfo being acquired wasn\'t correctly initialized.") in <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r11 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r4 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $i0 = virtualinvoke r10.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r9 = virtualinvoke r10.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i2) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
VIRTUAL edge: $i1 = virtualinvoke r10.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r3, r9) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r3, r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke $r8.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursively unmounting items from a ComponentHost, left some items behind maybe because not tracked by its MountState") in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r11.<com.facebook.litho.ComponentHost: void unmount(com.facebook.litho.MountItem)>(r0) in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmount(com.facebook.litho.MountItem)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z1 = virtualinvoke $r5.<com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>() in <com.facebook.litho.MountState: void unmountDisappearingItemChild(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.MountItem: boolean isBound()>() in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: boolean isBound()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MountItem: void setIsBound(boolean)>(0) in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r4, r2, r1) in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r4, r2, r1) in <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void unmountView(android.view.View)>(r6) in <com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmountView(android.view.View)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>(i1, r1) in <com.facebook.litho.ComponentHost: void unmountDisappearingItem(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.NodeInfo: void release()>() in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.NodeInfo: void release()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.ViewNodeInfo: void release()>() in <com.facebook.litho.MountItem: void release(android.content.Context)> ==> <com.facebook.litho.ViewNodeInfo: void release()>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)>($r2, z1) in <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClipping(java.lang.Object,boolean)> ==> <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)>
VIRTUAL edge: i0 = virtualinvoke r2.<java.util.ArrayList: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke r2.<java.util.ArrayList: void clear()>() in <com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <java.util.ArrayList: void clear()>
INTERFACE edge: interfaceinvoke $r5.<com.facebook.litho.DataFlowTransitionManager$OnMountItemAnimationComplete: void onMountItemAnimationComplete(java.lang.Object)>($r4) in <com.facebook.litho.DataFlowTransitionManager: void fireMountItemAnimationCompleteListeners(com.facebook.litho.DataFlowTransitionManager$AnimationState)> ==> <com.facebook.litho.MountState$1: void onMountItemAnimationComplete(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()>() in <com.facebook.litho.dataflow.DataFlowGraph: void doFrame(long)> ==> <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: void propagate(long)>(l0) in <com.facebook.litho.dataflow.DataFlowGraph: void doFrame(long)> ==> <com.facebook.litho.dataflow.DataFlowGraph: void propagate(long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedStates()>() in <com.facebook.litho.dataflow.DataFlowGraph: void doFrame(long)> ==> <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedStates()>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>(r3) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)>(r25) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.ComponentsPools: void release(java.util.ArrayDeque)>
STATIC edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r8) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.Collections: void reverse(java.util.List)>
STATIC edge: $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r25 = staticinvoke <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.ComponentsPools: java.util.ArrayDeque acquireArrayDeque()>
STATIC edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>
CLINIT edge: staticinvoke <java.util.Collections: void reverse(java.util.List)>($r8) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.Collections: void <clinit>()>
CLINIT edge: $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i12) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.lang.Integer: void <clinit>()>
CLINIT edge: $r21 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i5) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.lang.Integer: void <clinit>()>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <com.facebook.litho.animation.SequenceBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.SequenceBinding: void finish()> ==> <com.facebook.litho.animation.ParallelBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
VIRTUAL edge: r2 = virtualinvoke $r1.<java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>() in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r3 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionsAnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <com.facebook.litho.animation.SequenceBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBindingListener: void onFinish(com.facebook.litho.animation.AnimationBinding)>(r0) in <com.facebook.litho.animation.ParallelBinding: void finish()> ==> <com.facebook.litho.animation.ParallelBinding$1: void onFinish(com.facebook.litho.animation.AnimationBinding)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>() in <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ResourceCache getResourceCache()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>(r1, $r2) in <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ResourceResolver: void init(com.facebook.litho.ComponentContext,com.facebook.litho.ResourceCache)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ComponentLifecycle: void loadStyle(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>(r1, i0, i1, r3) in <com.facebook.litho.Component$Builder: void init(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void loadStyle(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TestComponentContext: void <init>(android.content.Context)>(r1) in <com.facebook.litho.TestComponentContext: com.facebook.litho.TestComponentContext makeNewCopy()> ==> <com.facebook.litho.TestComponentContext: void <init>(android.content.Context)>
VIRTUAL edge: $s24 = virtualinvoke r0.<com.facebook.litho.NodeInfo: short getFocusState()>() in <com.facebook.litho.NodeInfo: void updateWith(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.NodeInfo: short getFocusState()>
VIRTUAL edge: $s25 = virtualinvoke r0.<com.facebook.litho.NodeInfo: short getFocusState()>() in <com.facebook.litho.NodeInfo: void updateWith(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.NodeInfo: short getFocusState()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.ref.WeakReference: java.lang.Object get()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.ref.Reference: java.lang.Object get()>
VIRTUAL edge: $z2 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("background") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("foreground") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z4 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("direction") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z5 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("flex-direction") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z6 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("justify-content") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z7 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("align-items") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z8 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("align-self") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z9 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("align-content") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z10 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("position") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z11 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("flex-grow") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z12 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("flex-shrink") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z13 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("flex-basis") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z18 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("width") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z19 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("min-width") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z20 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("max-width") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z21 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("height") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z22 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("min-height") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z23 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>("max-height") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z17 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>($r59) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z16 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>($r47) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z15 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>($r35) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $z14 = virtualinvoke r150.<java.lang.String: boolean equals(java.lang.Object)>($r27) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: boolean equals(java.lang.Object)>
VIRTUAL edge: $i42 = virtualinvoke $r146.<java.lang.Integer: int intValue()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>($i42) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>($i42) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>($i41) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>($i41) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r142) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r142) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r138) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r138) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>($r134) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>($r134) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>($r130) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>($r130) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>($r126) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>($r126) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>($r122) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>($r122) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignContent(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>($r118) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>($r118) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>($f32) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexGrow(float)>($f32) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexGrow(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>($f31) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexShrink(float)>($f31) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexShrink(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAuto()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisAuto()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i40) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>($i40) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>($f29) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>($f29) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexBasisPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAuto()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthAuto()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i36) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>($i36) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>($f26) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPercent(float)>($f26) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i32) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPx(int)>($i32) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>($f23) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>($f23) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minWidthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i28) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>($i28) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>($f20) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>($f20) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxWidthPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAuto()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightAuto()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i24) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>($i24) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>($f17) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPercent(float)>($f17) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i20) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPx(int)>($i20) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>($f14) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>($f14) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode minHeightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i16) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>($i16) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPx(int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>($f11) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>($f11) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode maxHeightPercent(float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r161, $i12) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>(r161, $i12) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r161) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>(r161) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginAuto(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r161, $f8) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>(r161, $f8) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r164, $i8) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>(r164, $i8) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r164, $f5) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>(r164, $f5) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r167, $i4) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>(r167, $i4) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r167, $f2) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>(r167, $f2) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPercent(com.facebook.yoga.YogaEdge,float)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r170, $i0) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>(r170, $i0) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode borderWidthPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: r171 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: r176 = virtualinvoke r3.<com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.InternalNode: com.facebook.litho.Component getRootComponent()>
VIRTUAL edge: $i41 = virtualinvoke $r144.<java.lang.Integer: int intValue()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $r141 = virtualinvoke $r140.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r137 = virtualinvoke $r136.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r133 = virtualinvoke $r132.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r129 = virtualinvoke $r128.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r125 = virtualinvoke $r124.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r121 = virtualinvoke $r120.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $r117 = virtualinvoke $r116.<java.lang.String: java.lang.String toUpperCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toUpperCase()>
VIRTUAL edge: $f32 = virtualinvoke $r114.<java.lang.Float: float floatValue()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.Float: float floatValue()>
VIRTUAL edge: $f31 = virtualinvoke $r112.<java.lang.Float: float floatValue()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.Float: float floatValue()>
VIRTUAL edge: $r106 = virtualinvoke $r105.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i37 = virtualinvoke $r107.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r99 = virtualinvoke $r98.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i33 = virtualinvoke $r100.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r93 = virtualinvoke $r92.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i29 = virtualinvoke $r94.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r87 = virtualinvoke $r86.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i25 = virtualinvoke $r88.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r80 = virtualinvoke $r79.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i21 = virtualinvoke $r81.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r74 = virtualinvoke $r73.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i17 = virtualinvoke $r75.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
VIRTUAL edge: $r68 = virtualinvoke $r67.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i13 = virtualinvoke $r69.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
SPECIAL edge: specialinvoke $r54.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r55 = virtualinvoke $r54.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("margin-") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r57 = virtualinvoke $r56.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r58 = virtualinvoke $r55.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r57) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r59 = virtualinvoke $r58.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r61 = virtualinvoke $r60.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i9 = virtualinvoke $r62.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
SPECIAL edge: specialinvoke $r42.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r43 = virtualinvoke $r42.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("padding-") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r45 = virtualinvoke $r44.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r46 = virtualinvoke $r43.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r45) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r47 = virtualinvoke $r46.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r49 = virtualinvoke $r48.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i5 = virtualinvoke $r50.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
SPECIAL edge: specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("position-") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r33 = virtualinvoke $r32.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r34 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r33) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $r37 = virtualinvoke $r36.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $i1 = virtualinvoke $r38.<com.facebook.yoga.YogaUnit: int ordinal()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.yoga.YogaUnit: int ordinal()>
SPECIAL edge: specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("border-") in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.String: java.lang.String toLowerCase()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.String: java.lang.String toLowerCase()>
VIRTUAL edge: $r26 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.StringBuilder: java.lang.String toString()>
VIRTUAL edge: $f0 = virtualinvoke $r28.<java.lang.Float: float floatValue()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <java.lang.Float: float floatValue()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)>(r171, r173, $r17) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)>(r178, r180, $r12) in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)>
VIRTUAL edge: $r177 = virtualinvoke r176.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>() in <com.facebook.litho.DebugComponent: void applyOverrides()> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle$StateContainer getStateContainer()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.facebook.litho.ComponentLayout$ContainerBuilder: com.facebook.litho.ComponentLayout build()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayoutWithSizeSpec(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout build()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<com.facebook.litho.ComponentLayout$ContainerBuilder: com.facebook.litho.ComponentLayout build()>() in <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLayout onCreateLayout(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.ComponentLayout build()>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.facebook.litho.ComponentLifecycle: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <java.lang.Object: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) in <com.facebook.litho.ComponentLifecycle: boolean shouldUpdate(com.facebook.litho.Component,com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: boolean equals(java.lang.Object)>
SPECIAL edge: $r1 = specialinvoke r0.<com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference getDrawable()>() in <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference access$200(com.facebook.litho.DrawableComponent$State)> ==> <com.facebook.litho.DrawableComponent$State: com.facebook.litho.reference.Reference getDrawable()>
SPECIAL edge: specialinvoke r0.<android.support.v4.util.LruCache: void <init>(int)>(i0) in <com.facebook.litho.ResourceCache$1: void <init>(com.facebook.litho.ResourceCache,int)> ==> <android.support.v4.util.LruCache: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>(int)>(4) in <com.facebook.litho.StateHandler: void maybeInitPendingUpdates()> ==> <java.util.HashMap: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate)>(r1) in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate,com.facebook.litho.ComponentAccessibilityDelegate$1)> ==> <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void <init>()> ==> <android.graphics.Rect: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke r1.<android.view.View: android.content.Context getContext()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<android.view.ViewConfiguration: int getScaledTouchSlop()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.view.ViewConfiguration: int getScaledTouchSlop()>
VIRTUAL edge: virtualinvoke $r5.<android.graphics.Rect: void set(android.graphics.Rect)>(r4) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r6.<android.graphics.Rect: void set(android.graphics.Rect)>(r4) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r7.<android.graphics.Rect: void inset(int,int)>($i4, $i3) in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void init(android.view.View,android.graphics.Rect)> ==> <android.graphics.Rect: void inset(int,int)>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()>() in <com.facebook.litho.TouchExpansionDelegate: boolean maybeUnregisterFromScrap(int)> ==> <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()> ==> <android.graphics.Rect: void setEmpty()>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.TouchExpansionDelegate$InnerTouchDelegate: void release()> ==> <android.graphics.Rect: void setEmpty()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.MatrixDrawable: void <init>()>() in <com.facebook.litho.DrawableComponent: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.MatrixDrawable: void <init>()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to mount a MountSpec that doesn\'t implement @OnCreateMountContent") in <com.facebook.litho.ComponentLifecycle: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext)>(r1) in <com.facebook.litho.HostComponent: java.lang.Object onCreateMountContent(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentHost: void <init>(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke $r1.<java.util.ArrayList: void clear()>() in <com.facebook.litho.TransitionSet: void clear()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.TransitionSet: void clear()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: i0 = virtualinvoke r0.<android.content.res.TypedArray: int getIndexCount()>() in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getIndexCount()>
VIRTUAL edge: i1 = virtualinvoke r0.<android.content.res.TypedArray: int getIndex(int)>(i68) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getIndex(int)>
VIRTUAL edge: i69 = virtualinvoke r0.<android.content.res.TypedArray: int getLayoutDimension(int,int)>(i1, -1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getLayoutDimension(int,int)>
VIRTUAL edge: i70 = virtualinvoke r0.<android.content.res.TypedArray: int getLayoutDimension(int,int)>(i1, -1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getLayoutDimension(int,int)>
VIRTUAL edge: $i67 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i66 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i65 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i64 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i63 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i62 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i61 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i60 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i59 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i58 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i57 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i56 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i55 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i54 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i53 = virtualinvoke r0.<android.content.res.TypedArray: int getInt(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInt(int,int)>
VIRTUAL edge: $z2 = virtualinvoke r0.<android.content.res.TypedArray: boolean getBoolean(int,boolean)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: boolean getBoolean(int,boolean)>
VIRTUAL edge: $i51 = virtualinvoke r0.<android.content.res.TypedArray: int getColor(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getColor(int,int)>
VIRTUAL edge: $i50 = virtualinvoke r0.<android.content.res.TypedArray: int getResourceId(int,int)>(i1, -1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getResourceId(int,int)>
VIRTUAL edge: $i48 = virtualinvoke r0.<android.content.res.TypedArray: int getColor(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getColor(int,int)>
VIRTUAL edge: $i47 = virtualinvoke r0.<android.content.res.TypedArray: int getResourceId(int,int)>(i1, -1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getResourceId(int,int)>
VIRTUAL edge: $r25 = virtualinvoke r0.<android.content.res.TypedArray: java.lang.String getString(int)>(i1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: java.lang.String getString(int)>
VIRTUAL edge: $i45 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: $i44 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: $i43 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: $i42 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: $i41 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: $i40 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: f0 = virtualinvoke r0.<android.content.res.TypedArray: float getFloat(int,float)>(i1, -1.0F) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: float getFloat(int,float)>
VIRTUAL edge: $i38 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i37 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i36 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: $i35 = virtualinvoke r0.<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>(i1, 0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
VIRTUAL edge: i71 = virtualinvoke r0.<android.content.res.TypedArray: int getInteger(int,int)>(i1, -1) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <android.content.res.TypedArray: int getInteger(int,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i69) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode widthPx(int)>(i69) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode widthPx(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i70) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode heightPx(int)>(i70) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode heightPx(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r59, $i67) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r59, $i67) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r57, $i66) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r57, $i66) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r55, $i65) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r55, $i65) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r53, $i64) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r53, $i64) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r51, $i63) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r51, $i63) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r49, $i62) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r49, $i62) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r47, $i61) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>($r47, $i61) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode paddingPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r45, $i60) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r45, $i60) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r43, $i59) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r43, $i59) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r41, $i58) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r41, $i58) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r39, $i57) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r39, $i57) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r37, $i56) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r37, $i56) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r35, $i55) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r35, $i55) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r33, $i54) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>($r33, $i54) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode marginPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>($i53) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>($i53) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode importantForAccessibility(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>($z2) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>($z2) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode duplicateParentState(boolean)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>($i51) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundColor(int)>($i51) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundColor(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>($i50) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode backgroundRes(int)>($i50) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode backgroundRes(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>($i48) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundColor(int)>($i48) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundColor(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>($i47) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode foregroundRes(int)>($i47) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode foregroundRes(int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r25) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>($r25) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode contentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r23) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>($r23) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flexDirection(com.facebook.yoga.YogaFlexDirection)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>($r21) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>($r21) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode wrap(com.facebook.yoga.YogaWrap)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>($r19) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>($r19) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode justifyContent(com.facebook.yoga.YogaJustify)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>($r17) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>($r17) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignItems(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>($r15) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>($r15) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode alignSelf(com.facebook.yoga.YogaAlign)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>($r13) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>($r13) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionType(com.facebook.yoga.YogaPositionType)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode flex(float)>(f0) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode flex(float)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r10, $i38) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r10, $i38) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r8, $i37) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r8, $i37) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r6, $i36) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r6, $i36) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r4, $i35) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>($r4, $i35) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode positionPx(com.facebook.yoga.YogaEdge,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r2) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>($r2) in <com.facebook.litho.InternalNode: void applyAttributes(android.content.res.TypedArray)> ==> <com.facebook.litho.NoOpInternalNode: com.facebook.litho.InternalNode layoutDirection(com.facebook.yoga.YogaDirection)>
VIRTUAL edge: virtualinvoke r2.<android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>(i0, $r3) in <com.facebook.litho.TypedArrayUtils: boolean isColorAttribute(android.content.res.TypedArray,int)> ==> <android.content.res.TypedArray: boolean getValue(int,android.util.TypedValue)>
SPECIAL edge: specialinvoke $r0.<android.util.TypedValue: void <init>()>() in <com.facebook.litho.TypedArrayUtils: void <clinit>()> ==> <android.util.TypedValue: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentsPools$PoolsActivityCallback: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable)>($r7) in <com.facebook.litho.DrawableComponent: void onMount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.MatrixDrawable: void mount(android.graphics.drawable.Drawable)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.MatrixDrawable: void bind(int,int)>($i0, $i1) in <com.facebook.litho.DrawableComponent: void onBind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.MatrixDrawable: void bind(int,int)>
SPECIAL edge: $i0 = specialinvoke r0.<com.facebook.litho.DrawableComponent$State: int getDrawableWidth()>() in <com.facebook.litho.DrawableComponent$State: int access$300(com.facebook.litho.DrawableComponent$State)> ==> <com.facebook.litho.DrawableComponent$State: int getDrawableWidth()>
SPECIAL edge: $i0 = specialinvoke r0.<com.facebook.litho.DrawableComponent$State: int getDrawableHeight()>() in <com.facebook.litho.DrawableComponent$State: int access$400(com.facebook.litho.DrawableComponent$State)> ==> <com.facebook.litho.DrawableComponent$State: int getDrawableHeight()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getMountedDrawable()>() in <com.facebook.litho.DrawableComponent: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.MatrixDrawable: android.graphics.drawable.Drawable getMountedDrawable()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.MatrixDrawable: void unmount()>() in <com.facebook.litho.DrawableComponent: void onUnmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)> ==> <com.facebook.litho.MatrixDrawable: void unmount()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleComponentAndSpec(int,int,int)>(i0, i1, i2) in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState,int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleComponentAndSpec(int,int,int)>
VIRTUAL edge: $z1 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>() in <com.facebook.litho.ComponentTree: boolean isCompatibleComponentAndSpec(com.facebook.litho.LayoutState,int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleAccessibility()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)>($r3) in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(java.util.List)> ==> <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r0.<java.util.List: int size()>() in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <java.util.ArrayList: java.lang.Object get(int)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)>($r4) in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.RenderState: void recordRenderInfo(java.util.List)> ==> <com.facebook.litho.internal.ArraySet: void clear()>
SPECIAL edge: specialinvoke $r40.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Trying to mount a null layoutState") in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r11 = virtualinvoke r3.<com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: r5 = virtualinvoke $r4.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.LayoutState: int getComponentTreeId()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getComponentTreeId()>
VIRTUAL edge: $z13 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean shouldAnimateTransitions()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: boolean shouldAnimateTransitions()>
VIRTUAL edge: $z14 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean hasTransitionContext()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: boolean hasTransitionContext()>
VIRTUAL edge: $r37 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>
VIRTUAL edge: i1 = virtualinvoke r0.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: r26 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i10) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void prepareTransitionManager(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void prepareTransitionManager(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void suppressInvalidationsOnHosts(boolean)>(1) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void suppressInvalidationsOnHosts(boolean)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)>
SPECIAL edge: $z12 = specialinvoke r1.<com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)>(r0, r7) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)>
VIRTUAL edge: r29 = virtualinvoke r1.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i10) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: $z10 = specialinvoke r1.<com.facebook.litho.MountState: boolean isMountedHostWithChildContent(com.facebook.litho.MountItem)>(r29) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isMountedHostWithChildContent(com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>(i10, r26, r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>($r34, i10, $r33) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
SPECIAL edge: z8 = specialinvoke r1.<com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)>(r26, r29, $z20, r5, i0, i10) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)>(r0, r7) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)>(r0, r7) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)>(r0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void suppressInvalidationsOnHosts(boolean)>(0) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void suppressInvalidationsOnHosts(boolean)>
VIRTUAL edge: virtualinvoke $r36.<com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)>($r37) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)>
VIRTUAL edge: r27 = virtualinvoke r26.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r35 = virtualinvoke r26.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r32 = virtualinvoke r26.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r28 = virtualinvoke r27.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r28 = virtualinvoke r27.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r28 = virtualinvoke r27.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r28 = virtualinvoke r27.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: virtualinvoke $r25.<android.graphics.Rect: void set(android.graphics.Rect)>(r7) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke $r24.<com.facebook.litho.DataFlowTransitionManager: void runTransitions()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.DataFlowTransitionManager: void runTransitions()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", $r12) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("mounted_count", $r14) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("unmounted_count", $r16) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("updated_count", $r18) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("no_op_count", $r20) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r41.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("is_dirty", $r21) in <com.facebook.litho.MountState: void mount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
CLINIT edge: $r3 = new com.facebook.litho.DataFlowTransitionManager in <com.facebook.litho.MountState: void prepareTransitionManager(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
CLINIT edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <java.lang.String: void <clinit>()>
STATIC edge: $r21 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i6) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i6 = staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$1000(com.facebook.litho.MountState$PrepareMountStats)>(r8) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$1000(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: $r20 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i5) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i5 = staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$900(com.facebook.litho.MountState$PrepareMountStats)>(r8) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$900(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: $r19 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i4) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <java.lang.String: java.lang.String valueOf(int)>
STATIC edge: $i4 = staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$800(com.facebook.litho.MountState$PrepareMountStats)>(r8) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$800(com.facebook.litho.MountState$PrepareMountStats)>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)>(r10, $r13, r2) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)>(r10, $r13, r2) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)>
CLINIT edge: r16 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)>(r0, $r2) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState$MountStats: int access$508(com.facebook.litho.MountState$MountStats)>($r9) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$MountStats: int access$508(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>(r21, $i4, $i3, $i2, $i1, 1) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: r16 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)>(r0, $r13) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)>
STATIC edge: r16 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)>(r0, $r2) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState$MountStats: int access$608(com.facebook.litho.MountState$MountStats)>($r7) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState$MountStats: int access$608(com.facebook.litho.MountState$MountStats)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r4, r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>
STATIC edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r21) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(android.content.Context,com.facebook.litho.MountItem)>(r4, r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z2 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r21) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: z1 = staticinvoke <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)>(r0, r2, z0, $r7, $r6, r5) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)>($r14, $r16, $i0, $r17) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void maybeSetDrawableState(android.view.View,android.graphics.drawable.Drawable,int,com.facebook.litho.NodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>(r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void maybeInvalidateAccessibilityState(com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)>(r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>(r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void unsetViewAttributes(com.facebook.litho.MountItem)>
STATIC edge: $z3 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r26) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: z1 = staticinvoke <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)>(r0, r2, z0, $r7, $r6, r5) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)>
CLINIT edge: $z3 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r26) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.Component: void <clinit>()>
CLINIT edge: $r9 = <com.facebook.litho.MountState: android.graphics.Rect sTempRect> in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>(r18) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>(r5) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)>(r7) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnInvisible(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)>(r6) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>(r5) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnUnfocused(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)>(r4) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)>
STATIC edge: staticinvoke <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)>(r3) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)>
STATIC edge: r18 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)>(r7, r5) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.VisibilityItem)>(r18) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r18 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)>(r7, r5) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)>(r29) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r9 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)>(r29) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)>
CLINIT edge: r9 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)>(r3, r5) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setImportantForAccessibility(android.view.View,int)>(r3, $i0) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setImportantForAccessibility(android.view.View,int)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setFocusable(android.view.View,short)>(r3, $s1) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setFocusable(android.view.View,short)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)>(r3, $r12) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)>(r3, $r11) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewTag(android.view.View,java.lang.Object)>(r3, $r10) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setViewTag(android.view.View,java.lang.Object)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setAccessibilityDelegate(android.view.View,com.facebook.litho.NodeInfo)>(r3, r4) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setAccessibilityDelegate(android.view.View,com.facebook.litho.NodeInfo)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setInterceptTouchHandler(com.facebook.litho.EventHandler,android.view.View)>($r9, r3) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setInterceptTouchHandler(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)>($r8, r3) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)>($r7, r3) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)>($r6, r3) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void setImportantForAccessibility(android.view.View,int)>(r3, $i0) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)>($r6, r3) in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)>(r0, r1) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)>(r0, r1) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
STATIC edge: staticinvoke <com.facebook.litho.ThreadUtils: void assertMainThread()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ThreadUtils: void assertMainThread()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r3 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sVisibilityItemPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTestItemPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTestItemPool> in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.MountState$2: int[] $SwitchMap$com$facebook$yoga$YogaDirection> in <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.MountState$2: void <clinit>()>
CLINIT edge: $i0 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.MountState: void setViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.os.Build$VERSION: void <clinit>()>
CLINIT edge: staticinvoke <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>(r2, $r6) in <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>(r2, $r6) in <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.MountState: void setBackgroundCompat(android.view.View,android.graphics.drawable.Drawable)>
STATIC edge: $r5 = staticinvoke <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>($r4, r1) in <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.reference.Reference: java.lang.Object acquire(com.facebook.litho.ComponentContext,com.facebook.litho.reference.Reference)>
STATIC edge: staticinvoke <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>(r0, i0) in <com.facebook.litho.MountState: void setImportantForAccessibility(android.view.View,int)> ==> <android.support.v4.view.ViewCompat: void setImportantForAccessibility(android.view.View,int)>
CLINIT edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0) in <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)> ==> <android.text.TextUtils: void <clinit>()>
STATIC edge: $z0 = staticinvoke <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>(r0) in <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)> ==> <android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)>(r1, $r2) in <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentTouchListener getComponentTouchListener(android.view.View)>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)>(r1, $r2) in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentLongClickListener getComponentLongClickListener(android.view.View)>
CLINIT edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)>(r1, $r2) in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)>
STATIC edge: r3 = staticinvoke <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>(r1) in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentClickListener getComponentClickListener(android.view.View)>
CLINIT edge: $i1 = staticinvoke <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)>(r3) in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: $i3 = staticinvoke <com.facebook.litho.MountState: int getHeightForMountedContent(java.lang.Object)>(r3) in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: int getHeightForMountedContent(java.lang.Object)>
STATIC edge: $i1 = staticinvoke <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)>(r3) in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)>
CLINIT edge: <com.facebook.litho.MountState$2: int[] $SwitchMap$com$facebook$yoga$YogaDirection> = $r1 in <com.facebook.litho.MountState$2: void <clinit>()> ==> <com.facebook.litho.MountState$2: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection[] values()>() in <com.facebook.litho.MountState$2: void <clinit>()> ==> <com.facebook.yoga.YogaDirection: com.facebook.yoga.YogaDirection[] values()>
CLINIT edge: $r5 = <com.facebook.litho.MountState$2: int[] $SwitchMap$com$facebook$yoga$YogaDirection> in <com.facebook.litho.MountState$2: void <clinit>()> ==> <com.facebook.litho.MountState$2: void <clinit>()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r8 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r10 = virtualinvoke r3.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)>($r10, $r9) in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r5.<com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)>($r10, $r7) in <com.facebook.litho.MountState: void recordMountedItemsWithTransitionKeys(com.facebook.litho.DataFlowTransitionManager,android.support.v4.util.LongSparseArray,boolean)> ==> <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)>
CLINIT edge: $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
CLINIT edge: $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.Float: void <clinit>()>
STATIC edge: $r11 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f0) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.Float: java.lang.Float valueOf(float)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i8 = virtualinvoke r6.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i14 = virtualinvoke r6.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: virtualinvoke r4.<android.graphics.Rect: void set(int,int,int,int)>($i3, $i7, $i13, $i19) in <com.facebook.litho.MountState: void mountItemIncrementally(com.facebook.litho.MountItem,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: boolean canMountIncrementally(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>() in <com.facebook.litho.MountState: boolean canMountIncrementally(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState$MountStats: void reset()>() in <com.facebook.litho.MountState$MountStats: void access$200(com.facebook.litho.MountState$MountStats)> ==> <com.facebook.litho.MountState$MountStats: void reset()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: java.util.List getComponentsNeedingPreviousRenderInfo()>
VIRTUAL edge: $r7 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r5 = virtualinvoke r3.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: r6 = virtualinvoke $r4.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.TransitionSet onCreateTransition(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>($r5, r3) in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.TransitionSet onCreateTransition(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.TransitionContext: void addAutoTransitions(com.facebook.litho.TransitionSet)>(r6) in <com.facebook.litho.MountState: void collectPendingAnimations(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionContext: void addAutoTransitions(com.facebook.litho.TransitionSet)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>(r2) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <com.facebook.litho.LithoView: void performIncrementalMount(android.graphics.Rect)>
VIRTUAL edge: $i0 = virtualinvoke r5.<android.view.ViewGroup: int getChildCount()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.ViewGroup: int getChildCount()>
VIRTUAL edge: r1 = virtualinvoke r5.<android.view.ViewGroup: android.view.View getChildAt(int)>(i25) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.ViewGroup: android.view.View getChildAt(int)>
VIRTUAL edge: $i1 = virtualinvoke r1.<android.view.View: int getLeft()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i2 = virtualinvoke r1.<android.view.View: int getTop()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i3 = virtualinvoke r1.<android.view.View: int getRight()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i4 = virtualinvoke r1.<android.view.View: int getBottom()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $i6 = virtualinvoke r1.<android.view.View: int getLeft()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getLeft()>
VIRTUAL edge: $i10 = virtualinvoke r1.<android.view.View: int getTop()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getTop()>
VIRTUAL edge: $i13 = virtualinvoke r1.<android.view.View: int getWidth()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i14 = virtualinvoke r1.<android.view.View: int getRight()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getRight()>
VIRTUAL edge: $i19 = virtualinvoke r1.<android.view.View: int getHeight()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $i20 = virtualinvoke r1.<android.view.View: int getBottom()>() in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.view.View: int getBottom()>
VIRTUAL edge: $z2 = virtualinvoke r2.<android.graphics.Rect: boolean intersects(int,int,int,int)>($i1, $i2, $i3, $i4) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.graphics.Rect: boolean intersects(int,int,int,int)>
VIRTUAL edge: virtualinvoke r3.<android.graphics.Rect: void set(int,int,int,int)>($i8, $i12, $i18, $i24) in <com.facebook.litho.MountState: void mountViewIncrementally(android.view.View,android.graphics.Rect)> ==> <android.graphics.Rect: void set(int,int,int,int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.dataflow.GraphBinding$Bindings: void <init>()> ==> <java.util.ArrayList: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitStateContainers()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitStateContainers()> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r6.<java.util.HashMap: void <init>(int)>(4) in <com.facebook.litho.StateHandler: void maybeInitStateContainers()> ==> <java.util.HashMap: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: java.lang.Object acquire()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>() in <com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()> ==> <android.support.v4.util.Pools$SynchronizedPool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r6.<java.util.HashSet: void <init>(int)>(4) in <com.facebook.litho.StateHandler: void maybeInitKnownGlobalKeys()> ==> <java.util.HashSet: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentTree$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r1, r2) in <com.facebook.litho.ComponentTree$Builder: void <init>(com.facebook.litho.ComponentContext,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentTree$Builder: void init(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context)>(r1) in <com.facebook.litho.TestComponentContext: void <init>(android.content.Context)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>(r1, r2) in <com.facebook.litho.TestComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)> ==> <com.facebook.litho.ComponentContext: void <init>(android.content.Context,com.facebook.litho.StateHandler)>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke $r3.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
INTERFACE edge: $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Set keySet()>
INTERFACE edge: $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashMap: java.util.Set keySet()>
INTERFACE edge: $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.Hashtable: java.util.Set keySet()>
INTERFACE edge: $r4 = interfaceinvoke r0.<java.util.Map: java.util.Set keySet()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.WeakHashMap: java.util.Set keySet()>
INTERFACE edge: $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r11 = interfaceinvoke r0.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r6 = interfaceinvoke r5.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r9 = interfaceinvoke $r8.<java.util.Map: java.lang.Object get(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $i0 = interfaceinvoke r10.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r10.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke r10.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke r10.<java.util.List: boolean removeAll(java.util.Collection)>(r12) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.AbstractCollection: boolean removeAll(java.util.Collection)>
INTERFACE edge: interfaceinvoke r10.<java.util.List: boolean removeAll(java.util.Collection)>(r12) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean removeAll(java.util.Collection)>
INTERFACE edge: $i1 = interfaceinvoke r12.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r12.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i1 = interfaceinvoke r12.<java.util.List: int size()>() in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.Hashtable: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r13.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r7) in <com.facebook.litho.StateHandler: void clearStateUpdates(java.util.Map)> ==> <java.util.WeakHashMap: java.lang.Object remove(java.lang.Object)>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.HashMap: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.Hashtable: boolean isEmpty()>
INTERFACE edge: $z0 = interfaceinvoke r0.<java.util.Map: boolean isEmpty()>() in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.WeakHashMap: boolean isEmpty()>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.StateHandler: void maybeInitStateContainers()>() in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <com.facebook.litho.StateHandler: void maybeInitStateContainers()>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.concurrent.ConcurrentHashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.HashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.Hashtable: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r0) in <com.facebook.litho.StateHandler: void updateCurrentComponentsWithState(java.util.Map)> ==> <java.util.WeakHashMap: void putAll(java.util.Map)>
INTERFACE edge: interfaceinvoke r0.<java.util.List: void clear()>() in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <java.util.LinkedList: void clear()>
INTERFACE edge: interfaceinvoke r0.<java.util.List: void clear()>() in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <java.util.concurrent.CopyOnWriteArrayList: void clear()>
INTERFACE edge: interfaceinvoke r0.<java.util.List: void clear()>() in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <com.facebook.litho.reference.DrawableResourcesCache$SimplePoolWithCount: boolean release(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>(r0) in <com.facebook.litho.StateHandler: void releaseStateUpdatesList(java.util.List)> ==> <android.support.v4.util.Pools$SynchronizedPool: boolean release(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TestComponentContext$1: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.Component: void markLayoutStarted()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Duplicate layout of a component: ") in <com.facebook.litho.Component: void markLayoutStarted()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r0) in <com.facebook.litho.Component: void markLayoutStarted()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.Component: void markLayoutStarted()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r1.<java.lang.IllegalStateException: void <init>(java.lang.String)>($r5) in <com.facebook.litho.Component: void markLayoutStarted()> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getMountableOutputCount()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getMountableOutputCount()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getMountableOutputCount()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r1.<java.lang.ref.WeakReference: void <init>(java.lang.Object)>(r2) in <com.facebook.litho.DisplayListPrefetcher: void addLayoutState(com.facebook.litho.LayoutState)> ==> <java.lang.ref.WeakReference: void <init>(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>($r1) in <com.facebook.litho.DisplayListPrefetcher: void addLayoutState(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r3.<java.util.Queue: boolean add(java.lang.Object)>($r1) in <com.facebook.litho.DisplayListPrefetcher: void addLayoutState(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
VIRTUAL edge: i5 = virtualinvoke $r5.<java.lang.Integer: int intValue()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void setUpdateState(int)>(b9) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutOutput: void setUpdateState(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void setId(long)>(l6) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetLayoutOutputIdAndUpdateState(com.facebook.litho.LayoutOutput,int,int,long,boolean)> ==> <com.facebook.litho.LayoutOutput: void setId(long)>
INTERFACE edge: $i0 = interfaceinvoke r2.<com.facebook.litho.ComponentLayout: int getWidth()>() in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: int getWidth()>
INTERFACE edge: $i0 = interfaceinvoke r2.<com.facebook.litho.ComponentLayout: int getWidth()>() in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: int getWidth()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.facebook.litho.ComponentLayout: int getHeight()>() in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.InternalNode: int getHeight()>
INTERFACE edge: $i1 = interfaceinvoke r2.<com.facebook.litho.ComponentLayout: int getHeight()>() in <com.facebook.litho.DrawableComponent: void onBoundsDefined(com.facebook.litho.ComponentContext,com.facebook.litho.ComponentLayout,com.facebook.litho.Component)> ==> <com.facebook.litho.NoOpInternalNode: int getHeight()>
VIRTUAL edge: virtualinvoke $r2.<java.util.HashSet: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.TransitionContext: void addTransitionKey(java.lang.String)> ==> <java.util.HashSet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.TransitionSet: void mergeIn(com.facebook.litho.TransitionSet)>(r1) in <com.facebook.litho.TransitionContext: void addAutoTransitions(com.facebook.litho.TransitionSet)> ==> <com.facebook.litho.TransitionSet: void mergeIn(com.facebook.litho.TransitionSet)>
VIRTUAL edge: i4 = virtualinvoke $r7.<java.lang.Integer: int intValue()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.VisibilityOutput: void setId(long)>(l5) in <com.facebook.litho.LayoutStateOutputIdCalculator: void calculateAndSetVisibilityOutputId(com.facebook.litho.VisibilityOutput,int,long)> ==> <com.facebook.litho.VisibilityOutput: void setId(long)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Sequence must be non-negative and no greater than 65535 actual sequence ") in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateId(long,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level must be non-negative and no greater than 255 actual level ") in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $i11 = virtualinvoke $r8.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateLayoutOutputBaseId(com.facebook.litho.LayoutOutput,int,int)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DrawableComponent$State: void setDrawableWidth(int)>(i0) in <com.facebook.litho.DrawableComponent$State: void access$000(com.facebook.litho.DrawableComponent$State,int)> ==> <com.facebook.litho.DrawableComponent$State: void setDrawableWidth(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DrawableComponent$State: void setDrawableHeight(int)>(i0) in <com.facebook.litho.DrawableComponent$State: void access$100(com.facebook.litho.DrawableComponent$State,int)> ==> <com.facebook.litho.DrawableComponent$State: void setDrawableHeight(int)>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.TransitionContext: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TransitionContext acquireTransitionContext()> ==> <com.facebook.litho.TransitionContext: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Level must be non-negative and no greater than 255 actual level ") in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r4) in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.facebook.litho.VisibilityOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r7 = virtualinvoke r5.<com.facebook.litho.VisibilityOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $i7 = virtualinvoke $r8.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: long calculateVisibilityOutputBaseId(com.facebook.litho.VisibilityOutput,int)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r3.<java.util.ArrayList: void <init>(int)>(8) in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>(int)>(8) in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
SPECIAL edge: specialinvoke $r5.<android.support.v4.util.LongSparseArray: void <init>(int)>(8) in <com.facebook.litho.LayoutState: void <init>()> ==> <android.support.v4.util.LongSparseArray: void <init>(int)>
SPECIAL edge: specialinvoke $r6.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r7.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r8.<java.util.LinkedList: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.LinkedList: void <init>()>
SPECIAL edge: specialinvoke $r9.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(-1) in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.concurrent.atomic.AtomicInteger: void <init>(int)>
SPECIAL edge: specialinvoke $r10.<com.facebook.litho.LayoutStateOutputIdCalculator: void <init>()>() in <com.facebook.litho.LayoutState: void <init>()> ==> <com.facebook.litho.LayoutStateOutputIdCalculator: void <init>()>
SPECIAL edge: specialinvoke $r12.<java.util.ArrayList: void <init>(int)>(8) in <com.facebook.litho.LayoutState: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.ComponentContext: com.facebook.litho.StateHandler getStateHandler()>() in <com.facebook.litho.LayoutState: void init(com.facebook.litho.ComponentContext)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.StateHandler getStateHandler()>
VIRTUAL edge: virtualinvoke $r4.<java.util.concurrent.atomic.AtomicInteger: void set(int)>(1) in <com.facebook.litho.LayoutState: void init(com.facebook.litho.ComponentContext)> ==> <java.util.concurrent.atomic.AtomicInteger: void set(int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.TestOutput: void setBounds(int,int,int,int)> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.VisibilityOutput: void setBounds(int,int,int,int)> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<com.facebook.litho.InternalNode: boolean isNestedTreeHolder()>() in <com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: boolean isNestedTreeHolder()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>() in <com.facebook.litho.LayoutState: boolean isLayoutRoot(com.facebook.litho.InternalNode)> ==> <com.facebook.litho.InternalNode: com.facebook.litho.InternalNode getNestedTree()>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.DiffNode: void addChild(com.facebook.litho.DiffNode)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.DiffNode: void addChild(com.facebook.litho.DiffNode)> ==> <java.util.concurrent.CopyOnWriteArrayList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.DiffNode: void addChild(com.facebook.litho.DiffNode)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TestOutput: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.TestOutput: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.VisibilityOutput: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.graphics.Rect: void <init>()>() in <com.facebook.litho.VisibilityOutput: void <init>()> ==> <android.graphics.Rect: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("NodeInfo set more than once on the same LayoutOutput.") in <com.facebook.litho.LayoutOutput: void setNodeInfo(com.facebook.litho.NodeInfo)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>() in <com.facebook.litho.LayoutOutput: void setNodeInfo(com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.NodeInfo acquireRef()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Try to set a new ViewNodeInfo in a LayoutOutput that is already initialized with one.") in <com.facebook.litho.LayoutOutput: void setViewNodeInfo(com.facebook.litho.ViewNodeInfo)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()>() in <com.facebook.litho.LayoutOutput: void setViewNodeInfo(com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.ViewNodeInfo acquireRef()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.LayoutOutput: void setBounds(int,int,int,int)> ==> <android.graphics.Rect: void set(int,int,int,int)>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Padding already initialized for this ViewNodeInfo.") in <com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.Rect: void set(int,int,int,int)>(i0, i1, i2, i3) in <com.facebook.litho.ViewNodeInfo: void setPadding(int,int,int,int)> ==> <android.graphics.Rect: void set(int,int,int,int)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.InternalNode: boolean hasTouchExpansion()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.InternalNode: boolean hasTouchExpansion()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getTouchExpansionLeft()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.InternalNode: int getTouchExpansionLeft()>
VIRTUAL edge: i1 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getTouchExpansionTop()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.InternalNode: int getTouchExpansionTop()>
VIRTUAL edge: i2 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getTouchExpansionRight()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.InternalNode: int getTouchExpansionRight()>
VIRTUAL edge: i3 = virtualinvoke r0.<com.facebook.litho.InternalNode: int getTouchExpansionBottom()>() in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <com.facebook.litho.InternalNode: int getTouchExpansionBottom()>
SPECIAL edge: specialinvoke $r4.<java.lang.IllegalStateException: void <init>(java.lang.String)>("ExpandedTouchBounds already initialized for this ViewNodeInfo.") in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<android.graphics.Rect: void set(int,int,int,int)>($i11, $i10, $i9, $i8) in <com.facebook.litho.ViewNodeInfo: void setExpandedTouchBounds(com.facebook.litho.InternalNode,int,int,int,int)> ==> <android.graphics.Rect: void set(int,int,int,int)>
STATIC edge: $z1 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getTouchExpansionLeft()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f1) in <com.facebook.litho.InternalNode: int getTouchExpansionLeft()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getTouchExpansionTop()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $z1 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>($f0) in <com.facebook.litho.InternalNode: int getTouchExpansionRight()> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f1) in <com.facebook.litho.InternalNode: int getTouchExpansionRight()> ==> <com.facebook.litho.FastMath: int round(float)>
STATIC edge: $i0 = staticinvoke <com.facebook.litho.FastMath: int round(float)>($f0) in <com.facebook.litho.InternalNode: int getTouchExpansionBottom()> ==> <com.facebook.litho.FastMath: int round(float)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DiffNode: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(4) in <com.facebook.litho.DiffNode: void <init>()> ==> <java.util.ArrayList: void <init>(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)>(i1, r1) in <com.facebook.litho.ComponentHost: void unmount(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ComponentHost: void setClipChildren(boolean)>(z2) in <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)> ==> <android.view.ViewGroup: void setClipChildren(boolean)>
VIRTUAL edge: r1 = virtualinvoke r0.<android.view.View: android.view.ViewParent getParent()>() in <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)> ==> <android.view.View: android.view.ViewParent getParent()>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)>($r3, z2) in <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)> ==> <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClippingForView(android.view.View,boolean)>
VIRTUAL edge: virtualinvoke $r1.<java.util.ArrayList: void clear()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.concurrent.CopyOnWriteArrayList: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
SPECIAL edge: specialinvoke $r4.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: i9 = virtualinvoke r23.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r20 = virtualinvoke r23.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i8) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: i5 = virtualinvoke r24.<com.facebook.litho.dataflow.ValueNode: int getOutputCount()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.ValueNode: int getOutputCount()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r24) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: $z3 = virtualinvoke r3.<com.facebook.litho.internal.ArraySet: boolean isEmpty()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean isEmpty()>
VIRTUAL edge: $i2 = virtualinvoke r3.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.internal.ArraySet: int size()>
SPECIAL edge: specialinvoke $r17.<com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>("Graph has nodes, but they represent a cycle with no leaf nodes!") in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r25.<java.util.ArrayDeque: boolean addAll(java.util.Collection)>(r3) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.AbstractCollection: boolean addAll(java.util.Collection)>
VIRTUAL edge: $z5 = virtualinvoke r25.<java.util.ArrayDeque: boolean isEmpty()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayDeque: boolean isEmpty()>
VIRTUAL edge: $r10 = virtualinvoke r25.<java.util.ArrayDeque: java.lang.Object pollFirst()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayDeque: java.lang.Object pollFirst()>
VIRTUAL edge: virtualinvoke r25.<java.util.ArrayDeque: void addLast(java.lang.Object)>(r27) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayDeque: void addLast(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r11.<java.util.ArrayList: boolean add(java.lang.Object)>(r26) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: i11 = virtualinvoke r26.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
VIRTUAL edge: r27 = virtualinvoke r26.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)>(i10) in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)>
VIRTUAL edge: $i4 = virtualinvoke $r13.<java.lang.Integer: int intValue()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.lang.Integer: int intValue()>
SPECIAL edge: specialinvoke $r16.<com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>("Detected cycle.") in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>
VIRTUAL edge: $i3 = virtualinvoke $r7.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <java.util.ArrayList: int size()>
SPECIAL edge: specialinvoke $r9.<com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>("Had unreachable nodes in graph -- this likely means there was a cycle") in <com.facebook.litho.dataflow.DataFlowGraph: void regenerateSortedNodes()> ==> <com.facebook.litho.dataflow.DetectedCycleException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void propagate(long)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i2) in <com.facebook.litho.dataflow.DataFlowGraph: void propagate(long)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)>(l1) in <com.facebook.litho.dataflow.DataFlowGraph: void propagate(long)> ==> <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedStates()> ==> <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedStates()> ==> <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void setDefStyle(int,int)>(i0, i1) in <com.facebook.litho.ComponentLifecycle: void loadStyle(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void setDefStyle(int,int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentContext: void setDefStyle(int,int)>(0, 0) in <com.facebook.litho.ComponentLifecycle: void loadStyle(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentContext: void setDefStyle(int,int)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void onLoadStyle(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>(r0, r2) in <com.facebook.litho.ComponentLifecycle: void loadStyle(com.facebook.litho.ComponentContext,int,int,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void onLoadStyle(com.facebook.litho.ComponentContext,com.facebook.litho.Component)>
VIRTUAL edge: $r1 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <java.lang.Object: java.lang.Class getClass()>
VIRTUAL edge: r6 = virtualinvoke $r1.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r2) in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>
VIRTUAL edge: virtualinvoke r6.<java.lang.reflect.Field: void setAccessible(boolean)>(1) in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <java.lang.reflect.Field: void setAccessible(boolean)>
VIRTUAL edge: virtualinvoke r6.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r0, r3) in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>() in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <java.lang.Throwable: void printStackTrace()>
VIRTUAL edge: virtualinvoke $r4.<java.lang.Exception: void printStackTrace()>() in <com.facebook.litho.DebugComponent: void applyReflectiveOverride(java.lang.Object,java.lang.String,java.lang.Object)> ==> <org.xmlpull.v1.XmlPullParserException: void printStackTrace()>
SPECIAL edge: specialinvoke r0.<android.support.v4.view.AccessibilityDelegateCompat: void <init>()>() in <com.facebook.litho.ComponentAccessibilityDelegate$SuperDelegate: void <init>(com.facebook.litho.ComponentAccessibilityDelegate)> ==> <android.support.v4.view.AccessibilityDelegateCompat: void <init>()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<com.facebook.litho.Component: int getId()>() in <com.facebook.litho.LayoutState: boolean isCompatibleComponentAndSpec(int,int,int)> ==> <com.facebook.litho.Component: int getId()>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)>(i2, i3) in <com.facebook.litho.LayoutState: boolean isCompatibleComponentAndSpec(int,int,int)> ==> <com.facebook.litho.LayoutState: boolean isCompatibleSpec(int,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>() in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: void applyPreviousRenderInfo(com.facebook.litho.Component,com.facebook.litho.ComponentLifecycle$RenderInfo)>(r0, r6) in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void applyPreviousRenderInfo(com.facebook.litho.Component,com.facebook.litho.ComponentLifecycle$RenderInfo)>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to apply previous render info to component that doesn\'t support it") in <com.facebook.litho.RenderState: void applyPreviousRenderInfo(com.facebook.litho.Component)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r2 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getGlobalKey()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: java.lang.String getGlobalKey()>
VIRTUAL edge: $r15 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.TestComponent: java.lang.String getSimpleName()>
VIRTUAL edge: $r15 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.DrawableComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $r15 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.ViewCompatComponent$ViewCompatComponentImpl: java.lang.String getSimpleName()>
VIRTUAL edge: $r15 = virtualinvoke r0.<com.facebook.litho.Component: java.lang.String getSimpleName()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.HostComponent$State: java.lang.String getSimpleName()>
VIRTUAL edge: $z0 = virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: boolean needsPreviousRenderInfo()>
VIRTUAL edge: r9 = virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$RenderInfo recordRenderInfo(com.facebook.litho.Component,com.facebook.litho.ComponentLifecycle$RenderInfo)>(r0, r8) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: com.facebook.litho.ComponentLifecycle$RenderInfo recordRenderInfo(com.facebook.litho.Component,com.facebook.litho.ComponentLifecycle$RenderInfo)>
SPECIAL edge: specialinvoke $r20.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to record previous render info for component that doesn\'t support it") in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke $r4.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r2) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Cannot record previous render info for ") in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r16 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", found another Component with the same key: ") in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r12.<java.lang.RuntimeException: void <init>(java.lang.String)>($r19) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r2) in <com.facebook.litho.RenderState: void recordRenderInfo(com.facebook.litho.Component)> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.LayoutState: boolean hasTransitionContext()>() in <com.facebook.litho.MountState: void prepareTransitionManager(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: boolean hasTransitionContext()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.DataFlowTransitionManager: void <init>()>() in <com.facebook.litho.MountState: void prepareTransitionManager(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DataFlowTransitionManager: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.TransitionContext: com.facebook.litho.TransitionSet getAutoTransitionSet()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionContext: com.facebook.litho.TransitionSet getAutoTransitionSet()>
VIRTUAL edge: $r4 = virtualinvoke r1.<com.facebook.litho.TransitionContext: java.util.ArrayList getTransitionAnimationBindings()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionContext: java.util.ArrayList getTransitionAnimationBindings()>
VIRTUAL edge: z1 = virtualinvoke r1.<com.facebook.litho.TransitionContext: boolean hasTransitionKey(java.lang.String)>(r7) in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionContext: boolean hasTransitionKey(java.lang.String)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.TransitionContext: void addTransitionAnimationBinding(com.facebook.litho.animation.AnimationBinding)>(r10) in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionContext: void addTransitionAnimationBinding(com.facebook.litho.animation.AnimationBinding)>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.TransitionSet: java.util.ArrayList getTransitions()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TransitionSet: java.util.ArrayList getTransitions()>
VIRTUAL edge: virtualinvoke $r4.<java.util.ArrayList: void clear()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: i0 = virtualinvoke r3.<java.util.ArrayList: int size()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: r7 = virtualinvoke r6.<com.facebook.litho.Transition: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: java.lang.String getTransitionKey()>
VIRTUAL edge: r10 = virtualinvoke r6.<com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createChangeAnimation()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createChangeAnimation()>
VIRTUAL edge: $z3 = virtualinvoke r6.<com.facebook.litho.Transition: boolean hasDisappearAnimation()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: boolean hasDisappearAnimation()>
VIRTUAL edge: r10 = virtualinvoke r6.<com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()>
VIRTUAL edge: $z2 = virtualinvoke r6.<com.facebook.litho.Transition: boolean hasAppearAnimation()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: boolean hasAppearAnimation()>
VIRTUAL edge: r10 = virtualinvoke r6.<com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()>() in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()>
VIRTUAL edge: z0 = virtualinvoke $r9.<java.util.HashMap: boolean containsKey(java.lang.Object)>(r7) in <com.facebook.litho.MountState: void createAutoMountTransitions(com.facebook.litho.LayoutState)> ==> <java.util.HashMap: boolean containsKey(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r4.<com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)>(z0) in <com.facebook.litho.MountState: void suppressInvalidationsOnHosts(boolean)> ==> <com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)>
VIRTUAL edge: r2 = virtualinvoke $r1.<com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LithoView: com.facebook.litho.ComponentTree getComponentTree()>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: $r5 = virtualinvoke r2.<com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentTree: com.facebook.litho.ComponentContext getContext()>
VIRTUAL edge: r4 = virtualinvoke $r3.<com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentContext: com.facebook.litho.ComponentsLogger getLogger()>
VIRTUAL edge: r6 = virtualinvoke $r5.<com.facebook.litho.ComponentContext: java.lang.String getLogTag()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentContext: java.lang.String getLogTag()>
SPECIAL edge: r8 = specialinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)>(r7) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void registerHost(long,com.facebook.litho.ComponentHost)>(0L, $r16) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void registerHost(long,com.facebook.litho.ComponentHost)>
VIRTUAL edge: virtualinvoke r22.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("log_tag", r6) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r22.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("unmounted_count", $r19) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r22.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("moved_count", $r20) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: virtualinvoke r22.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("unchanged_count", $r21) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
VIRTUAL edge: i0 = virtualinvoke r7.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $i1 = virtualinvoke r7.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $r14 = virtualinvoke r7.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i7) in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
VIRTUAL edge: $l2 = virtualinvoke $r14.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: void prepareMount(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: long getId()>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)>(r7, r5, $r22) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$1008(com.facebook.litho.MountState$PrepareMountStats)>($r12) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$1008(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$908(com.facebook.litho.MountState$PrepareMountStats)>($r14) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$908(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>($r17) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>($r18) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>($r21) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: int access$808(com.facebook.litho.MountState$PrepareMountStats)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)>(r7, r5, $r22) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)>
STATIC edge: staticinvoke <com.facebook.litho.MountState$PrepareMountStats: void access$1100(com.facebook.litho.MountState$PrepareMountStats)>($r1) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState$PrepareMountStats: void access$1100(com.facebook.litho.MountState$PrepareMountStats)>
VIRTUAL edge: $z0 = virtualinvoke $r1.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: boolean isEmpty()>
VIRTUAL edge: r6 = virtualinvoke r5.<com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputTops()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputTops()>
VIRTUAL edge: r7 = virtualinvoke r5.<com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputBottoms()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputBottoms()>
VIRTUAL edge: i4 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $i40 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>(l45) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: i47 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l33) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: $i35 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l34) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: i51 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l20) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: $i24 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l23) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: $i15 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>(l53) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: i7 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l6) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: $r12 = virtualinvoke r5.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i7) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
VIRTUAL edge: $r33 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>($i36) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r36 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>($i39) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r28 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>($i27) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r31 = virtualinvoke r7.<java.util.ArrayList: java.lang.Object get(int)>($i32) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r35 = virtualinvoke $r34.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: l45 = virtualinvoke $r37.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>($r38, $i40, $r39) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
VIRTUAL edge: $r32 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i47) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>($i35, r41, r5) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>
VIRTUAL edge: $r25 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i51) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>($i24, r43, r5) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>($r19, $i15, $r20) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
VIRTUAL edge: $r30 = virtualinvoke $r29.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $l33 = virtualinvoke r41.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $l34 = virtualinvoke r41.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: i48 = virtualinvoke $r42.<com.facebook.litho.LithoView: int getHeight()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $r21 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>($i16) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r24 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>($i19) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r14 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>($i9) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r17 = virtualinvoke r6.<java.util.ArrayList: java.lang.Object get(int)>($i14) in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r23 = virtualinvoke $r22.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $l20 = virtualinvoke r43.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $l23 = virtualinvoke r43.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $r16 = virtualinvoke $r15.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: l53 = virtualinvoke $r18.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: $r13 = virtualinvoke $r12.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean performIncrementalMount(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean isMountedHostWithChildContent(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: boolean isMountedHostWithChildContent(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: $l9 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getHostMarker()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: long getHostMarker()>
VIRTUAL edge: r18 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $l6 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getHostMarker()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: long getHostMarker()>
VIRTUAL edge: $l7 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>($r3) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>
VIRTUAL edge: r17 = virtualinvoke r15.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i11) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>(i11, r17, r15) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)>
SPECIAL edge: r19 = specialinvoke r1.<com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>(r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>
SPECIAL edge: r21 = specialinvoke r1.<com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)>(r18, r16) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)>
SPECIAL edge: specialinvoke r1.<com.facebook.litho.MountState: void registerHost(long,com.facebook.litho.ComponentHost)>($l7, r22) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void registerHost(long,com.facebook.litho.ComponentHost)>
SPECIAL edge: r23 = specialinvoke r1.<com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)>(i0, r18, r21, r16, r0) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)>
VIRTUAL edge: r20 = virtualinvoke r18.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r21 = virtualinvoke r20.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>($r11) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: r21 = virtualinvoke r20.<com.facebook.litho.ComponentLifecycle: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>($r11) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ViewCompatComponent: java.lang.Object createMountContent(com.facebook.litho.ComponentContext)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r19, r21, r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r19, r21, r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>(r19, r21, r18) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ViewCompatComponent: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r22.<com.facebook.litho.ComponentHost: void setParentHostMarker(long)>($l6) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentHost: void setParentHostMarker(long)>
VIRTUAL edge: virtualinvoke r23.<com.facebook.litho.MountItem: void setIsBound(boolean)>(1) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: $r8 = virtualinvoke r23.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $r10 = virtualinvoke r23.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: virtualinvoke $r10.<com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>(0) in <com.facebook.litho.MountState: void mountLayoutOutput(int,com.facebook.litho.LayoutOutput,com.facebook.litho.LayoutState)> ==> <com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $r4 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>($r3, $i0) in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r0) in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
CLINIT edge: $r4 = staticinvoke <com.facebook.litho.ComponentsPools: java.lang.Object acquireMountContent(android.content.Context,int)>($r3, $i0) in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
CLINIT edge: r4 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)>(r0, r1, r2, r3) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)>(r4) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)>
STATIC edge: r4 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)>(r0, r1, r2, r3) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)>
CLINIT edge: $r9 = <com.facebook.litho.MountState: android.graphics.Rect sTempRect> in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountState: void <clinit>()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r5 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sMountItemPool> in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i0) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>(r4, i15, r12) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)>(r22) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>(r4, r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: void unbindAndUnmountLifecycle(com.facebook.litho.ComponentContext,com.facebook.litho.MountItem)>
SPECIAL edge: r23 = specialinvoke r0.<com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>(r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r20 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: r21 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $i7 = virtualinvoke r18.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
VIRTUAL edge: r19 = virtualinvoke r18.<com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>(i14) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.MountItem getMountItemAt(int)>
VIRTUAL edge: $i8 = virtualinvoke r18.<com.facebook.litho.ComponentHost: int getMountItemCount()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentHost: int getMountItemCount()>
SPECIAL edge: specialinvoke $r13.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Recursively unmounting items from a ComponentHost, left some items behind maybe because not tracked by its MountState") in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r20.<com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)>(i0, r1) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentHost: void unmount(int,com.facebook.litho.MountItem)>
VIRTUAL edge: virtualinvoke $r11.<com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>(r23) in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke r21.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z3 = virtualinvoke $r24.<com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>() in <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i2) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r26 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r21 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r27 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $z4 = virtualinvoke r2.<com.facebook.litho.MountItem: boolean isBound()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: boolean isBound()>
VIRTUAL edge: $r20 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.MountItem: void setIsBound(boolean)>(0) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)>($r8, r2, r0) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)>
VIRTUAL edge: r28 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: r29 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.MountItem: void setIsBound(boolean)>(1) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: void setIsBound(boolean)>
VIRTUAL edge: $r11 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r14 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r15 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i0 = virtualinvoke r2.<com.facebook.litho.MountItem: int getFlags()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: int getFlags()>
VIRTUAL edge: $r17 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $r12 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: $r13 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
SPECIAL edge: r25 = specialinvoke r4.<com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>(r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r4.<com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)>(r22) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)>
SPECIAL edge: $r19 = specialinvoke r4.<com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>(r3) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r4.<com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)>(r2, r0, r3) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r4.<com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)>(r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)>
SPECIAL edge: $r10 = specialinvoke r4.<com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>
SPECIAL edge: specialinvoke r4.<com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)>(r0, r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)>
VIRTUAL edge: virtualinvoke $r24.<com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>(r25) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>
VIRTUAL edge: virtualinvoke r27.<com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>(i1, r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentHost: void maybeUnregisterTouchExpansion(int,com.facebook.litho.MountItem)>
VIRTUAL edge: $r18 = virtualinvoke r3.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r18.<com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r19, $r20, r3) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentLifecycle: void onUnbind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r28.<com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)>(i1, r2) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentHost: void maybeRegisterTouchExpansion(int,com.facebook.litho.MountItem)>
VIRTUAL edge: $r9 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r10, r29, r1) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.ComponentLifecycle: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r10, r29, r1) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.ViewCompatComponent: void bind(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke $r13.<com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>(0) in <com.facebook.litho.MountState: boolean updateMountItemIfNeeded(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,com.facebook.litho.ComponentsLogger,int,int)> ==> <com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
CLINIT edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: void <clinit>()>
STATIC edge: $r8 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: java.lang.Integer valueOf(int)>
CLINIT edge: $r1 = <com.facebook.litho.MountState: android.graphics.Rect sTempRect> in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>($r7, $i2, $i3, $i4, $i5, $z3) in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: void applyBoundsToMountContent(java.lang.Object,int,int,int,int,boolean)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isMountViewSpec(com.facebook.litho.Component)>($r2) in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.Component: void <clinit>()>
VIRTUAL edge: $z0 = virtualinvoke r0.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: boolean isEmpty()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputTops()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputTops()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputBottoms()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: java.util.ArrayList getMountableOutputBottoms()>
VIRTUAL edge: i0 = virtualinvoke r1.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $i1 = virtualinvoke r1.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $i2 = virtualinvoke r1.<com.facebook.litho.LayoutState: int getMountableOutputCount()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getMountableOutputCount()>
VIRTUAL edge: $r8 = virtualinvoke r2.<java.util.ArrayList: java.lang.Object get(int)>(i7) in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r5 = virtualinvoke r3.<java.util.ArrayList: java.lang.Object get(int)>(i8) in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void setupPreviousMountableOutputData(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: i0 = virtualinvoke r1.<com.facebook.litho.LayoutState: int getVisibilityOutputCount()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: int getVisibilityOutputCount()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput getVisibilityOutputAt(int)>(i2) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput getVisibilityOutputAt(int)>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getVisibleEventHandler()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getVisibleEventHandler()>
VIRTUAL edge: r4 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getFocusedEventHandler()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getFocusedEventHandler()>
VIRTUAL edge: r5 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getUnfocusedEventHandler()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getUnfocusedEventHandler()>
VIRTUAL edge: r6 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getFullImpressionEventHandler()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getFullImpressionEventHandler()>
VIRTUAL edge: r7 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getInvisibleEventHandler()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: com.facebook.litho.EventHandler getInvisibleEventHandler()>
VIRTUAL edge: l1 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: long getId()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: long getId()>
VIRTUAL edge: r8 = virtualinvoke r2.<com.facebook.litho.VisibilityOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: virtualinvoke $r9.<android.graphics.Rect: void set(android.graphics.Rect)>(r8) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: $z0 = virtualinvoke $r10.<android.graphics.Rect: boolean intersect(android.graphics.Rect)>(r0) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <android.graphics.Rect: boolean intersect(android.graphics.Rect)>
SPECIAL edge: $z7 = specialinvoke r11.<com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)>(r2, r8, r0) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)>
SPECIAL edge: $z2 = specialinvoke r11.<com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)>(r8, $r13) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)>
VIRTUAL edge: $z6 = virtualinvoke r18.<com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>
VIRTUAL edge: virtualinvoke r18.<com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>(1) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>
VIRTUAL edge: $z3 = virtualinvoke r18.<com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: boolean isInFocusedRange()>
VIRTUAL edge: virtualinvoke r18.<com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>(0) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>
VIRTUAL edge: $z4 = virtualinvoke r18.<com.facebook.litho.VisibilityItem: boolean isInFullImpressionRange()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: boolean isInFullImpressionRange()>
VIRTUAL edge: virtualinvoke r18.<com.facebook.litho.VisibilityItem: void setVisibleEdges(android.graphics.Rect,android.graphics.Rect)>(r8, $r14) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: void setVisibleEdges(android.graphics.Rect,android.graphics.Rect)>
VIRTUAL edge: $z5 = virtualinvoke r18.<com.facebook.litho.VisibilityItem: boolean isInFullImpressionRange()>() in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: boolean isInFullImpressionRange()>
VIRTUAL edge: virtualinvoke r18.<com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>(0) in <com.facebook.litho.MountState: void processVisibilityOutputs(com.facebook.litho.LayoutState,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityItem: void setFocusedRange(boolean)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean isInRatioRange(float,int,int)>(f0, $i1, $i2) in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.MountState: boolean isInRatioRange(float,int,int)>(f1, $i3, $i4) in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isInRatioRange(float,int,int)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.MountState: boolean isInRatioRange(float,int,int)>(f0, $i1, $i2) in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: boolean isInRatioRange(float,int,int)>
CLINIT edge: i4 = staticinvoke <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)>(r4) in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: void <clinit>()>
STATIC edge: i5 = staticinvoke <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)>(r5) in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)>
STATIC edge: i4 = staticinvoke <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)>(r4) in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.ConcurrentHashMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashMap: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.Hashtable: java.util.Collection values()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.WeakHashMap: java.util.Collection values()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r26 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z0 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r24 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r24 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashSet: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.AbstractSequentialList: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArraySet: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.util.Iterator iterator()>
INTERFACE edge: r28 = interfaceinvoke r27.<java.util.Collection: java.util.Iterator iterator()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.ArrayList: java.util.Iterator iterator()>
INTERFACE edge: $z2 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
INTERFACE edge: $z2 = interfaceinvoke r28.<java.util.Iterator: boolean hasNext()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: boolean hasNext()>
INTERFACE edge: $r25 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <android.text.TextUtils$SimpleStringSplitter: java.lang.Object next()>
INTERFACE edge: $r25 = interfaceinvoke r28.<java.util.Iterator: java.lang.Object next()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.internal.ArraySet$ArraySetIterator: java.lang.Object next()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.ConcurrentHashMap: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashMap: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.Hashtable: void clear()>
INTERFACE edge: interfaceinvoke $r4.<java.util.Map: void clear()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.WeakHashMap: void clear()>
VIRTUAL edge: i4 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getTestOutputCount()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getTestOutputCount()>
VIRTUAL edge: r30 = virtualinvoke r5.<com.facebook.litho.LayoutState: com.facebook.litho.TestOutput getTestOutputAt(int)>(i3) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput getTestOutputAt(int)>
VIRTUAL edge: l5 = virtualinvoke r30.<com.facebook.litho.TestOutput: long getHostMarker()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: long getHostMarker()>
VIRTUAL edge: l0 = virtualinvoke r30.<com.facebook.litho.TestOutput: long getLayoutOutputId()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: long getLayoutOutputId()>
VIRTUAL edge: $r12 = virtualinvoke r30.<com.facebook.litho.TestOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: $r13 = virtualinvoke r30.<com.facebook.litho.TestOutput: java.lang.String getTestKey()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: java.lang.String getTestKey()>
VIRTUAL edge: $r15 = virtualinvoke r30.<com.facebook.litho.TestOutput: java.lang.String getTestKey()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: java.lang.String getTestKey()>
VIRTUAL edge: $r20 = virtualinvoke r30.<com.facebook.litho.TestOutput: java.lang.String getTestKey()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestOutput: java.lang.String getTestKey()>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.TestItem: void setHost(com.facebook.litho.ComponentHost)>($r32) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestItem: void setHost(com.facebook.litho.ComponentHost)>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.TestItem: void setBounds(android.graphics.Rect)>($r12) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestItem: void setBounds(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.TestItem: void setTestKey(java.lang.String)>($r13) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestItem: void setTestKey(java.lang.String)>
VIRTUAL edge: virtualinvoke r9.<com.facebook.litho.TestItem: void setContent(java.lang.Object)>($r33) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.TestItem: void setContent(java.lang.Object)>
VIRTUAL edge: $r33 = virtualinvoke r8.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.Hashtable: java.lang.Object get(java.lang.Object)>
INTERFACE edge: $r16 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>($r15) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.WeakHashMap: java.lang.Object get(java.lang.Object)>
SPECIAL edge: specialinvoke $r35.<java.util.LinkedList: void <init>()>() in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: void <init>()>
INTERFACE edge: interfaceinvoke $r36.<java.util.Deque: boolean add(java.lang.Object)>(r9) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.ArrayDeque: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r36.<java.util.Deque: boolean add(java.lang.Object)>(r9) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.LinkedList: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r34) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.concurrent.ConcurrentHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r34) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r34) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.Hashtable: java.lang.Object put(java.lang.Object,java.lang.Object)>
INTERFACE edge: interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, $r34) in <com.facebook.litho.MountState: void processTestOutputs(com.facebook.litho.LayoutState)> ==> <java.util.WeakHashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r1.<java.util.ArrayList: void clear()>() in <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)> ==> <java.util.ArrayList: void clear()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.facebook.litho.TransitionContext: java.util.ArrayList getTransitionAnimationBindings()>() in <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.TransitionContext: java.util.ArrayList getTransitionAnimationBindings()>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r4) in <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void reset()>() in <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void reset()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()>() in <com.facebook.litho.DataFlowTransitionManager: void onNewTransitionContext(com.facebook.litho.TransitionContext)> ==> <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()>
CLINIT edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.internal.ArraySet)>
STATIC edge: r19 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.DataFlowTransitionManager$AnimationState acquireAnimationState()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.DataFlowTransitionManager$AnimationState acquireAnimationState()>
STATIC edge: r6 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>
STATIC edge: r0 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.internal.ArraySet acquireArraySet()>
CLINIT edge: r19 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.DataFlowTransitionManager$AnimationState acquireAnimationState()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
CLINIT edge: $r0 = <com.facebook.litho.DataFlowTransitionManager: android.support.v4.util.Pools$SimplePool sAnimationStatePool> in <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.DataFlowTransitionManager$AnimationState acquireAnimationState()> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()>() in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()>() in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.ParallelBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>($r5) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.SequenceBinding: void addListener(com.facebook.litho.animation.AnimationBindingListener)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.ParallelBinding: void start(com.facebook.litho.animation.Resolver)>
INTERFACE edge: interfaceinvoke r4.<com.facebook.litho.animation.AnimationBinding: void start(com.facebook.litho.animation.Resolver)>($r6) in <com.facebook.litho.DataFlowTransitionManager: void runTransitions()> ==> <com.facebook.litho.animation.SequenceBinding: void start(com.facebook.litho.animation.Resolver)>
CLINIT edge: $r23 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>($i1) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $r23 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>($i1) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>
CLINIT edge: $r15 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.Float: void <clinit>()>
VIRTUAL edge: l0 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getHostMarker()>() in <com.facebook.litho.MountState: com.facebook.litho.ComponentHost resolveComponentHost(com.facebook.litho.LayoutOutput,android.support.v4.util.LongSparseArray)> ==> <com.facebook.litho.LayoutOutput: long getHostMarker()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.MountItem: int getImportantForAccessibility()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: int getImportantForAccessibility()>
VIRTUAL edge: r5 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getClickHandler()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getLongClickHandler()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getLongClickHandler()>
VIRTUAL edge: $r8 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getTouchHandler()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getTouchHandler()>
VIRTUAL edge: $r9 = virtualinvoke r4.<com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getInterceptTouchHandler()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: com.facebook.litho.EventHandler getInterceptTouchHandler()>
VIRTUAL edge: $r10 = virtualinvoke r4.<com.facebook.litho.NodeInfo: java.lang.Object getViewTag()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: java.lang.Object getViewTag()>
VIRTUAL edge: $r11 = virtualinvoke r4.<com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: android.util.SparseArray getViewTags()>
VIRTUAL edge: $r12 = virtualinvoke r4.<com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: java.lang.CharSequence getContentDescription()>
VIRTUAL edge: $s1 = virtualinvoke r4.<com.facebook.litho.NodeInfo: short getFocusState()>() in <com.facebook.litho.MountState: void setViewAttributes(com.facebook.litho.MountItem)> ==> <com.facebook.litho.NodeInfo: short getFocusState()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: int getUpdateState()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.LayoutOutput: int getUpdateState()>
VIRTUAL edge: r4 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $l3 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: r5 = virtualinvoke r4.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z7 = virtualinvoke r5.<com.facebook.litho.ComponentLifecycle: boolean isMountSizeDependent()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.ComponentLifecycle: boolean isMountSizeDependent()>
VIRTUAL edge: $r11 = virtualinvoke r5.<java.lang.Object: java.lang.String toString()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $z6 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>(r2, r4) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
VIRTUAL edge: $r10 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <java.lang.Object: java.lang.String toString()>
VIRTUAL edge: $z2 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: boolean callsShouldUpdateOnMount()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.ComponentLifecycle: boolean callsShouldUpdateOnMount()>
VIRTUAL edge: $z3 = virtualinvoke r3.<com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>(r2, r4) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.ComponentLifecycle: boolean shouldComponentUpdate(com.facebook.litho.Component,com.facebook.litho.Component)>
SPECIAL edge: specialinvoke $r7.<com.facebook.litho.MountState$LayoutOutputLog: void <init>(com.facebook.litho.MountState$1)>(null) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.MountState$LayoutOutputLog: void <init>(com.facebook.litho.MountState$1)>
VIRTUAL edge: $r13 = virtualinvoke $r7.<com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()>() in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.MountState$LayoutOutputLog: java.lang.String toString()>
VIRTUAL edge: virtualinvoke r14.<com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>("message", $r13) in <com.facebook.litho.MountState: boolean shouldUpdateMountItem(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem,boolean,android.support.v4.util.LongSparseArray,long[],com.facebook.litho.ComponentsLogger)> ==> <com.facebook.litho.LogEvent: void addParam(java.lang.String,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.FullImpressionVisibleEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.FullImpressionVisibleEvent: void <init>()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r1, $r4) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFullImpression(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.FocusedVisibleEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.FocusedVisibleEvent: void <init>()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r1, $r4) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnFocused(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
SPECIAL edge: specialinvoke $r6.<com.facebook.litho.VisibleEvent: void <init>()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.VisibleEvent: void <init>()>
INTERFACE edge: r3 = interfaceinvoke $r2.<com.facebook.litho.HasEventDispatcher: com.facebook.litho.EventDispatcher getEventDispatcher()>() in <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.Component: com.facebook.litho.EventDispatcher getEventDispatcher()>
INTERFACE edge: interfaceinvoke r3.<com.facebook.litho.EventDispatcher: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>(r1, $r4) in <com.facebook.litho.EventDispatcherUtils: void dispatchOnVisible(com.facebook.litho.EventHandler)> ==> <com.facebook.litho.ComponentLifecycle: java.lang.Object dispatchOnEvent(com.facebook.litho.EventHandler,java.lang.Object)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.VisibilityItem: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.VisibilityItem: void <init>()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.VisibilityItem: void setInvisibleHandler(com.facebook.litho.EventHandler)>(r0) in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.VisibilityItem: void setInvisibleHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.VisibilityItem: void setUnfocusedHandler(com.facebook.litho.EventHandler)>(r1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.VisibilityItem acquireVisibilityItem(com.facebook.litho.EventHandler,com.facebook.litho.EventHandler)> ==> <com.facebook.litho.VisibilityItem: void setUnfocusedHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>("TestItem", 64, 1) in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()> ==> <com.facebook.litho.RecyclePool: void <init>(java.lang.String,int,boolean)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.TestItem: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.TestItem acquireTestItem()> ==> <com.facebook.litho.TestItem: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.TestItem: void release()>() in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)> ==> <com.facebook.litho.TestItem: void release()>
VIRTUAL edge: virtualinvoke $r1.<com.facebook.litho.RecyclePool: void release(java.lang.Object)>(r0) in <com.facebook.litho.ComponentsPools: void release(com.facebook.litho.TestItem)> ==> <com.facebook.litho.RecyclePool: void release(java.lang.Object)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: com.facebook.yoga.YogaDirection getLayoutDirection()>() in <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.yoga.YogaDirection getLayoutDirection()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.yoga.YogaDirection: int ordinal()>() in <com.facebook.litho.MountState: void setViewLayoutDirection(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.yoga.YogaDirection: int ordinal()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: android.graphics.drawable.Drawable getForeground()>() in <com.facebook.litho.MountState: void setViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: android.graphics.drawable.Drawable getForeground()>
SPECIAL edge: specialinvoke $r3.<java.lang.IllegalStateException: void <init>(java.lang.String)>("MountState has a ViewNodeInfo with foreground however the current Android version doesn\'t support foreground on Views") in <com.facebook.litho.MountState: void setViewForeground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <java.lang.IllegalStateException: void <init>(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: boolean hasPadding()>() in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: boolean hasPadding()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: int getPaddingLeft()>() in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: int getPaddingLeft()>
VIRTUAL edge: $i1 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: int getPaddingTop()>() in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: int getPaddingTop()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: int getPaddingRight()>() in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: int getPaddingRight()>
VIRTUAL edge: $i3 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: int getPaddingBottom()>() in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: int getPaddingBottom()>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setPadding(int,int,int,int)>($i0, $i1, $i2, $i3) in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.View: void setPadding(int,int,int,int)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setPadding(int,int,int,int)>($i0, $i1, $i2, $i3) in <com.facebook.litho.MountState: void setViewPadding(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.ViewGroup: void setPadding(int,int,int,int)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ViewNodeInfo: com.facebook.litho.reference.Reference getBackground()>() in <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <com.facebook.litho.ViewNodeInfo: com.facebook.litho.reference.Reference getBackground()>
VIRTUAL edge: $r3 = virtualinvoke r2.<android.view.View: android.content.Context getContext()>() in <com.facebook.litho.MountState: void setViewBackground(android.view.View,com.facebook.litho.ViewNodeInfo)> ==> <android.view.View: android.content.Context getContext()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setFocusable(boolean)>(1) in <com.facebook.litho.MountState: void setFocusable(android.view.View,short)> ==> <android.view.View: void setFocusable(boolean)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setFocusable(boolean)>(0) in <com.facebook.litho.MountState: void setFocusable(android.view.View,short)> ==> <android.view.View: void setFocusable(boolean)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setContentDescription(java.lang.CharSequence)>(r0) in <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)> ==> <android.view.View: void setContentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setContentDescription(java.lang.CharSequence)>(r0) in <com.facebook.litho.MountState: void setContentDescription(android.view.View,java.lang.CharSequence)> ==> <com.facebook.litho.ComponentHost: void setContentDescription(java.lang.CharSequence)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentHost: void setViewTags(android.util.SparseArray)>(r0) in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <com.facebook.litho.ComponentHost: void setViewTags(android.util.SparseArray)>
VIRTUAL edge: i0 = virtualinvoke r0.<android.util.SparseArray: int size()>() in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <android.util.SparseArray: int size()>
VIRTUAL edge: $i1 = virtualinvoke r0.<android.util.SparseArray: int keyAt(int)>(i2) in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <android.util.SparseArray: int keyAt(int)>
VIRTUAL edge: $r2 = virtualinvoke r0.<android.util.SparseArray: java.lang.Object valueAt(int)>(i2) in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <android.util.SparseArray: java.lang.Object valueAt(int)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setTag(int,java.lang.Object)>($i1, $r2) in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setTag(int,java.lang.Object)>($i1, $r2) in <com.facebook.litho.MountState: void setViewTags(android.view.View,android.util.SparseArray)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r2.<com.facebook.litho.ComponentHost: void setViewTag(java.lang.Object)>(r1) in <com.facebook.litho.MountState: void setViewTag(android.view.View,java.lang.Object)> ==> <com.facebook.litho.ComponentHost: void setViewTag(java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(java.lang.Object)>(r1) in <com.facebook.litho.MountState: void setViewTag(android.view.View,java.lang.Object)> ==> <android.view.View: void setTag(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke r1.<com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>() in <com.facebook.litho.MountState: void setAccessibilityDelegate(android.view.View,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.NodeInfo: boolean hasAccessibilityHandlers()>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setAccessibilityDelegate(android.view.View,com.facebook.litho.NodeInfo)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setAccessibilityDelegate(android.view.View,com.facebook.litho.NodeInfo)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.ComponentHost: void setInterceptTouchEventHandler(com.facebook.litho.EventHandler)>(r0) in <com.facebook.litho.MountState: void setInterceptTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentHost: void setInterceptTouchEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentTouchListener: void <init>()>() in <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentTouchListener: void <init>()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentTouchListener: void setEventHandler(com.facebook.litho.EventHandler)>(r0) in <com.facebook.litho.MountState: void setTouchHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentTouchListener: void setEventHandler(com.facebook.litho.EventHandler)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentLongClickListener: void <init>()>() in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentLongClickListener: void <init>()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentLongClickListener: void setEventHandler(com.facebook.litho.EventHandler)>(r0) in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentLongClickListener: void setEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setLongClickable(boolean)>(1) in <com.facebook.litho.MountState: void setLongClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <android.view.View: void setLongClickable(boolean)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.ComponentClickListener: void <init>()>() in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentClickListener: void <init>()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentClickListener: void setEventHandler(com.facebook.litho.EventHandler)>(r0) in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <com.facebook.litho.ComponentClickListener: void setEventHandler(com.facebook.litho.EventHandler)>
VIRTUAL edge: virtualinvoke r1.<android.view.View: void setClickable(boolean)>(1) in <com.facebook.litho.MountState: void setClickHandler(com.facebook.litho.EventHandler,android.view.View)> ==> <android.view.View: void setClickable(boolean)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.LayoutOutput: android.graphics.Rect getBounds()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $i0 = virtualinvoke r1.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i2 = virtualinvoke r1.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: boolean sameSize(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.yoga.YogaDirection: int ordinal()>() in <com.facebook.litho.MountState$2: void <clinit>()> ==> <com.facebook.yoga.YogaDirection: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.yoga.YogaDirection: int ordinal()>() in <com.facebook.litho.MountState$2: void <clinit>()> ==> <com.facebook.yoga.YogaDirection: int ordinal()>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.ComponentHost: void setComponentTouchListener(com.facebook.litho.ComponentTouchListener)>(r1) in <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)> ==> <com.facebook.litho.ComponentHost: void setComponentTouchListener(com.facebook.litho.ComponentTouchListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>(r1) in <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)> ==> <android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentTouchListener(android.view.View,com.facebook.litho.ComponentTouchListener)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.ComponentHost: void setComponentLongClickListener(com.facebook.litho.ComponentLongClickListener)>(r1) in <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)> ==> <com.facebook.litho.ComponentHost: void setComponentLongClickListener(com.facebook.litho.ComponentLongClickListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>(r1) in <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)> ==> <android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentLongClickListener(android.view.View,com.facebook.litho.ComponentLongClickListener)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<com.facebook.litho.ComponentHost: void setComponentClickListener(com.facebook.litho.ComponentClickListener)>(r1) in <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)> ==> <com.facebook.litho.ComponentHost: void setComponentClickListener(com.facebook.litho.ComponentClickListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setOnClickListener(android.view.View$OnClickListener)>(r1) in <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)> ==> <android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)> ==> <android.view.View: void setTag(int,java.lang.Object)>
VIRTUAL edge: virtualinvoke r0.<android.view.View: void setTag(int,java.lang.Object)>($i0, r1) in <com.facebook.litho.MountState: void setComponentClickListener(android.view.View,com.facebook.litho.ComponentClickListener)> ==> <com.facebook.litho.ComponentHost: void setTag(int,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: int getHeightForMountedContent(java.lang.Object)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: int getHeightForMountedContent(java.lang.Object)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.view.View: int getHeight()>() in <com.facebook.litho.MountState: int getHeightForMountedContent(java.lang.Object)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>() in <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)> ==> <android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
VIRTUAL edge: $i0 = virtualinvoke $r3.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i0 = virtualinvoke $r1.<android.view.View: int getWidth()>() in <com.facebook.litho.MountState: int getWidthForMountedContent(java.lang.Object)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i0 = virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i1) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke r9.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>(r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)>
SPECIAL edge: specialinvoke $r14.<java.lang.RuntimeException: void <init>(java.lang.String)>("TransitionDiff wasn\'t cleared properly!") in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>(r4, r6) in <com.facebook.litho.DataFlowTransitionManager: void onPreMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>(r4, r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>
VIRTUAL edge: $i1 = virtualinvoke $r14.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i0) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: float get(java.lang.Object)>
INTERFACE edge: $f0 = interfaceinvoke r8.<com.facebook.litho.animation.AnimatedProperty: float get(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: float get(java.lang.Object)>
SPECIAL edge: specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String)>("TransitionDiff wasn\'t cleared properly!") in <com.facebook.litho.DataFlowTransitionManager: void onPostMountItem(java.lang.String,java.lang.Object)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke $r3.<java.util.ArrayList: boolean addAll(java.util.Collection)>($r2) in <com.facebook.litho.TransitionSet: void mergeIn(com.facebook.litho.TransitionSet)> ==> <java.util.ArrayList: boolean addAll(java.util.Collection)>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>($r4) in <com.facebook.litho.TransitionSet: void mergeIn(com.facebook.litho.TransitionSet)> ==> <com.facebook.litho.internal.ArraySet: boolean addAll(java.util.Collection)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.TransitionContext: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.TransitionContext: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])>($r3) in <com.facebook.litho.TransitionContext: void <init>()> ==> <com.facebook.litho.TransitionSet: void <init>(com.facebook.litho.Transition$Builder[])>
SPECIAL edge: specialinvoke $r4.<java.util.HashSet: void <init>(int)>(8) in <com.facebook.litho.TransitionContext: void <init>()> ==> <java.util.HashSet: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.LayoutStateOutputIdCalculator: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.LongSparseArray: void <init>(int)>(8) in <com.facebook.litho.LayoutStateOutputIdCalculator: void <init>()> ==> <android.support.v4.util.LongSparseArray: void <init>(int)>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.LongSparseArray: void <init>(int)>(8) in <com.facebook.litho.LayoutStateOutputIdCalculator: void <init>()> ==> <android.support.v4.util.LongSparseArray: void <init>(int)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>() in <com.facebook.litho.InternalNode: int getTouchExpansionLeft()> ==> <com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>
SPECIAL edge: $f2 = specialinvoke r0.<com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)>($r2, $r1) in <com.facebook.litho.InternalNode: int getTouchExpansionLeft()> ==> <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)>
CLINIT edge: $r5 = <com.facebook.litho.InternalNode$1: int[] $SwitchMap$com$facebook$yoga$YogaEdge> in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.InternalNode$1: void <clinit>()>
STATIC edge: $z1 = staticinvoke <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>(f0) in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <com.facebook.yoga.YogaConstants: boolean isUndefined(float)>
CLINIT edge: <com.facebook.litho.InternalNode$1: int[] $SwitchMap$com$facebook$yoga$YogaEdge> = $r1 in <com.facebook.litho.InternalNode$1: void <clinit>()> ==> <com.facebook.litho.InternalNode$1: void <clinit>()>
STATIC edge: $r0 = staticinvoke <com.facebook.yoga.YogaEdge: com.facebook.yoga.YogaEdge[] values()>() in <com.facebook.litho.InternalNode$1: void <clinit>()> ==> <com.facebook.yoga.YogaEdge: com.facebook.yoga.YogaEdge[] values()>
CLINIT edge: $r5 = <com.facebook.litho.InternalNode$1: int[] $SwitchMap$com$facebook$yoga$YogaEdge> in <com.facebook.litho.InternalNode$1: void <clinit>()> ==> <com.facebook.litho.InternalNode$1: void <clinit>()>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>() in <com.facebook.litho.InternalNode: int getTouchExpansionTop()> ==> <com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>
VIRTUAL edge: $f0 = virtualinvoke $r2.<com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>($r1) in <com.facebook.litho.InternalNode: int getTouchExpansionTop()> ==> <com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>() in <com.facebook.litho.InternalNode: int getTouchExpansionRight()> ==> <com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>
SPECIAL edge: $f2 = specialinvoke r0.<com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)>($r2, $r1) in <com.facebook.litho.InternalNode: int getTouchExpansionRight()> ==> <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)>
SPECIAL edge: $z0 = specialinvoke r0.<com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>() in <com.facebook.litho.InternalNode: int getTouchExpansionBottom()> ==> <com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()>
VIRTUAL edge: $f0 = virtualinvoke $r2.<com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>($r1) in <com.facebook.litho.InternalNode: int getTouchExpansionBottom()> ==> <com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.ValueNode: int getOutputCount()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $i0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
VIRTUAL edge: $i2 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
SPECIAL edge: specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Bad index: ") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" > ") in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r4.<java.lang.RuntimeException: void <init>(java.lang.String)>($r10) in <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.animation.BezierTransition$BezierNode: float calculateValue(long)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.animation.AnimatedPropertyNode: float calculateValue(long)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.dataflow.SimpleNode: float calculateValue(long)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.dataflow.ConstantNode: float calculateValue(long)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.dataflow.TimingNode: float calculateValue(long)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: float calculateValue(long)>(l0) in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <com.facebook.litho.dataflow.SpringNode: float calculateValue(long)>
SPECIAL edge: specialinvoke $r1.<java.lang.RuntimeException: void <init>(java.lang.String)>("Got a calculate value call multiple times in the same frame. This isn\'t expected.") in <com.facebook.litho.dataflow.ValueNode: void doCalculateValue(long)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: i0 = virtualinvoke $r1.<java.util.ArrayList: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.util.ArrayList: java.lang.Object get(int)>(i1) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: z1 = virtualinvoke $r6.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
SPECIAL edge: $z8 = specialinvoke r0.<com.facebook.litho.dataflow.DataFlowGraph: boolean areInputsFinished(com.facebook.litho.dataflow.ValueNode)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.dataflow.DataFlowGraph: boolean areInputsFinished(com.facebook.litho.dataflow.ValueNode)>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r10.<com.facebook.litho.dataflow.NodeCanFinish: void onInputsFinished()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.dataflow.SpringNode: void onInputsFinished()>
INTERFACE edge: interfaceinvoke $r10.<com.facebook.litho.dataflow.NodeCanFinish: void onInputsFinished()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.dataflow.TimingNode: void onInputsFinished()>
INTERFACE edge: $z5 = interfaceinvoke $r8.<com.facebook.litho.dataflow.NodeCanFinish: boolean isFinished()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.dataflow.SpringNode: boolean isFinished()>
INTERFACE edge: $z5 = interfaceinvoke $r8.<com.facebook.litho.dataflow.NodeCanFinish: boolean isFinished()>() in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.dataflow.TimingNode: boolean isFinished()>
VIRTUAL edge: virtualinvoke $r7.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void updateFinishedNodes()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r5.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: i1 = virtualinvoke r8.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r10 = virtualinvoke r8.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i3) in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: $z2 = virtualinvoke $r12.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r11) in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.dataflow.GraphBinding: void notifyNodesHaveFinished()>() in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.dataflow.GraphBinding: void notifyNodesHaveFinished()>
VIRTUAL edge: virtualinvoke $r9.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r4) in <com.facebook.litho.dataflow.DataFlowGraph: void notifyFinishedBindings()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r1) in <com.facebook.litho.TransitionContext: boolean hasTransitionKey(java.lang.String)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r2.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) in <com.facebook.litho.TransitionContext: void addTransitionAnimationBinding(com.facebook.litho.animation.AnimationBinding)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r0.<com.facebook.litho.animation.ChangingComponent: void <init>(java.lang.String)>($r2) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createChangeAnimation()> ==> <com.facebook.litho.animation.ChangingComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>($r0, $r5) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createChangeAnimation()> ==> <com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
INTERFACE edge: r8 = interfaceinvoke $r7.<com.facebook.litho.Transition$TransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>($r4) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createChangeAnimation()> ==> <com.facebook.litho.Transition$SpringTransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.Transition: boolean hasDisappearAnimation()>() in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <com.facebook.litho.Transition: boolean hasDisappearAnimation()>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to create an disappear animation when no to value was provided!") in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.DisappearingComponent: void <init>(java.lang.String)>($r2) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <com.facebook.litho.animation.DisappearingComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>($r1, $r5) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
INTERFACE edge: r8 = interfaceinvoke $r7.<com.facebook.litho.Transition$TransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>($r4) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <com.facebook.litho.Transition$SpringTransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, $r9) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createDisappearAnimation()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addDisappearToValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.Transition: boolean hasAppearAnimation()>() in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <com.facebook.litho.Transition: boolean hasAppearAnimation()>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>("Trying to create an appear animation when no from value was provided!") in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.animation.AppearingComponent: void <init>(java.lang.String)>($r2) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <com.facebook.litho.animation.AppearingComponent: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>($r1, $r5) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
INTERFACE edge: r8 = interfaceinvoke $r7.<com.facebook.litho.Transition$TransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>($r4) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <com.facebook.litho.Transition$SpringTransitionAnimator: com.facebook.litho.animation.TransitionAnimationBinding createAnimation(com.facebook.litho.animation.ComponentProperty)>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>($r4, $r9) in <com.facebook.litho.Transition: com.facebook.litho.animation.AnimationBinding createAppearAnimation()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void addAppearFromValue(com.facebook.litho.animation.ComponentProperty,com.facebook.litho.animation.RuntimeValue)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void invalidate()>() in <com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)> ==> <com.facebook.litho.ComponentHost: void invalidate()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>() in <com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)> ==> <com.facebook.litho.ComponentHost: void invalidateAccessibilityState()>
VIRTUAL edge: i2 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>($l1) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getLayoutOutputPositionForId(long)>
VIRTUAL edge: $i4 = virtualinvoke r5.<com.facebook.litho.LayoutState: int getComponentTreeId()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: int getComponentTreeId()>
VIRTUAL edge: $r8 = virtualinvoke r5.<com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>(i2) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.LayoutOutput getMountableOutputAt(int)>
VIRTUAL edge: r7 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i10) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)>(i10, $r24) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)>
SPECIAL edge: i11 = specialinvoke r0.<com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)>(i10, r7) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)>(i10, i11) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>($r20, i10, $r19) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>($r16, i10, $r15) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountState: void unmountItem(com.facebook.litho.ComponentContext,int,android.support.v4.util.LongSparseArray)>
VIRTUAL edge: $r23 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r9 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r13 = virtualinvoke r7.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r24 = virtualinvoke $r23.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
VIRTUAL edge: l12 = virtualinvoke $r8.<com.facebook.litho.LayoutOutput: long getHostMarker()>() in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.LayoutOutput: long getHostMarker()>
VIRTUAL edge: virtualinvoke $r13.<com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)>(r7, i10, i2) in <com.facebook.litho.MountState: com.facebook.litho.MountState$PrepareMountStats unmountOrMoveOldItems(com.facebook.litho.LayoutState)> ==> <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)>($r4, $r7) in <com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)>
CLINIT edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r5) in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.Component: void <clinit>()>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>($r5) in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.Component: boolean isHostSpec(com.facebook.litho.Component)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)>($r7) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void startTemporaryDetach(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHost: void finishTemporaryDetach(android.view.View)>($r4) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void finishTemporaryDetach(android.view.View)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, i1, $r3, $r2) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i1, $r6, $r5) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, i1, $r11, $r10) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i1, $r13, $r12) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: $z1 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)>($r4, r1) in <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)>
STATIC edge: $z0 = staticinvoke <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>(i0, r0) in <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.ComponentHostUtils: boolean existsScrapItemAt(int,android.support.v4.util.SparseArrayCompat)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)>(1) in <com.facebook.litho.MountState: void registerHost(long,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentHost: void suppressInvalidations(boolean)>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: r3 = virtualinvoke $r2.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
VIRTUAL edge: r5 = virtualinvoke r4.<com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>() in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.LayoutState: com.facebook.litho.TransitionContext getTransitionContext()>
VIRTUAL edge: $z2 = virtualinvoke r5.<com.facebook.litho.TransitionContext: boolean hasTransitionKey(java.lang.String)>(r3) in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.TransitionContext: boolean hasTransitionKey(java.lang.String)>
VIRTUAL edge: $z1 = virtualinvoke r5.<com.facebook.litho.TransitionContext: boolean isDisappearingKey(java.lang.String)>(r3) in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.TransitionContext: boolean isDisappearingKey(java.lang.String)>
VIRTUAL edge: $z0 = virtualinvoke r6.<com.facebook.litho.DataFlowTransitionManager: boolean isKeyAnimating(java.lang.String)>(r3) in <com.facebook.litho.MountState: boolean isItemDisappearing(com.facebook.litho.MountItem,com.facebook.litho.LayoutState,com.facebook.litho.DataFlowTransitionManager)> ==> <com.facebook.litho.DataFlowTransitionManager: boolean isKeyAnimating(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState$PrepareMountStats: void reset()>() in <com.facebook.litho.MountState$PrepareMountStats: void access$1100(com.facebook.litho.MountState$PrepareMountStats)> ==> <com.facebook.litho.MountState$PrepareMountStats: void reset()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>() in <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentContext getScopedContext()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()>() in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()>
VIRTUAL edge: $i0 = virtualinvoke r1.<com.facebook.litho.ComponentLifecycle: int getId()>() in <com.facebook.litho.MountState: java.lang.Object acquireMountContent(com.facebook.litho.Component,com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentLifecycle: int getId()>
CLINIT edge: $i1 = <android.os.Build$VERSION: int SDK_INT> in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <android.os.Build$VERSION: void <clinit>()>
SPECIAL edge: specialinvoke r5.<com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)>(r4) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)>
VIRTUAL edge: $r8 = virtualinvoke r0.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
VIRTUAL edge: $z0 = virtualinvoke $r8.<com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>() in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentLifecycle: boolean canMountIncrementally()>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>($r9) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>
VIRTUAL edge: virtualinvoke r1.<com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)>(i0, r4, $r10) in <com.facebook.litho.MountState: com.facebook.litho.MountItem mountContent(int,com.facebook.litho.Component,java.lang.Object,com.facebook.litho.ComponentHost,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.ComponentHost: void mount(int,com.facebook.litho.MountItem,android.graphics.Rect)>
VIRTUAL edge: $r6 = virtualinvoke $r5.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r4.<com.facebook.litho.MountItem: void <init>()>() in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: void <init>()>
VIRTUAL edge: virtualinvoke r8.<com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)>(r0, r1, r2, r3, null) in <com.facebook.litho.ComponentsPools: com.facebook.litho.MountItem acquireMountItem(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ComponentHost: boolean hasDisappearingItems()>() in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentHost: boolean hasDisappearingItems()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()>() in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.LinkedList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: i0 = interfaceinvoke r1.<java.util.List: int size()>() in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r3.<com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>($r5) in <com.facebook.litho.MountState: void removeDisappearingMountContentFromComponentHost(com.facebook.litho.ComponentHost)> ==> <com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object remove(java.lang.Object)>(r2) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.util.HashMap: java.lang.Object remove(java.lang.Object)>
SPECIAL edge: specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Tried to decrement mount count below 0 for key ") in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r10.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: $i1 = virtualinvoke r6.<java.lang.Integer: int intValue()>() in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8) in <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>(r4, null) in <com.facebook.litho.DataFlowTransitionManager: void onContentUnmounted(java.lang.String)> ==> <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)>
VIRTUAL edge: $r3 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r4 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r6 = virtualinvoke r2.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable getDisplayListDrawable()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)>(r1, $r3, $r4, r5, $r6) in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput)> ==> <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: r3 = virtualinvoke r2.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r4 = virtualinvoke r1.<com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>() in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.Component: com.facebook.litho.ComponentLifecycle getLifecycle()>
SPECIAL edge: $r7 = specialinvoke r5.<com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>(r6) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>
SPECIAL edge: $r8 = specialinvoke r5.<com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>(r1) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.MountState: com.facebook.litho.ComponentContext getContextForComponent(com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r7, r3, r6) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void unmount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: virtualinvoke r4.<com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>($r8, r3, r1) in <com.facebook.litho.MountState: void updateMountedContent(com.facebook.litho.MountItem,com.facebook.litho.LayoutOutput,com.facebook.litho.Component)> ==> <com.facebook.litho.ComponentLifecycle: void mount(com.facebook.litho.ComponentContext,java.lang.Object,com.facebook.litho.Component)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
VIRTUAL edge: $r5 = virtualinvoke $r4.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r2) in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.util.HashMap: java.lang.Object get(java.lang.Object)>
VIRTUAL edge: $i0 = virtualinvoke r6.<java.lang.Integer: int intValue()>() in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.lang.Integer: int intValue()>
VIRTUAL edge: virtualinvoke $r7.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r8) in <com.facebook.litho.MountState: void maybeIncrementTransitionKeyMountCount(com.facebook.litho.MountItem)> ==> <java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>
VIRTUAL edge: $l0 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: long getId()>() in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.LayoutOutput: long getId()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>($r1) in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.LayoutOutput: void getMountBounds(android.graphics.Rect)>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r4 = virtualinvoke r3.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $r7 = virtualinvoke r3.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: $z2 = virtualinvoke $r5.<android.view.View: boolean isLayoutRequested()>() in <com.facebook.litho.MountState: void updateBoundsForMountedLayoutOutput(com.facebook.litho.LayoutOutput,com.facebook.litho.MountItem)> ==> <android.view.View: boolean isLayoutRequested()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getVisibilityOutputCount()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getVisibilityOutputCount()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getVisibilityOutputCount()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput getVisibilityOutputAt(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput getVisibilityOutputAt(int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.VisibilityOutput getVisibilityOutputAt(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: f0 = virtualinvoke r0.<com.facebook.litho.VisibilityOutput: float getVisibleHeightRatio()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: float getVisibleHeightRatio()>
VIRTUAL edge: f1 = virtualinvoke r0.<com.facebook.litho.VisibilityOutput: float getVisibleWidthRatio()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <com.facebook.litho.VisibilityOutput: float getVisibleWidthRatio()>
VIRTUAL edge: $i1 = virtualinvoke r1.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: $i3 = virtualinvoke r1.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i2 = virtualinvoke r2.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int height()>
VIRTUAL edge: $i4 = virtualinvoke r2.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: boolean isInVisibleRange(com.facebook.litho.VisibilityOutput,android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.LithoView: android.view.ViewParent getParent()>() in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $i0 = virtualinvoke r3.<android.view.View: int getWidth()>() in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <android.view.View: int getWidth()>
VIRTUAL edge: $i1 = virtualinvoke r3.<android.view.View: int getHeight()>() in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <android.view.View: int getHeight()>
VIRTUAL edge: $z0 = virtualinvoke r4.<android.graphics.Rect: boolean equals(java.lang.Object)>(r5) in <com.facebook.litho.MountState: boolean isInFocusedRange(android.graphics.Rect,android.graphics.Rect)> ==> <android.graphics.Rect: boolean equals(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke r0.<android.graphics.Rect: boolean isEmpty()>() in <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)> ==> <android.graphics.Rect: boolean isEmpty()>
VIRTUAL edge: $i0 = virtualinvoke r0.<android.graphics.Rect: int width()>() in <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)> ==> <android.graphics.Rect: int width()>
VIRTUAL edge: $i1 = virtualinvoke r0.<android.graphics.Rect: int height()>() in <com.facebook.litho.MountState: int computeRectArea(android.graphics.Rect)> ==> <android.graphics.Rect: int height()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getTestOutputCount()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getTestOutputCount()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r2.<java.util.List: int size()>() in <com.facebook.litho.LayoutState: int getTestOutputCount()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput getTestOutputAt(int)> ==> <java.util.LinkedList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput getTestOutputAt(int)> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object get(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) in <com.facebook.litho.LayoutState: com.facebook.litho.TestOutput getTestOutputAt(int)> ==> <java.util.ArrayList: java.lang.Object get(int)>
VIRTUAL edge: virtualinvoke $r2.<android.graphics.Rect: void set(android.graphics.Rect)>(r1) in <com.facebook.litho.TestItem: void setBounds(android.graphics.Rect)> ==> <android.graphics.Rect: void set(android.graphics.Rect)>
VIRTUAL edge: i0 = virtualinvoke $r2.<java.util.ArrayList: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.util.ArrayList: java.lang.Object get(int)>(i2) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.TimingTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.ParallelBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.SequenceBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.SpringTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
INTERFACE edge: interfaceinvoke r5.<com.facebook.litho.animation.AnimationBinding: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.BezierTransition: void collectTransitioningProperties(com.facebook.litho.internal.ArraySet)>
VIRTUAL edge: i1 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r9 = virtualinvoke r0.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i3) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.internal.ArraySet: void clear()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: void clear()>
VIRTUAL edge: r11 = virtualinvoke r10.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: r12 = virtualinvoke r10.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r11) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r15.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r12) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
VIRTUAL edge: virtualinvoke $r16.<com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void recordAllTransitioningProperties()> ==> <com.facebook.litho.internal.ArraySet: boolean add(java.lang.Object)>
SPECIAL edge: specialinvoke $r2.<com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>(com.facebook.litho.DataFlowTransitionManager$1)>(null) in <com.facebook.litho.DataFlowTransitionManager: com.facebook.litho.DataFlowTransitionManager$AnimationState acquireAnimationState()> ==> <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>(com.facebook.litho.DataFlowTransitionManager$1)>
VIRTUAL edge: $f0 = virtualinvoke $r18.<java.lang.Float: float floatValue()>() in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <java.lang.Float: float floatValue()>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke r13.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r16, $f0) in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()>() in <com.facebook.litho.DataFlowTransitionManager: void restoreInitialStates()> ==> <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()>
CLINIT edge: $r25 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>($i1) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.DataFlowTransitionManager: void <clinit>()>
STATIC edge: $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.Float: java.lang.Float valueOf(float)>
STATIC edge: $r25 = staticinvoke <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>($i1) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)>
CLINIT edge: $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.Float: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.util.ArrayList: java.lang.Object get(int)>(i2) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke r28.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke r28.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.ParallelBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke r28.<com.facebook.litho.animation.AnimationBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.SequenceBinding: void collectDisappearToValues(android.support.v4.util.SimpleArrayMap)>
VIRTUAL edge: $r8 = virtualinvoke r29.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r20 = virtualinvoke r29.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r14 = virtualinvoke r29.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
SPECIAL edge: specialinvoke $r18.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong transition type for disappear of key ") in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r21 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r20) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r23) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r17.<java.lang.RuntimeException: void <init>(java.lang.String)>($r25) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
INTERFACE edge: f0 = interfaceinvoke r6.<com.facebook.litho.animation.RuntimeValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>($r11, r29) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.FloatValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f0 = interfaceinvoke r6.<com.facebook.litho.animation.RuntimeValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>($r11, r29) in <com.facebook.litho.DataFlowTransitionManager: void setDisappearToValues()> ==> <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>
SPECIAL edge: specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unknown keyStatus: ") in <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r0.<java.lang.RuntimeException: void <init>(java.lang.String)>($r4) in <com.facebook.litho.DataFlowTransitionManager: java.lang.String keyStatusToString(int)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState$LayoutOutputLog: void <init>()>() in <com.facebook.litho.MountState$LayoutOutputLog: void <init>(com.facebook.litho.MountState$1)> ==> <com.facebook.litho.MountState$LayoutOutputLog: void <init>()>
VIRTUAL edge: virtualinvoke $r1.<android.graphics.Rect: void setEmpty()>() in <com.facebook.litho.TestItem: void release()> ==> <android.graphics.Rect: void setEmpty()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentTouchListener: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentLongClickListener: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.ComponentClickListener: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void setOnTouchListener(android.view.View$OnTouchListener)>(r1) in <com.facebook.litho.ComponentHost: void setComponentTouchListener(com.facebook.litho.ComponentTouchListener)> ==> <android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void setOnLongClickListener(android.view.View$OnLongClickListener)>(r1) in <com.facebook.litho.ComponentHost: void setComponentLongClickListener(com.facebook.litho.ComponentLongClickListener)> ==> <android.view.View: void setOnLongClickListener(android.view.View$OnLongClickListener)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void setOnClickListener(android.view.View$OnClickListener)>(r1) in <com.facebook.litho.ComponentHost: void setComponentClickListener(com.facebook.litho.ComponentClickListener)> ==> <android.view.View: void setOnClickListener(android.view.View$OnClickListener)>
VIRTUAL edge: i0 = virtualinvoke r12.<com.facebook.litho.internal.ArraySet: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: int size()>
VIRTUAL edge: $r9 = virtualinvoke r12.<com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>(i1) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.internal.ArraySet: java.lang.Object valueAt(int)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void reset(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r11.<com.facebook.litho.animation.AnimatedProperty: void reset(java.lang.Object)>($r10) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void reset(java.lang.Object)>
SPECIAL edge: specialinvoke r5.<com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)>(r0) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.DataFlowTransitionManager: void onMountItemAnimationComplete(com.facebook.litho.DataFlowTransitionManager$AnimationState)>
SPECIAL edge: specialinvoke r5.<com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClipping(java.lang.Object,boolean)>(r1, 0) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.DataFlowTransitionManager: void recursivelySetChildClipping(java.lang.Object,boolean)>
VIRTUAL edge: virtualinvoke $r8.<com.facebook.litho.animation.AnimatedPropertyNode: void setMountItem(java.lang.Object)>(r1) in <com.facebook.litho.DataFlowTransitionManager: void setMountItem(com.facebook.litho.DataFlowTransitionManager$AnimationState,java.lang.Object)> ==> <com.facebook.litho.animation.AnimatedPropertyNode: void setMountItem(java.lang.Object)>
VIRTUAL edge: $z0 = virtualinvoke $r3.<com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>() in <com.facebook.litho.InternalNode: boolean shouldApplyTouchExpansion()> ==> <com.facebook.litho.NodeInfo: boolean hasTouchEventHandlers()>
VIRTUAL edge: $i0 = virtualinvoke r4.<com.facebook.yoga.YogaEdge: int ordinal()>() in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <com.facebook.yoga.YogaEdge: int ordinal()>
SPECIAL edge: specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Not an horizontal padding edge: ") in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r4) in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r7.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r11) in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <java.lang.IllegalArgumentException: void <init>(java.lang.String)>
VIRTUAL edge: f0 = virtualinvoke r6.<com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>(r13) in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.Edges: float getRaw(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: f0 = virtualinvoke r6.<com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>(r4) in <com.facebook.litho.InternalNode: float resolveHorizontalEdges(com.facebook.litho.Edges,com.facebook.yoga.YogaEdge)> ==> <com.facebook.litho.Edges: float get(com.facebook.yoga.YogaEdge)>
VIRTUAL edge: $i1 = virtualinvoke $r2.<com.facebook.yoga.YogaEdge: int ordinal()>() in <com.facebook.litho.InternalNode$1: void <clinit>()> ==> <com.facebook.yoga.YogaEdge: int ordinal()>
VIRTUAL edge: $i2 = virtualinvoke $r4.<com.facebook.yoga.YogaEdge: int ordinal()>() in <com.facebook.litho.InternalNode$1: void <clinit>()> ==> <com.facebook.yoga.YogaEdge: int ordinal()>
VIRTUAL edge: $r1 = virtualinvoke r0.<com.facebook.litho.animation.BezierTransition$BezierNode: com.facebook.litho.dataflow.ValueNode getInput()>() in <com.facebook.litho.animation.BezierTransition$BezierNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInput()>
VIRTUAL edge: f0 = virtualinvoke $r1.<com.facebook.litho.dataflow.ValueNode: float getValue()>() in <com.facebook.litho.animation.BezierTransition$BezierNode: float calculateValue(long)> ==> <com.facebook.litho.dataflow.ValueNode: float getValue()>
VIRTUAL edge: i0 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: int getInputCount()>() in <com.facebook.litho.dataflow.DataFlowGraph: boolean areInputsFinished(com.facebook.litho.dataflow.ValueNode)> ==> <com.facebook.litho.dataflow.ValueNode: int getInputCount()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)>(i1) in <com.facebook.litho.dataflow.DataFlowGraph: boolean areInputsFinished(com.facebook.litho.dataflow.ValueNode)> ==> <com.facebook.litho.dataflow.ValueNode: com.facebook.litho.dataflow.ValueNode getInputAt(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>($r3) in <com.facebook.litho.dataflow.DataFlowGraph: boolean areInputsFinished(com.facebook.litho.dataflow.ValueNode)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
INTERFACE edge: interfaceinvoke $r2.<com.facebook.litho.dataflow.BindingListener: void onAllNodesFinished(com.facebook.litho.dataflow.GraphBinding)>(r0) in <com.facebook.litho.dataflow.GraphBinding: void notifyNodesHaveFinished()> ==> <com.facebook.litho.animation.TransitionAnimationBinding$1: void onAllNodesFinished(com.facebook.litho.dataflow.GraphBinding)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>(r1, r2) in <com.facebook.litho.Transition$AutoTransitionComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)> ==> <com.facebook.litho.animation.ComponentProperty: void <init>(com.facebook.litho.animation.AnimatedComponent,com.facebook.litho.animation.AnimatedProperty)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i0) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke $r9.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Item at index=") in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(int)>
VIRTUAL edge: $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" does not exist") in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>($r13) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: $r2 = virtualinvoke r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r3 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
SPECIAL edge: specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>("Only host components can be used as disappearing items") in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
VIRTUAL edge: virtualinvoke r3.<com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)>(i0, r1) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.MountState$1: void <init>(com.facebook.litho.MountState,com.facebook.litho.MountItem)>(r0, r1) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.MountState$1: void <init>(com.facebook.litho.MountState,com.facebook.litho.MountItem)>
VIRTUAL edge: virtualinvoke $r6.<com.facebook.litho.DataFlowTransitionManager: void addMountItemAnimationCompleteListener(java.lang.String,com.facebook.litho.DataFlowTransitionManager$OnMountItemAnimationComplete)>(r4, $r5) in <com.facebook.litho.MountState: void startUnmountDisappearingItem(int,java.lang.String)> ==> <com.facebook.litho.DataFlowTransitionManager: void addMountItemAnimationCompleteListener(java.lang.String,com.facebook.litho.DataFlowTransitionManager$OnMountItemAnimationComplete)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r4, $r3) in <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r6, $r5) in <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHostUtils: void removeItem(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i5) in <com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
VIRTUAL edge: $r4 = virtualinvoke $r3.<com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>() in <com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ComponentHost getHost()>
VIRTUAL edge: $r6 = virtualinvoke r5.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: int findLastDescendantOfItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>(i4) in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.MountState: com.facebook.litho.MountItem getItemAt(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>(r1) in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.MountState: java.lang.String maybeDecrementTransitionKeyMountCount(com.facebook.litho.MountItem)>
VIRTUAL edge: $r5 = virtualinvoke r1.<com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>() in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.Component getComponent()>
VIRTUAL edge: $r8 = virtualinvoke r1.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.MountState: void removeDisappearingItemMappings(int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void maybeMoveTouchExpansionIndexes(com.facebook.litho.MountItem,int,int)>(r17, i0, i1) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void maybeMoveTouchExpansionIndexes(com.facebook.litho.MountItem,int,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)>(r17, i0, i1) in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void ensureScrapViewMountItemsArray()>() in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void ensureScrapViewMountItemsArray()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void ensureScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void ensureScrapMountItemsArray()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>() in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>
VIRTUAL edge: r1 = virtualinvoke r17.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void moveItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r14, $r13) in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i1, i0, $r10, $r9) in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i1, i0, $r6, $r5) in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r12, $r11) in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapViewMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapViewMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sMountItemScrapArrayPool> in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke r0.<com.facebook.litho.ComponentHost: android.view.ViewParent getParent()>() in <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $r3 = virtualinvoke r0.<com.facebook.litho.ComponentHost: android.view.ViewParent getParent()>() in <com.facebook.litho.ComponentHostUtils: boolean hasAncestorHost(com.facebook.litho.ComponentHost,com.facebook.litho.ComponentHost)> ==> <android.view.View: android.view.ViewParent getParent()>
VIRTUAL edge: $z0 = virtualinvoke $r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r0) in <com.facebook.litho.TransitionContext: boolean isDisappearingKey(java.lang.String)> ==> <java.util.HashSet: boolean contains(java.lang.Object)>
VIRTUAL edge: $z1 = virtualinvoke $r3.<com.facebook.litho.TransitionSet: boolean hasDisappearAnimation(java.lang.String)>(r0) in <com.facebook.litho.TransitionContext: boolean isDisappearingKey(java.lang.String)> ==> <com.facebook.litho.TransitionSet: boolean hasDisappearAnimation(java.lang.String)>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.LinkedList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.concurrent.CopyOnWriteArrayList: int size()>
INTERFACE edge: $i0 = interfaceinvoke $r1.<java.util.List: int size()>() in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.ArrayList: int size()>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0) in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.LinkedList: java.lang.Object remove(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0) in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.concurrent.CopyOnWriteArrayList: java.lang.Object remove(int)>
INTERFACE edge: $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(0) in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <java.util.ArrayList: java.lang.Object remove(int)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void bringChildToFront(android.view.View)>(r4) in <com.facebook.litho.ComponentHost: com.facebook.litho.ComponentHost recycleHost()> ==> <android.view.ViewGroup: void bringChildToFront(android.view.View)>
VIRTUAL edge: $r5 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.NodeInfo getNodeInfo()>
VIRTUAL edge: $r6 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r7 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.LayoutOutput: com.facebook.litho.displaylist.DisplayList getDisplayList()>
VIRTUAL edge: $i0 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: int getFlags()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.LayoutOutput: int getFlags()>
VIRTUAL edge: $i1 = virtualinvoke r4.<com.facebook.litho.LayoutOutput: int getImportantForAccessibility()>() in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.LayoutOutput: int getImportantForAccessibility()>
SPECIAL edge: $r9 = specialinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)>(r3, $r7, r8) in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)>(r1, r2, r3, $r5, $r6, $r9, $i0, $i1) in <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.LayoutOutput,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.MountItem: void init(com.facebook.litho.Component,com.facebook.litho.ComponentHost,java.lang.Object,com.facebook.litho.NodeInfo,com.facebook.litho.ViewNodeInfo,com.facebook.litho.DisplayListDrawable,int,int)>
CLINIT edge: r6 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>($r3, r0) in <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: r6 = staticinvoke <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>($r3, r0) in <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.ComponentsPools: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: $z0 = virtualinvoke r0.<com.facebook.litho.ComponentHost: boolean hasDisappearingItems()>() in <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()> ==> <com.facebook.litho.ComponentHost: boolean hasDisappearingItems()>
SPECIAL edge: specialinvoke $r1.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()> ==> <java.util.ArrayList: void <init>()>
INTERFACE edge: interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r8) in <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: $r7 = virtualinvoke $r6.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: $r8 = virtualinvoke $r7.<com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>() in <com.facebook.litho.ComponentHost: java.util.List getDisappearingItemKeys()> ==> <com.facebook.litho.ViewNodeInfo: java.lang.String getTransitionKey()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>(com.facebook.litho.DataFlowTransitionManager$1)> ==> <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()>
CLINIT edge: $r1 = new com.facebook.litho.internal.ArraySet in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <com.facebook.litho.internal.ArraySet: void <clinit>()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
VIRTUAL edge: i3 = virtualinvoke $r3.<java.util.ArrayList: int size()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.util.ArrayList: int size()>
VIRTUAL edge: $r29 = virtualinvoke $r28.<java.util.ArrayList: java.lang.Object get(int)>(i2) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.util.ArrayList: java.lang.Object get(int)>
INTERFACE edge: interfaceinvoke r30.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.TransitionAnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke r30.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.ParallelBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
INTERFACE edge: interfaceinvoke r30.<com.facebook.litho.animation.AnimationBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>($r0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.SequenceBinding: void collectAppearFromValues(android.support.v4.util.SimpleArrayMap)>
VIRTUAL edge: $r8 = virtualinvoke r31.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r12 = virtualinvoke r31.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
VIRTUAL edge: $r22 = virtualinvoke r31.<com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.ComponentProperty: java.lang.String getTransitionKey()>
VIRTUAL edge: $r16 = virtualinvoke r31.<com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.ComponentProperty: com.facebook.litho.animation.AnimatedProperty getProperty()>
INTERFACE edge: f0 = interfaceinvoke r6.<com.facebook.litho.animation.RuntimeValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>($r11, r31) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.DimensionValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: f0 = interfaceinvoke r6.<com.facebook.litho.animation.RuntimeValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>($r11, r31) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.FloatValue: float resolve(com.facebook.litho.animation.Resolver,com.facebook.litho.animation.ComponentProperty)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$YAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$HeightAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$XAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$WidthAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleXAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleYAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$ScaleAnimatedProperty: void set(java.lang.Object,float)>
INTERFACE edge: interfaceinvoke $r12.<com.facebook.litho.animation.AnimatedProperty: void set(java.lang.Object,float)>($r13, f0) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <com.facebook.litho.animation.AnimatedProperties$AlphaAnimatedProperty: void set(java.lang.Object,float)>
SPECIAL edge: specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: void <init>()>
VIRTUAL edge: $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Wrong transition type for appear of key ") in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r23 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r22) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": ") in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r26 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r25) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>
VIRTUAL edge: $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.String toString()>() in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.StringBuilder: java.lang.String toString()>
SPECIAL edge: specialinvoke $r19.<java.lang.RuntimeException: void <init>(java.lang.String)>($r27) in <com.facebook.litho.DataFlowTransitionManager: void setAppearFromValues()> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountState$LayoutOutputLog: void <init>()> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
SPECIAL edge: specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String)>("Cannot unmount non-view item") in <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)> ==> <java.lang.RuntimeException: void <init>(java.lang.String)>
SPECIAL edge: specialinvoke r2.<com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>() in <com.facebook.litho.ComponentHost: void startUnmountDisappearingItem(int,com.facebook.litho.MountItem)> ==> <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.MountState$1: void <init>(com.facebook.litho.MountState,com.facebook.litho.MountItem)> ==> <java.lang.Object: void <init>()>
VIRTUAL edge: virtualinvoke $r6.<java.util.ArrayList: boolean add(java.lang.Object)>(r5) in <com.facebook.litho.DataFlowTransitionManager: void addMountItemAnimationCompleteListener(java.lang.String,com.facebook.litho.DataFlowTransitionManager$OnMountItemAnimationComplete)> ==> <java.util.ArrayList: boolean add(java.lang.Object)>
VIRTUAL edge: r1 = virtualinvoke r0.<com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>() in <com.facebook.litho.ComponentHost: void maybeMoveTouchExpansionIndexes(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.MountItem: com.facebook.litho.ViewNodeInfo getViewNodeInfo()>
VIRTUAL edge: r2 = virtualinvoke r1.<com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>() in <com.facebook.litho.ComponentHost: void maybeMoveTouchExpansionIndexes(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ViewNodeInfo: android.graphics.Rect getExpandedTouchBounds()>
VIRTUAL edge: virtualinvoke $r5.<com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)>(i0, i1) in <com.facebook.litho.ComponentHost: void maybeMoveTouchExpansionIndexes(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i0, $r6, $r5) in <com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)> ==> <com.facebook.litho.ComponentHostUtils: void scrapItemAt(int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
STATIC edge: staticinvoke <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>(i1, i0, $r4, $r3) in <com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)> ==> <com.facebook.litho.ComponentHostUtils: void moveItem(int,int,android.support.v4.util.SparseArrayCompat,android.support.v4.util.SparseArrayCompat)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void ensureScrapDrawableMountItemsArray()>() in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void ensureScrapDrawableMountItemsArray()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void ensureScrapTouchablesArray()>() in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void ensureScrapTouchablesArray()>
VIRTUAL edge: virtualinvoke r0.<com.facebook.litho.ComponentHost: void invalidate()>() in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void invalidate()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>() in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.ComponentHost: void releaseScrapDataStructuresIfNeeded()>
VIRTUAL edge: $r8 = virtualinvoke r7.<com.facebook.litho.MountItem: java.lang.Object getContent()>() in <com.facebook.litho.ComponentHost: void moveDrawableItem(com.facebook.litho.MountItem,int,int)> ==> <com.facebook.litho.MountItem: java.lang.Object getContent()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapDrawableMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapDrawableMountItemsArray()> ==> <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapTouchablesArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()>() in <com.facebook.litho.ComponentHost: void ensureScrapTouchablesArray()> ==> <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()>
CLINIT edge: $z0 = <com.facebook.litho.config.ComponentsConfiguration: boolean usePooling> in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()> ==> <com.facebook.litho.config.ComponentsConfiguration: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.ComponentsPools: com.facebook.litho.RecyclePool sTouchableScrapArrayPool> in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()> ==> <com.facebook.litho.ComponentsPools: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.SparseArrayCompat: void <init>(int)>(4) in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapMountItemsArray()> ==> <android.support.v4.util.SparseArrayCompat: void <init>(int)>
VIRTUAL edge: $z0 = virtualinvoke $r2.<com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>(r1) in <com.facebook.litho.TransitionSet: boolean hasDisappearAnimation(java.lang.String)> ==> <com.facebook.litho.internal.ArraySet: boolean contains(java.lang.Object)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>($r4, r0) in <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>(1) in <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.DisplayListDrawable: void suppressInvalidations(boolean)>
VIRTUAL edge: virtualinvoke r6.<com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>($r2, null) in <com.facebook.litho.MountItem: com.facebook.litho.DisplayListDrawable acquireDisplayListDrawableIfNeeded(java.lang.Object,com.facebook.litho.displaylist.DisplayList,com.facebook.litho.DisplayListDrawable)> ==> <com.facebook.litho.DisplayListDrawable: void setWrappedDrawable(android.graphics.drawable.Drawable,com.facebook.litho.displaylist.DisplayList)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r3.<com.facebook.litho.internal.ArraySet: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <com.facebook.litho.internal.ArraySet: void <init>()>
SPECIAL edge: specialinvoke $r4.<java.util.ArrayList: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <java.util.ArrayList: void <init>()>
SPECIAL edge: specialinvoke $r5.<com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>(com.facebook.litho.DataFlowTransitionManager$1)>(null) in <com.facebook.litho.DataFlowTransitionManager$AnimationState: void <init>()> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>(com.facebook.litho.DataFlowTransitionManager$1)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.TouchExpansionDelegate: void ensureScrapDelegates()>() in <com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)> ==> <com.facebook.litho.TouchExpansionDelegate: void ensureScrapDelegates()>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.TouchExpansionDelegate: void releaseScrapDelegatesIfNeeded()>() in <com.facebook.litho.TouchExpansionDelegate: void moveTouchExpansionIndexes(int,int)> ==> <com.facebook.litho.TouchExpansionDelegate: void releaseScrapDelegatesIfNeeded()>
CLINIT edge: $r2 = staticinvoke <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.SparseArrayCompat acquireScrapTouchDelegatesArray()>() in <com.facebook.litho.TouchExpansionDelegate: void ensureScrapDelegates()> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
STATIC edge: $r2 = staticinvoke <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.SparseArrayCompat acquireScrapTouchDelegatesArray()>() in <com.facebook.litho.TouchExpansionDelegate: void ensureScrapDelegates()> ==> <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.SparseArrayCompat acquireScrapTouchDelegatesArray()>
CLINIT edge: staticinvoke <com.facebook.litho.TouchExpansionDelegate: void releaseScrapTouchDelegatesArray(android.support.v4.util.SparseArrayCompat)>($r3) in <com.facebook.litho.TouchExpansionDelegate: void releaseScrapDelegatesIfNeeded()> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
STATIC edge: staticinvoke <com.facebook.litho.TouchExpansionDelegate: void releaseScrapTouchDelegatesArray(android.support.v4.util.SparseArrayCompat)>($r3) in <com.facebook.litho.TouchExpansionDelegate: void releaseScrapDelegatesIfNeeded()> ==> <com.facebook.litho.TouchExpansionDelegate: void releaseScrapTouchDelegatesArray(android.support.v4.util.SparseArrayCompat)>
CLINIT edge: $r0 = <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.Pools$SimplePool sInnerTouchDelegateScrapArrayPool> in <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.SparseArrayCompat acquireScrapTouchDelegatesArray()> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
CLINIT edge: $r1 = <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.Pools$SimplePool sInnerTouchDelegateScrapArrayPool> in <com.facebook.litho.TouchExpansionDelegate: void releaseScrapTouchDelegatesArray(android.support.v4.util.SparseArrayCompat)> ==> <com.facebook.litho.TouchExpansionDelegate: void <clinit>()>
VIRTUAL edge: $r2 = virtualinvoke $r1.<com.facebook.litho.RecyclePool: java.lang.Object acquire()>() in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()> ==> <com.facebook.litho.RecyclePool: java.lang.Object acquire()>
SPECIAL edge: specialinvoke $r0.<android.support.v4.util.SparseArrayCompat: void <init>(int)>(4) in <com.facebook.litho.ComponentsPools: android.support.v4.util.SparseArrayCompat acquireScrapTouchablesArray()> ==> <android.support.v4.util.SparseArrayCompat: void <init>(int)>
SPECIAL edge: specialinvoke r0.<com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>(com.facebook.litho.DataFlowTransitionManager$1)> ==> <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SparseArrayCompat: void <init>(int)>(4) in <com.facebook.litho.TouchExpansionDelegate: android.support.v4.util.SparseArrayCompat acquireScrapTouchDelegatesArray()> ==> <android.support.v4.util.SparseArrayCompat: void <init>(int)>
SPECIAL edge: specialinvoke r0.<java.lang.Object: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>()> ==> <java.lang.Object: void <init>()>
SPECIAL edge: specialinvoke $r1.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
SPECIAL edge: specialinvoke $r2.<android.support.v4.util.SimpleArrayMap: void <init>()>() in <com.facebook.litho.DataFlowTransitionManager$TransitionDiff: void <init>()> ==> <android.support.v4.util.SimpleArrayMap: void <init>()>
